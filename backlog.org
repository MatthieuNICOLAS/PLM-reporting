* TODO Corriger les solutions Scala des exercices 2 et 3 de la leçon welcome
- Un problème semble survenir à l'exécution des solutions de ces exercices
- Ceci empêche l'utilisateur de consulter le monde objectif/d'observer la démo
- Il suffit alors de cliquer sur /Run/ sans rien faire pour valider l'exercice...
* TODO Améliorer l'interaction directives/controllers
- Certaines actions du controller interagissant avec des directives sont exécutés avant que ces dernières ne soient chargées...
- Cela peut aller jusqu'à faire rendre inutilisable l'application tant que l'utilisateur n'a pas rechargé la page
- Voir pour prévenir ce genre de bugs
* TODO Améliorer la gestion du monde objectif
- Lorsqu'on passe sur la vue objectif d'un monde, celui-ci est encore dans son état initial.
- Il faut lancer la démo pour que l'objectif apparaisse.
- Voir pour :
  - Lancer la démo automatiquement lorsqu'on bascule sur la vue objectif la 1ère fois
  - Récupérer à l'initialisation l'état objectif
* TODO Corriger bug des baggles invisibles
- Les baggles n'apparaissent pas sur certains navigateurs:
  - Chrome Canary sous Mac OS
  - Firefox sous Linux
- Mais les démonstrations que l'on peut trouver sur Internet de canvas sont compatibles avec ces navigateurs
- Revoir la méthode /drawBaggle/ pour trouver la raison de ce bug.
* TODO Mettre à jour le texte de la consigne lorsqu'on change de langage de programmation
- Lorsqu'on change de langage de programmation, il faut recharger le texte de la consigne afin que les exemples de code correspondent au nouveau langage selectionné.
* TODO Empêcher plusieurs utilisateurs de tester la version de démo en concurrence
- Protéger par un mot de passe l'accès à l'application? Si oui, comment faire?
* TODO Refactorer la méthode de dessin
- Les mondes dessinés présentent des problèmes de proportions si le nombre de lignes est différent du nombre de colonnes (voir par exemple la Moria)
- Voir pour améliorer ça
* TODO Remplacer l'utilisation de CDN
  - Actuellement, on récupère les librairies telles que jQuery ou AngularJS sur des sites distants (des CDN)
  - Cela allège le serveur en laissant les CDN se charger des requêtes HTTP concernant ces librairies
  - Mais empêche l'utilisateur de travailler si le CDN est inaccessible (CDN down ou utilisateur sans connexion internet)
  - Représente aussi une faille de sécurité puisqu'on doit faire confiance à la version de la librairie hébergée par le CDN
  - Devrait plutôt fournir les librairies directement par le serveur
* TODO Corriger bug de "Program steps" avec "baisseBrosse"
  - baisseBrosse n'est pas considéré comme un pas, ce qui décale l'ensemble des "Program steps" avec les pas du programme
* TODO Mettre en place un outil de concaténation et de minification du JS
- Plutôt que de charger plusieurs fichiers JS, il serait préférable
  que le client ne charge qu'un seul fichier contenant tout le code JS
  nécessaire à l'application.
- Ceci permettrait d'améliorer les performances de l'application en
  réduisant le temps de chargement de la page (1 seule requête HTTP
  pour le JS au lieu de... beaucoup).
- Minifier le code de ce fichier permettrait d'améliorer encore plus
  la vitesse de chargement de la page.
- Voir du côté de [[http://gruntjs.com/][Grunt]]. 
* TODO Créer un mode d'auto-complétion pour BuggleWorld
* TODO Fixer le bug du baggle ne s'affichant pas
   - Lorsque webPLM a été testé sur le Mac de Gérald, le baggle
     présent normalement dans l'exercice n'était pas affiché.
   - Reste à voir si ce bug est reproductible.
* TODO Lancer la démo lorsqu'on bascule sur le monde objectif pour la 1ère fois
* TODO Limiter la vitesse d'exécution du programme du client
   - Si l'utilisateur boucle indéfinitivement sur une ou des méthodes
     ne comportant pas de stepUI, tel que System.out.println, alors
     son programme surcharge le serveur empêchant l'utilisateur de
     le stopper autrement qu'en arrêtant manuellement le serveur.
   - Lancer le programme de l'utilisateur dans une autre JVM
     permettrait de mieux contrôler son exécution et de corriger ce
     problème.
* TODO Modifier les messages concernant l'envoi de données au serveur
   - Actuellement, plusieurs messages sont affichés pour informer
     l'utilisateur que PLM est en train d'envoyer les données de son
     activité au serveur.
   - Ces messages apparaissent même si l'utilisateur a refusé de
     communiquer ses données, ce qui peut prêter à confusion.
   SCHEDULED: <2014-12-08 lun.>
* TODO Indiquer à l'utilisateur si la connexion avec le serveur a été perdue
   - Rien n'indique actuellement à l'utilisateur que la communication
     avec le serveur a été interrompue, ce qui peut être confus.
* TODO Mettre en place un processus de reconnexion de la websocket
   - Si le serveur rencontre un problème momentané, le client doit
     être le moins possible impacté.
   - Une tentative de reconnexion de la websocket à intervals
     réguliers permettrait d'éviter à l'utilisateur de recharger la
     page et (surtout) perdre ses dernières modifications.
* TODO Vérifier le bon fonctionnement de Git côté serveur
   - PLM affiche le message suivant au démarrage du serveur:
     "Impossible de récupérer une session adéquate sur les
     serveurs...".
* TODO Retirer la partie UI présente dans PLM-library
* TODO Permettre à un utilisateur de gérer les vues des mondes dynamiquement
   - Actuellement, seul le monde selectionné est
     affiché. L'utilisateur doit donc changer de monde selectionné
     pour observer l'exécution du programme sur un autre monde.
   - Donner les moyens à l'utilisateur d'ajouter ou de retirer
     dynamiquement les vues des mondes permettrait à chacun de
     personnaliser son interface.
* TODO Se renseigner sur seccomp-bpf
   - Permettrait de sandboxer les programmes utilisateurs, à voir
     comment ça s'utilise et cela fonctionne.
* TODO Se renseigner sur Docker
   - A première vue, ça pourrait être utile pour exécuter le code des
     clients une fois passé en mode serveur centralisé.
* TODO Utiliser sekuli pour tester l'interface graphique
- Semblerait que sekuli permet d'enregistrer des scénarios d'utilisation manuellement
- Le scénario est ensuite reproduit automatiquement et sekuli compare un screenshot avec ce qui était attendu
- Besoin de fixer l'interface graphique avant
