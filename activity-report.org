* Informations
  Ce fichier contient le journal de bord de Matthieu Nicolas concernant son activité sur PLM.
** Bibliographie
- https://github.com/oster/PLM
  Le lien vers le repo de la version originale de PLM
- https://github.com/MatthieuNICOLAS/webPLM
  Le lien vers le repo de la version web de PLM
* Journal de bord
** du <2014-12-01 lun.> au <2015-01-16 lun.>
*** Done
**** DONE S'assurer que la procédure de mise en place de l'environnement de développement décrite ici est complète.
**** DONE Étudier comment déployer l'application au format standalone et la rendre facile d'utilisation
**** DONE Créer une archive zip de l'application à partir [[https://www.playframework.com/documentation/2.4.x/ProductionDist#Using-the-dist-task][des instructions suivantes]]
    SCHEDULED: <2014-12-02 mar.> 
    - L'archive résultante possède deux binaires, un pour les
      environnements UNIX et un pour les environnements Windows.
**** DONE Vérifier que le binaire pour UNIX fonctionne correctement
     SCHEDULED: <2014-12-02 mar.>

**** DONE Vérifier que le script .bat fonctionne correctement
     SCHEDULED: <2014-12-02 mar.>
**** DONE Mettre en place plusieurs vues côté client
   SCHEDULED: <2014-12-17 mer.>
   - *Angular* permet de créer des applications web fonctionnant en 1 page.
   - L'application reste néanmoins composée de plusieurs vues qui sont
     chargées à la volée par *Angular* selon l'état actuel.
   - Il faut donc modifier le code de l'interface cliente pour diviser
     l'application en vues.
**** DONE Création de l'interface de l'exerciseur
**** DONE Affichage de la consigne de l'exercice
    SCHEDULED: <2014-12-18 jeu.>
    - Quelques soucis de CSS encore par contre...
**** DONE Implémentation d'un éditeur de code
    SCHEDULED: <2014-12-19 ven.>
    - *CodeMirror* semble fonctionner correctement avec *Angular* grâce à [[https://github.com/angular-ui/ui-codemirror][ce module]].
**** DONE Représentation du monde courant et de son état
**** DONE Récupérer le code de l'étudiant pour l'exercice en cours
   SCHEDULED: <2014-12-19 ven.>
   - Reprendre le code utilisé dans GitSpy
**** DONE Permettre à l'étudiant d'exécuter son code
   SCHEDULED: <2015-01-05 lun.>
**** DONE Ajouter un bouton qui permet à l'étudiant d'envoyer son code à un web-service
    - La fonction déclenchée lors du click doit récupérer le code
      contenu dans CodeMirror et le transmettre au web-service.
**** DONE Le web-service exécute le code de l'étudiant
    - Reprendre le code utilisé dans les tests
**** DONE Le web-service renvoie le résultat au client
    - Actuellement, n'attend pas la fin de l'exécution du code pour
      envoyer le résultat (faussé du coup).
    - Modifier le web-service pour qu'il attende que le thread exécutant le programme se termine?
    - Web-service modifié pour qu'il ajoute un progressSpyListener à
      PLM, qui se charge de communiquer les résultats de l'exécution
      au client.
**** DONE L'interface affiche le résultat de l'exécution
**** DONE Afficher les étapes de l'exécution du code de l'étudiant
**** DONE Modifier les interactions entre le client et le serveur
    - Pour permettre au serveur d'envoyer des données en continu au
      client lors de l'exécution d'un programme, une WebSocket est
      requise.
**** DONE Permettre à PLM de streamer l'exécution du code
    - Créer une classe basée sur [[https://github.com/oster/PLM/blob/command-view/src/plm/universe/Bridge.java][Bridge]] et [[https://github.com/oster/PLM/blob/command-view/src/plm/universe/ISender.java][ISender]] enregistrant les
      différents actions effectuées à chaque pas et les écrivant dans un
      stream.
    - Créer une classe implémentant IWorldView et vidant un buffer à
      chaque WorldHasMoved?
**** DONE Transmettre le stream de l'exécution du code au client
    - Le serveur doit rediriger le stream dans la websocket du client.
    - Pas de solution simple pour créer un stream?
    - Donner à la classe une référence vers PLMActor et utiliser sa
      méthode createMessage permet de contourner ce problème.
**** DONE Envoyer l'état initial du monde
   - Au démarrage d'un exercice, le serveur doit fournir au client
     l'état initiaux des mondes.
**** DONE Créer le modèle local du monde
   - Le client doit récupérer les données pour créer un modèle local
     de chaque monde en fonction de son type.
**** DONE Représenter côté client le monde de l'exercice
   - Une fois le modèle du monde créé, il faut ensuite dessiner sa représentation.
**** DONE Ajouter un bouton permettant de stopper l'exécution en cours
   - Si l'étudiant code une boucle infinie, cela peut s'avérer plus
     pratique que de devoir redémarrer le serveur.
**** DONE Permettre à l'utilisateur de naviguer entre les étapes de son programme
   - La liste des opérations reçues doit être stockée pour chaque
     monde et l'utilisateur doit pouvoir les jouer/dé-jouer pour
     examiner le comportement de son programme.
**** DONE Etudier comment binder une valeur du modèle à un slider avec AngularJS
   - Ceci nous permettrait d'utiliser des sliders pour permettre à
     l'utilisateur de régler la vitesse d'animation ou de naviguer
     entre les différentes étapes du programme.
**** DONE Corriger l'affichage des murs
   - Les murs correspondant à la bordure du monde ne sont actuellement
     pas dessinés.
**** DONE Ajouter des types d'opérations supplémentaires
   - ChangeBuggleDirection
   - ChangeCellColor
**** DONE Ajouter la gestion des baggles
**** DONE Retirer le délai d'exécution côté serveur
**** DONE Récupérer l'état objectif du monde
   - Plutôt que de récupérer l'état objectif du monde, on peut se
     contenter de récupérer les opérations obtenues lors de
     l'exécution de la solution.
**** DONE Permettre à l'utilisateur de consulter l'objectif pour chaque monde
**** DONE Permettre à l'utilisateur d'exécuter le code de la solution en guise de démo
   - Nous n'avons pas besoin de rejouer la solution côté serveur
     lorsque l'étudiant souhaite voir la démo, puisque nous possèdons
     déjà les opérations de la solution.
**** DONE Permettre à l'utilisateur de passer d'un monde à l'autre
   - Certains exercices comportent plusieurs mondes.
   - L'utilisateur doit pouvoir passer d'un à l'autre pour observer le
     déroulement de son algorithme en fonction des différentes
     conditions.
   - La description d'une leçon est stockée dans différents fichiers
     selon la langue actuellement selectionnée. On utilise donc
     /FileUtils/ pour récupérer la description de la langue choisie.
   - Mais /FileUtils/ utilise /Locale/ pour déterminer le fichier à
     lire, qui semble rencontrer des problèmes d'initialisation
     avec *Play framework*.
   - Affecter la valeur par défaut à /Locale/ avant le test levant
     l'exception permet de pallier temporairement à ce problème.
**** DONE Instancier Game au lancement du serveur
   - Game n'est instancié qu'au moment où le serveur l'interroge. Son
     instanciation prenant plusieurs secondes, elle entraîne un
     timeout qui renvoie une erreur à l'utilisateur.
**** DONE Mettre en place une routine permettant de compiler les fichiers Dart en Javascript, rendant l'application compatible avec tous les navigateurs
    SCHEDULED: <2014-12-02 mar.> 
    - Dans Eclipse, le plugin Dart et son option /pub build/
      permettent de générer un dossier *build* contenant le code Dart
      ainsi que son équivalent Javascript.  Cependant, il est ensuite
      nécessaire de modifier les références vers les scripts pour
      qu'elles pointent vers ce nouveau dossier:
      - Soit nous mettons à jour les références côté client (fichiers
        HTML) pour tenir compte de ce changement,
      - Soit nous modifions le fichier /conf/routes.conf/ pour que ça
        soit le serveur qui redirige les requêtes des clients vers les
        bons fichiers.
    - Après plusieurs tests plus poussés, l'option /pub build/ ne
      fonctionne pas (plus?). En effet, lorsqu'on définit le template
      HTML d'un *Component* (élément basique d'*AngularDart*) dans un
      autre fichier que dans /component.dart/, /pub build/ échoue car
      il n'arrive pas à le localiser. Quant à la commande /dart2js -o
      main.dart.js main.dart/, elle fonctionne toujours et permet de
      générer directement les fichiers Javascript à l'emplacement
      souhaité.
**** DONE Modifier /build.sbt/ pour lancer la commande /dart2js -o main.dart.js main.dart/ avant de créer l'archive zip
     SCHEDULED: <2014-12-02 mar.>
    - J'ai rencontré des difficultés à modifier /build.sbt/ pour que
      les fichiers Dart soient compilés avant la création de
      l'archive. Je n'ai en effet pas trouvé comment configurer *sbt*
      pour ajouter l'exécution d'une commande shell lors du build.
    - J'ai donc créé un script shell se contentant de lancer les deux
      commandes à la suite et permettant ainsi de rendre l'application
      compatible avec tous les navigateurs et de l'exporter dans une
      archive zip.
**** DONE Instancier un objet PLM côté serveur
   SCHEDULED: <2014-12-03 mer.>
   - Plusieurs problèmes ont été rencontrés avant de réussir à
     instancier un objet PLM depuis un projet Play Framework.
     - Tout d'abord, le jar produit par PLM embarque pour plusieurs
       librairies, dont le *compilateur Scala*. Ceci provoque alors un
       doublon avec la configuration par défaut d'un projet *Play
       Framework*. Il a donc fallu retirer cette librairie du build de
       PLM.
     - Par défaut, Play Framework utilise la /version 2.11/ du
       compilateur Scala. Cette version est cependant incompatible
       avec PLM, qui est compilée à l'heure actuelle avec la /version
       2.10.5/ du compilateur. Pour permettre à l'application de
       fonctionner, il faut donc downgrader la version de scala
       utilisée en modifiant la valeur affectée à ~scalaVersion~ dans
       /build.sbt/.
**** DONE Mettre en place un webservice RESTful permettant d'interagir avec PLM
   SCHEDULED: <2014-12-04 jeu.>
**** DONE Ajouter pop-up au démarrage informant l'utilisateur que PLM conserve une trace de son activité suite au [[https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=772026][bug report suivant]]
   SCHEDULED: <2014-12-05 ven.>
**** DONE Permettre aux utilisateurs de désactiver l'envoi de la trace de leur activité au repo central
   SCHEDULED: <2014-12-05 ven.>
**** DONE Ajouter une fonction à PLM retournant la liste des leçons
   SCHEDULED: <2014-12-08 lun.>
**** DONE Etudier comment récupérer à partir du nom d'une leçon son image et sa description
   - Actuellement, /src/plm/core/ui/ChooseLessonDialog.java/ récupère
     à partir de la liste des leçons l'image et la description associée à chacune.
     Celles-ci sont contenues dans le jar de la PLM.
   - Maintenant que nous passons à une interface WEB, devons-nous
     externaliser ces fichiers (images et descriptions) pour y accéder
     directement depuis l'implémentation du serveur ou devons-nous les
     rendre accessibles par le biais d'attributs présents dans les
     classes exposées au serveur?
   - Possible d'accéder à une image contenue dans le jar à partir
     d'une son URL. Nous avons donc juste besoin de pouvoir récupérer
     le chemin de l'image associée à la leçon.
   - Possible de charger la description d'une leçon à son initialisation dans un champ.
**** DONE Modifier PLM pour disposer d'une liste de leçons initialisées au lancement
   - Ceci permettrait au serveur de récupérer la liste des leçons et
     de leurs données, qui seraient ensuite transmises au client pour
     construire la page d'accueil.
   - Les exercices des leçons et leurs solutions seraient toujours
     chargées uniquement au moment où l'utilisateur essaient d'y
     accéder.
**** DONE Charger la description d'une leçon
   SCHEDULED: <2014-12-11 jeu.>
   - La description d'une leçon est stockée dans différents fichiers
     selon la langue actuellement selectionnée. On utilise donc
     *FileUtils* pour récupérer la description de la langue choisie.
   - Mais *FileUtils* utilise /Locale/ pour déterminer le fichier à
     lire, qui n'est pas initialisée suite aux modifications apportées
     à l'instanciation de Game.
   - Il a donc fallu modifier *FileUtils* pour utiliser /getLocale/
     plutôt que /locale/ directement, /getLocale/ se chargeant
     d'initialiser cette dernière si elle n'est pas initialisée.
**** DONE Instancier Game au lancement du serveur
   SCHEDULED: <2014-12-11 jeu.>
   - Game n'est instancié qu'au moment où le serveur l'interroge. Son
     instanciation prenant plusieurs secondes, elle entraîne un
     timeout qui renvoie une erreur à l'utilisateur.
   - /Play Framework/ permet de définir un objet *Global* permettant
     de surcharger les fonctions appelées au lancement et au stop de
     l'application. Ceci permet d'instancier *Game* au démarrage.
**** DONE Afficher la page d'accueil de l'application automatiquement au lancement du serveur
   SCHEDULED: <2014-12-12 ven.>
**** CANCELLED Faire un mock-up de l'interface WEB
   - Il convient de choisir un framework CSS au préalable pour
     faciliter le développement de l'interface WEB. [[http://usablica.github.io/front-end-frameworks/compare.html][Cette page]] liste
     un grand nombre de ces derniers.
   - *BootStrap*, *Foundation* se démarquent par leur communauté importante (surtout *BootStrap*).
   - *Semantic UI* est aussi un choix intéressant, mais semble encore jeune (trop?).
   - Il est aussi important de prendre l'intégration du framework CSS
     avec le framework JS utilisé: il semblerait que les frameworks
     tels qu'*Angular* peuvent buggés suite à une modification du DOM
     par un autre script.
**** DONE Ajouter pop-up au démarrage informant l'utilisateur que PLM conserve une trace de son activité suite au [[https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=772026][bug report suivant]]
   SCHEDULED: <2014-12-05 ven.>
**** DONE Permettre aux utilisateurs de désactiver l'envoi de la trace de leur activité au repo central
   SCHEDULED: <2014-12-05 ven.>
**** DONE Implémenter une page web incorporant un éditeur de code tel que [[http://ace.c9.io/#nav=about][Ace]] ou [[http://codemirror.net/][CodeMirror]] depuis Dart
   SCHEDULED: <2014-12-08 lun.>
   - Création d'un /Component/ se chargeant des interactions entre
     Dart et Ace.
   - Mais avec AngularDart, un Component est inclus dans son
     propre *ShadowDom* ce qui empêche Ace de trouver l'élément à
     transformer en éditeur de code.
   - Possibilité de désactiver le ShadowDom en modifiant l'attribut ~useShadowDom~ du Component.
   - Hériter de *ShadowRootAware* permet d'écouter
     l'évènement *onShadowRoot* qui indique quand le DOM est chargé.
**** DONE Tester Foundation
   SCHEDULED: <2014-12-15 lun.>
   - *Foundation* propose des fonctionnalités qui peuvent s'avérer
     intéressantes telles que [[http://foundation.zurb.com/docs/components/block_grid.html][celle-ci]] ou encore [[http://foundation.zurb.com/docs/components/joyride.html][celle-là]].
   - Mais sa faiblesse est qu'il ne gère pas l'HTML généré
     dynamiquement (voir les issues [[https://github.com/zurb/foundation/issues/5503][#5503]] et [[https://github.com/zurb/foundation/issues/4827][#4827]]).
   - Pour pallier à ce problème, il est nécessaire d'appeler la
     méthode /$(document).foundation()/ à chaque fois que l'on modifie
     le DOM et que l'on souhaite utiliser une fonctionnalité
     de *Foundation*.
   - Est-ce que des appels répétés à cette méthode peuvent être
     handicapant pour l'application et ses performances au cours d'une
     longue session d'utilisation?
*** Questions
*** Planned
**** TODO Modifier les messages concernant l'envoi de données au serveur
   - Actuellement, plusieurs messages sont affichés pour informer
     l'utilisateur que PLM est en train d'envoyer les données de son
     activité au serveur.
   - Ces messages apparaissent même si l'utilisateur a refusé de
     communiquer ses données, ce qui peut prêter à confusion.
   SCHEDULED: <2014-12-08 lun.>

**** CANCELLED S'assurer que la procédure de mise en place de l'environnement de développement décrite [[https://github.com/MatthieuNICOLAS/play-with-dart/blob/master/README.md#getting-started][ici]] est complète.
**** CANCELLED Créer un jar de l'application [[https://www.playframework.com/documentation/2.4.x/ProductionDist#Using-the-SBT-assembly-plugin][à partir des instructions suivantes.]]
    SCHEDULED: <2014-12-01 lun.>
    - Lors de la création du jar, plusieurs erreurs surgissent:
    En effet, les librairies importées par Play Framework par défaut
    déclenchent un conflit puisqu'elles déclarent des classes avec le
    même nom.  Il est donc nécessaire de définir une [[https://github.com/sbt/sbt-assembly#merge-strategy][stratégie de résolution des conflits.]]
      - Tout d'abord,il faut remplacer /assemblyMergeStrategy/ de leur
        exemple par /mergeStrategy/ dans notre cas (doc pas à jour?)).
      - Utiliser /MergeStrategy.rename/ lève l'exception
        /Java.io.FileNotFoundException/. En effet, les fichiers en
        conflits sont renommés, et leur nouveau nom dépasse 255
        caractères.  Ceci empêche donc la création du jar.
      - Utiliser /MergeStrategy.last/ permet au build de
        passer. Cependant, la classe /play.core.server.NettyServer/
        n'est pas embarquée dans le jar, empêchant ainsi l'application
        de fonctionner.
      - Utiliser une combinaison de /MergeStrategy/ telle que:
        ~mergeStrategy in assembly := { 
case "META-INF/MANIFEST.MF" => MergeStrategy.rename 
case _ => MergeStrategy.first 
}~ 
        gènère aussi un jar ne fonctionnant pas car
        une dépendance est manquante.
**** CANCELLED Voir si on peut facilement passer d'un fichier /routes.conf/ pour le développement à un fichier /routes.conf/ pour le déploiement
     SCHEDULED: <2014-12-02 mar.>
**** CANCELLED Implémenter une page web incorporant un éditeur de code tel que [[http://ace.c9.io/#nav=about][Ace]] ou [[http://codemirror.net/][CodeMirror]] depuis Dart
   SCHEDULED: <2014-12-08 lun.
**** CANCELLED Tester Bootstrap
   SCHEDULED: <2014-12-16 mar.>
   - *Bootstrap* serait capable de détecter
     automatiquement les changements apportés au DOM.
   - Il reste à déterminer si cette détection automatique est plus
     performante que le refresh manuel de *Foundation*.

** Semaine du <2015-01-19 lun.> au <2015-01-23 ven.>
*** Done
**** DONE Permettre à l'utilisateur de consulter l'API du monde
**** DONE Ajouter des tests unitaires côté serveur
   - Voir [[https://www.playframework.com/documentation/2.3.x/ScalaTestingYourApplication][la documentation de Play]] concernant l'ajout de tests
     unitaires.
   - Ajout de tests unitaires pour models.PLM.
   - Ajout de tests unitaires pour log.RemoteLogWriter.
**** DONE Retravailler l'interface de l'exerciseur
   - Revoir le placement des différents composants: consigne, éditeur
     de code, vue du monde/player.
   - Ajouter la console de log.
   - Ajouter le composant "dernier résultat" indiquant si le programme
     lancé a passé les tests et indiquant l'erreur rencontré dans le
     cas contraire.
   - Ajouter une liste des actions réalisées pour chaque monde
     (alternative au slider).
   - Lier les nouveaux composants aux données du controller.
**** DONE Intégrer les collisions avec les murs de BuggleWorld dans WebPLM
   - Gestion des collisions avec les murs
     - Transmission du message d'erreur au client
     - Arrêt de l'exécution du programme
**** DONE Intégrer les messages au sol de BuggleWorld dans WebPLM
   - Gestion des messages au sol (attribut content)
     - Ajout des opérations correspondantes
     - Représentation des messages dans l'interface cliente
**** DONE Refactorer l'architecture du projet côté client
   - Voir les bonnes pratiques listées dans [[https://github.com/johnpapa/angularjs-styleguide][ce guide]] et [[https://github.com/toddmotto/angularjs-styleguide][celui-ci]].
   - Utilisation de [[http://requirejs.org/docs/commonjs.html][CommonJS]] pour gérer les dépendances?
     => Non, juste besoin de lister l'ensemble des fichiers JS dans index.html.
   - Déplacement des directives: une par fichier.
**** DONE Fix Logger.debug
   - Rediriger la sortie standard vers l'interface client empêche les
     messages de debug du serveur de s'afficher.
   - Ajout d'un LoggerUtils s'occupant de désactiver/réactiver la
     capture de la sortie lorsque l'on souhaite logger.
**** DONE Rediriger ce qui est écrit dans la console de la PLM vers l'interface client
   - Voir Game.setOutputWriter
   - Ajout de RemoteLogWriter qui redirige la sortie standard vers la websocket.
**** DONE Fix la démo de RandMouseMaze
   - Lorsqu'on exécute la démo de cet exercice, le baggle n'est pas
     ramassé à la fin. De plus, si on recharge la page et relance la
     démo, la 1ère opération effectuée sera celle ramassant le baggle.
   - Ajout d'un stepUI à la fin de pickupBaggle
*** Questions
*** Planned
** Semaine du <2015-01-27 mar.> au <2015-01-30 ven.>
*** Done
**** DONE Rédiger le README du projet
**** DONE Permettre à l'utilisateur de changer le langage de programmation
   - Pour chaque exercice, récupérer la liste des langages disponibles
     et le langage actuellement selectionné.
   - Afficher cette liste côté client.
   - La liste doit permettre de changer le langage actuellement
     sélectionné ainsi que le mode de l'IDE.
**** DONE Refactorer drawBuggleImage
   - La méthode actuelle rencontre des difficultés à changer la
     couleur du Buggle: getImageData permet ed récupérer les pixels
     représentants l'image et de les modifier, mais ceux-ci
     correspondent aussi à la cellule sur laquelle se trouve le
     buggle...
   - Il faut donc colorier uniquement les pixels du buggle.
   - Le buggle dessiné n'a pas non plus toujours la bonne taille.
   - [[http://fabricjs.com/][Fabricjs]] propose des fonctions permettant de manipuler les
     images, à étudier.
*** Questions
**** Pourquoi la compilation de code Scala ne fonctionne pas dans webPLM mais fonctionne dans PLM?
*** Planned
**** CANCELLED Refactorer les controllers
   - Retirer les parties du codes interrogeant le serveur pour
     récupérer la liste des exercices/les données d'un exercice des
     controllers et en faire des services à la place.
   - Actuellement nécessaire d'écouter l'évènement "onmessage" pour
     traiter les messages provenant du serveur et n'étant pas une
     réponse à une requête (par exemple "operations"), on peut donc
     difficilement sortir complètement la logique de communication
     client/serveur des controllers.
** Semaine du <2015-02-02 lun.>  au <2015-02-06 ven.>
*** Done
**** DONE Stocker localement la vitesse d'exécution de l'animation
- Il serait intéressant pour l'utilisateur que la vitesse d'exécution
  de l'animations soit conservée entre les exercices/entre les
  sessions.
- Utilisation de *localStorage*?
- Il existe un module *ngStorage* permettant de stocker facilement
   avec *localStorage* une valeur manipulée par *AngularJS*
- Implémentation de *ngStorage*.
- *ngStorage* semble ne plus être maintenu et comporter plusieurs problèmes: [[http://stackoverflow.com/questions/28136231/angularjs-controller-is-caching-in-firefox-and-ie-how-to-disable][voir ce thread]].
- Implémentation de [[https://github.com/tymondesigns/angular-locker][angular-locker]] à la place.
**** DONE Fixer le bug de "Program steps" dans le cas d'un monde possédant plusieurs entités
- Dans certains exercices, tels que BDR, plusieurs entités (buggles
  dans ce cas là) sont présentes dans le monde. Le programme de
  l'utilisateur s'exécutant en concurrence sur chacune des entités,
  les buggles bougent de façon chaotique jusqu'à atteindre l'état
  final.
 - A cause de cela, les pas décrits dans "Program steps" ne
 correspondent pas à un pas d'un buggle mais aux actions de plusieurs,
  ce qui peut gêner la compréhension du programme.
- Stocke maintenant les opérations dans les entités et non plus dans
  un tableau commun au monde.
- Lorsqu'un *worldStep* est détecté, on n'envoie les opérations que
  des entités étant marqué comme prête à envoyer.
**** DONE Permettre à l'utilisateur de sélectionner une leçon en double-cliquant dessus
- *$location.path* permet de rediriger l'utilisateur vers une nouvelle page
- *ng-dblclick* permet de détecter un double-clique
**** DONE Fixer le changement de monde involontaire
- Dans le 1er exercice de la leçon labyrinthe par exemple, lorsque
  l'utilisateur exécute son programme, la vue du monde passe toute
  seule sur la celle de *Blue cheese*.
- Dû à une erreur dans la méthode *reset*, qui remplaçait le monde
  affiché actuellement par le monde qu'on venait de remettre à zéro.
**** DONE Permettre à l'utilisateur d'écourter le replay
- Lorsque l'utilisateur rejoue l'exécution de son programme, il n'a
  pas d'autres choix que d'attendre la fin de l'animation pour pouvoir
  naviguer de nouveau entre les étapes.
- Il devrait pouvoir stopper l'animation (avec les boutons *reset* et *last* ?)
**** DONE Fixer les buggles décalés
- Si le monde n'est pas carré, les buggles ne sont pas correctement alignés sur le damier
**** DONE Etudier les options de codeMirror
- Auto-complétion des {}, ()... => Add-on [[http://codemirror.net/doc/manual.html#addon_closebrackets][closebrackets]]
- Suggestion de mots-clés => Add-on [[http://codemirror.net/doc/manual.html#addon_show-hint][show-hint]]
- Indentation par défaut => Option *tabSize* à passer dans la directive AngularJS
**** DONE Mettre en valeur le message d'erreur reçu lorsqu'on n'a pas réussi un exercice
- Message affiché dans l'onglet "Result", mais rien n'indique que quelque chose de nouveau y est écrit.
- Maintenant sélectionne l'onglet "Result" automatiquement lorsqu'il est mis à jour.
**** DONE Fix la compilation en Scala
- J'ai tenté de jouer avec les versions de Scala utilisées (2.10, 2.11) et avec l'origine de la dépendance (PLM ou webPLM) pour corriger le bug, sans succès.
- Je suis tombé sur [[http://stackoverflow.com/questions/27470669/scala-reflect-internal-fatalerror-package-scala-does-not-have-a-member-int][ce sujet]] traitant d'un problème similaire, mais aucune réponse n'a été proposée.
- Lancer l'application avec *activator start* au lieu de *activator run* permet de "résoudre" le problème!
**** DONE Bloquer les actions utilisateurs pendant le changement du langage de programmation
- Empêcher l'utilisateur de changer le langage de programmation actuel alors qu'un programme est en cours.
**** DONE Ajouter un message de félicitations lorsque l'utilisateur réussit un exercice
**** DONE Ajouter un bouton permettant de passer à l'exercice suivant
**** DONE Permettre à l'utilisateur de parcourir la liste des exercices
**** DONE Permettre à l'utilisateur de passer à l'exercice suivant
**** DONE Récupérer la liste des exercices pour chaque leçon
- getRootLectures permet de récupérer les exercices principaux d'une leçon
- getChildren permet ensuite de récupérer les exercices secondaires
*** Questions
**** Pourquoi la compilation de code Scala ne fonctionne pas si on lance l'application en mode développement?
- Post d'une [[https://groups.google.com/forum/#!topic/play-framework/a_80eHRxbAk][question]] sur la mailing list de *Play Framework* pour demander des explications, en attente d'une réponse.
**** Y a-t-il un intérêt à extraire la liste des exercices de ExerciseController pour en faire un data service?
- Un service permettrait de ne récupérer qu'une fois la liste des exercices au début d'une leçon, puisque les données sont conservées entre plusieurs pages.
- Mais comment le service serait informé du changement de leçon, s'il y en a eu un?
**** Comment gérer les opérations rajoutées par l'exercice ?
- Dans l'exercice *Voie du paradis*, les cases sur lesquelles passent
  le buggle s'illumine d'elles-même au fur et à mesure de l'exécution.
- Ca correspond à l'ajout d'opérations dans *Program steps* mais qui
  ne correspondent pas au pas attendu (le buggle avance alors qu'il
  est écrit qu'il est en train de peindre la case par exemple).
*** Planned
**** DONE Fixer la duplication des baggles
- Un buggle a pu ramassé un baggle et le reposer ailleurs, sans que le baggle original ne soit retiré de la vue du monde.
- N'a pas réussi à reproduire ce bug depuis que les opérations sont gérées par les entités et non plus par le monde.
**** DONE Fixer le baggle invisible
- Lors de la séance de test réalisée avec Gérald sur son Mac, un baggle présent dans l'exercice n'était pas dessiné.
- N'a pas réussi à reproduire ce bug depuis que les opérations sont gérées par les entités et non plus par le monde.
**** DONE Refactorer le code concernant le passage au prochain exercice
- Nettoyer le code
- Voir pour l'extraire de ExerciseController et en faire un service
- Code refactoré mais service pas encore implémenté.
**** DONE Poursuivre le développement de tests unitaires
** Semaine du <2015-02-09 lun.> au <2015-02-13 ven.>
*** Done
**** DONE Etablir le plan de la présentation
**** DONE Créer un dépôt pour la présentation
- Voir [[https://github.com/MatthieuNICOLAS/IJD-seminar-2015-03-03][ici]].
**** DONE Prendre en main reveal.js
- Ajout de [[https://github.com/hakimel/reveal.js][reveal.js]] au dépôt.
- Utilisation de [[http://johnmacfarlane.net/pandoc/][Pandoc]] pour [[http://johnmacfarlane.net/pandoc/demo/example9/producing-slide-shows-with-pandoc.html][générer les slides]] à partir d'un fichier *Markdown*.
**** DONE Ajouter l'opération BuggleDontHaveBaggle
**** DONE Ajouter l'opération CellAlreadyHaveBaggle
**** DONE Mettre en place les tests unitaires pour le code JS
- Ajout de [[http://jasmine.github.io/][jasmine]] et de [[http://sinonjs.org/][sinon]] au projet.
- Création d'une [[http://localhost:9000/specRunner][page]] permettant d'exécuter les tests.
- Ajout de tests unitaires pour les principales opérations.
- Ajout de tests unitaires pour les constructeurs des modèles de
  données.
- Ajout de tests unitaires pour *BuggleWorld*.
- Ajout de tests unitaire pour *canvas*.
*** Questions
**** Créer le type d'opération "ExceptionOperation" ?
- Actuellement, il existe un type d'opération spécifique pour chaque
  au type d'exception existant.
- Ne faudrait-il mieux pas créer un type d'opération générique
  possédant juste un nom et un message?
- Cela permettrait de factoriser le code de la génération des
  opérations et de leur exécution.
- Mais cela perdrait en clarté selon moi.
**** Refactorer BuggleWorld.generateOperation (JS) ?
- En appliquant *JSHint* sur *BuggleWorld*, j'ai relevé un
  avertissement généré expliquant que la complexité cyclomatique
  de *generateOperation* est actuellement trop élevée.
- Ceci est dû à l'utilisation d'un switch pour déterminer quel
  constructeur utiliser en fonction des données reçues.
- Comment pouvons-nous refactorer *generateOperation* pour que sa
  complexité ne soit plus une source d'avertissement?
**** Refactorer le code gérant la conversion en JSON des objets Scala ?
- Les objets Scala du serveur sont transmis au client après avoir été
  converti au format JSON.
- Pour chaque type d'objet, une fonction de conversion est définie.
- Ces fonctions sont actuallement éparpillées dans plusieurs
  fichiers: *PLMActor* et *ExecutionSpy*
- Comment mieux gérer cette partie du code? Mise en place d'un utilitaire?
*** Planned
**** DONE Préparer la présentation pour le séminaire IJD
- Travailler le plan de la présentation
- Voir pour essayer [[https://github.com/hakimel/reveal.js][reveal.js]].
**** DONE Ajouter des opérations correspondant aux exceptions levées
- BuggleDontHaveBaggleException
- CellAlreadyHaveBaggle
- BuggleInOuterSpaceException
- "Sorry Dave, I cannot let you use..."
**** DONE Poursuivre le développement de tests unitaires
- Ajouter des tests unitaires pour le code JS permettrait de s'assurer de la robustesse du code.
- Voir comment utiliser [[http://jasmine.github.io/][jasmine]].
- Voir comment utiliser [[http://sinonjs.org/][sinon]].
** Semaine du <2015-02-23 lun.> au <2015-02-27 ven.>
*** Done
- Refactorer la conversion des objets Java en JSON:
  - J'ai extrait le code existant des classes principales et l'ai fragmenté en plusieurs classes.
  - Chacune d'entre elles propose des méthodes pour convertir une classe en JSON.
- Créer un repo dédié au reporting:
  - Repository disponible [[https://github.com/MatthieuNICOLAS/PLM-reporting][ici]].
- Automatisation des tests unitaires de WebPLM
  - Création d'une tâche *Grunt* permettant de lancer les tests unitaires JavaScript...
  - ... mais conflit avec /activator test/ qui tente d'accéder aux
    fichiers de *Grunt* et qui rencontre alors une erreur de droit
    d'accès...
  - Conflit évité en utilisant /activator "test-only \*Spec"/ à la place...
  - ... mais /activator "test-only \*Spec"/ ne déclenche pas
    l'évènement /test/ nécessaire au [[https://github.com/rossbayer/grunt-sbt][plugin Grunt pour sbt]] pour lancer
    la tâche *Grunt*.
  - Finalement j'ai configuré *Travis* pour [[https://github.com/MatthieuNICOLAS/webPLM/blob/master/.travis.yml#L9-L10][lancer les deux scripts de
    tests]] manuellement et ne pas utiliser de plugin pour lier *Grunt*
    et *SBT*.
- Insérer des lignes /read-only/ dans *CodeMirror*
  - La méthode de *CodeMirror* /markText/ permet de rendre certaines lignes non-modifiables.
  - Mais /markText/ est incompatible avec /setValue/ => ne peut plus
    laisser *AngularJS* gérer tout seul le contenu de l'éditeur à
    l'aide de /ng-model/.
  - Prototype fonctionnel disponible [[https://github.com/MatthieuNICOLAS/webPLM/tree/read-only-lines][dans cette branche]].
  - Fonctionne actuellement en repérant un token dans le texte
  - Rien n'empêche un utilisateur d'ajouter le token dans une de ses
    lignes, ce qui la rendra après rafraichissement de la page
    non-modifiable...
- Service pour la liste des exercices d'une leçon:
  - Création du service interrogeant le serveur pour récupérer la
    liste des exercices et la refactorant pour créer un arbre.
  - /exerciseController/ a été refactoré pour utiliser ce service pour générer son outil de sélection d'un exercice
  - Mais seulement un objet semble pouvoir écouter les messages reçus par le serveur à moment donné...
  - ... donc conflit entre /exercisesList/ et /exerciseController/ qui veulent tous les deux écouter le serveur, mais pour des messages différents
  - A dû refactorer les services /connection/ et /listenersHandler/ pour corriger ce défaut
*** Questions
- Lignes en mode /read-only/
  - Comment spécifier les lignes non-modifiables? A l'aide d'un token
    ou une autre solution est envisageable?
  - Si un token est utilisé, comment empêcher un utilisateur de
    potentiellement se saboter en l'ajoutant à une de ses propres
    lignes?
  - Si l'on supprime le token après avoir pris connaissance des lignes
    à mettre en /read-only/, comment le réinsérer de nouveau avant
    d'envoyer le code au serveur sachant que le texte a été modifié
    par l'utilisateur?
*** Planned
**** DONE Créer un service récupérant la liste des exercices d'une leçon
- Méthode *setLesson* déclenchant une requête au serveur pour récupérer la liste des exercices de la leçon
  - Où appeler cette méthode? Dans le *HomeController*?
- Fonction *getExercises* retournant la liste des exercices actuellement en mémoire
  - Fonction utilisée par *ExerciseController*
**** DONE Création d'un repository dédié au reporting
**** DONE Refactorer la conversion des objets Java en JSON
- Mettre en place une (des?) classe(s) utilitaires chargée(s) de convertir les objets en JSON.
- Retirer le code existant des classes principales.
**** DONE Automatisation des tests unitaires de WebPLM
- Voir pour activer *Travis* pour ce projet.
- Voir pour utiliser [[https://github.com/joescii/sbt-jasmine-plugin][le plugin sbt pour jasmine]] avec ce [[http://perevillega.com/executing-jasmine-tests-in-play-2-dot-0-4/][tutoriel]].
- Ou [[http://www.position-absolute.com/articles/gluing-together-jasmine-grunt-travis-ci-github-testing-front-end-code-has-never-been-easier/][créer une tâche Grunt pour les tests]] et [[https://github.com/guardian/sbt-grunt-plugin][lancer la tâche Grunt via sbt]].

**** DONE Voir comment spécifier certaines lignes en tant que read-only dans CodeMirror
  - [[http://codemirror.net/doc/manual.html#markText][A creuser]]
** Semaine du <2015-03-02 lun.> au <2015-03-06 ven.>
*** Done
- Internationalisation
  - Plusieurs solutions possibles
  - Soit gérer la localisation côté serveur avec [[https://www.playframework.com/documentation/2.0/ScalaI18N][i18n]]
    - Dans ce cas, doit déplacer les fichiers HTML et JS dans *app/views* et ajouter *.scala* dans l'extension.
    - Refactorer tous les fichiers pour remplacer les chaînes de caractères par /@Messages("key")/
    - Comment gérer les chaînes des fichiers JS utilisant une ou plusieurs variables?
  - Soit gérer la localisation côté client avec [[https://github.com/julienrf/play-jsmessages][ce plugin]]
    - Création d'un service interrogeant le serveur pour récupérer la localisation et la mettant à disposition des différents composants
    - Doit refaire une passe à chaque fois que la vue/le DOM change
    - Doit ajouter un attribut à l'HTML pour repérer l'ensemble des chaînes à traduire
    - Mais *délai* au chargement de la page où la traduction n'est pas encore effectuée...
    - Délai réduit en insérant la traduction directement dans l'HTML et en initialisant le module à partir de là.
    - Doit ajouter la méthode traduisant le DOM dans chaque directive afin de s'assurer que le DOM soit bien chargé à ce moment là.
  - Utiliser les deux?
    - Côté serveur pour tout le texte statique
    - Côté client pour toutes les chaînes intégrant des variables JS
    - Mais plus complexe et moins maintenable.
  - Quel outil utilisé pour rédiger la traduction?
    - Le format attendu des traductions est [[https://www.playframework.com/documentation/1.2/guide12#aApplicationmodellocalisationa][le suivant]].
    - [[http://basmussen.github.io/i18n-maven-plugin/index.html][Ce plugin]] semble simple d'utilisation, mais à voir comment le configurer pour l'adapter à nos besoins.
    - Voir [[http://www.cantamen.com/i18nedit.php][cet outil]] sinon => outil buggé et inutilisable, ne peut même pas ouvrir un fichier de propriétés...
    - [[http://attesoro.org/][Attesoro]] est aussi facile d'utilisation, mais les fichiers générés ne sont pas ceux attendus par Play => Voir pour renommer les fichiers/modifier la config de Play
  - *po4a*
    - Utilisation de *po4a* pour générer les fichiers HTML traduits
    - Les fichiers HTML traduits sont placés dans le répertoire /public/lang/filepath
    - Le routing côté serveur a été configuré pour récupérer les fichiers HTML traduits si besoin et possible
    - *po4a xhtml* ne donne pas le résultat souhaité: les balises et leurs attributs apparaissent dans les msgIds, ce qui complique le travail des traducteurs.
    - Utilisation de *po4a xml* qui, avec sa configuration par défaut, permet de récupérer uniquement les chaînes de caractères à traduire.
- Revert
  - Ajout d'un bouton déclenchant l'envoi d'un message pour réinitialiser l'exercice dans l'UI.
  - Configuration du serveur pour déclencher la réinitialisation de l'exercice à la réception de ce message et renvoyer le nouvel état de l'exercice au client.
- Messages correspondant aux opérations
  - Au lieu de les définir dans le JS (ce qui complique la traduction), ceux-ci sont maintenant définis dans leur classe Java respective.
  - Modification de la fonction de conversion des opérations Java -> JSON pour aussi envoyer les messages
  - Reste à traduire ces messages dans PLM
- "Sorry Dave"
  - Deux méthodes de SimpleBuggle "empêchaient" le programme de l'utilisateur de terminer avec une exception s'il utilisait /Left/ ou /Right/
  - Supprimer ces deux méthodes a permis de correctement stopper l'exécution et d'afficher le message d'erreur "Sorry Dave..." dès que l'utilisateur tente d'accèder à une méthode "interdite"
*** Questions
- Comment disposer les différents composants de l'interface?
  - Lesquels sont indispensables? Ceux qu'il faut mettre le plus en avant?
  - Lesquels l'utilisateur doit-il pouvoir masquer?
*** Planned
**** DONE Refactorer les opérations pour gérer le message côté serveur
- Actuellement, le message correspondant à une opération affiché dans les "Program Steps" est défini côté client, en JS.
- Pour faciliter sa traduction, il faudrait plutôt le définir dans PLM directement.
**** DONE Pouvoir redémarrer un exercice
- Appeler la méthode /revert/ de PLM
**** DONE Supporter l'internationalisation
- Voir cette [[https://github.com/MatthieuNICOLAS/webPLM/issues/1][issue]].
- [[https://github.com/julienrf/play-jsmessages][Plugin intéressant]]?
** Semaine du <2015-03-09 lun.> au <2015-03-13 ven.>
*** Done
- Améliorer l'interface graphique
  - Redisposition des éléments
  - Meilleure gestion de la taille de l'éditeur de code et de la représentation du monde
  - Ajout d'un bouton permettant d'étendre/réduire à sa taille par défaut le bloc contenant les instructions pour une meilleure lecture
  - Ces modifications ont été mergées dans la branche master
- Refactorer setLocale
  - setLocale, pour mettre à jour la description d'une leçon/la consigne d'un exercice, re-set la leçon et l'exercice courant.
  - J'ai donc modifié setLocale pour que cette méthode ne se contente que de définir la langue à utiliser.
  - Puisque à terme, une instance de Game correspondra à une session d'utilisation, j'ai modifié PLMActor pour qu'il définisse la langue à utiliser à son instanciation.
  - Voir la partie *Questions*
- Empêcher l'utilisateur de modifier le cookie indiquant sa langue
  - Puisque la langue de l'utilisateur n'est pas une donnée sensible, crypter la valeur actuelle du cookie paraît démesuré.
  - On se contente donc de supprimer le cookie si la langue indiquée n'est pas supportée.
- Ajout du service *langs* :
  - Interroge le serveur pour récupérer la liste des langues supportées par l'application
  - Stocke la langue actuelle dans un cookie 
- Ajout de la directive *selectLang*
  - Interagit avec *langs* pour afficher la langue actuelle et la liste des langues supportées
  - Indique à l'utilisateur que l'application a besoin de redémarrer pour prendre en compte le changement de langue
  - Permet à l'utilisateur de changer la langue sélectionnée
- Déployer une version de démonstration
  - A partir de [[https://github.com/opensas/play2-openshift-quickstart][cet exemple]], j'ai pu mettre en ligne *webPLM* sur *Openshift*
  - L'application est donc testable [[webplm-editorcrdt.rhcloud.com][ici]]
  - Reste à voir pour contrôler l'accès pour prévenir les bugs liés au singleton Game.
- Déclencher une BuggleInOuterSpaceException lorsque les coordonnées sont négatives
  - Il a suffit d'ajouter un /throw new BuggleInOuterSpaceException/ si l'utilisateur appelle setX/setY/setPos avec un paramètre négatif
*** Questions
- Aller plus loin dans le refactoring de setLocale?
  - Quand l'utilisateur change la langue de l'application, je ne vois pas comment mettre à jour la page (notamment l'HTML des directives AngularJS) sans forcer l'utilisateur a rechargé la page
  - A terme, recharger la page implique la destruction du couple "Acteur - PLM" courant et l'instanciation d'un nouveau
  - J'ai donc modifié PLM pour que la langue doive être définie à son instanciation
  - Ca implique que pour que le changement de langue soit pris en compte, l'utilisateur doit redémarrer le serveur actuellement (car PLM est instanciée au lancement du serveur et que le singleton persiste jusqu'à son interruption)
  - Faut-il refactorer setLocale pour qu'il mette dynamiquement à jour tout son contenu lors d'un changement de langue, évitant ainsi à l'utilisateur de redémarrer le serveur, sachant que cela sera inutile dès lors que Game ne sera plus un singleton?
  - Ou se contenter pour le moment d'afficher un message invitant l'utilisateur à redémarrer le serveur pour que les changements soient pris en compte?
*** Planned
**** DONE Améliorer l'outil de sélection d'un exercice
- Plus le mettre en valeur (revoir le label du bouton?)
- Empêcher l'utilisateur de cliquer sur "Switch to" lorsqu'aucun exercice n'est actuellement choisi
- Lorsque l'utilisateur sélectionne un exercice principal de la liste de gauche, il faudrait que celui-ci soit aussi sélectionné dans la liste de droite
**** DONE Déclencher une BuggleInOuterSpaceException lorsque les coordonnées sont négatives
- L'utilisateur peut actuellement affecter des valeurs négatives aux coordonnées du Buggle via setX/setY/setPos.
- Il faudrait l'en empêcher en levant une exception s'il essaie.
**** DONE Déployer une version de démonstration
- Si PLM doit être présentée, une version de démonstration accessible facilement pourrait se révéler utile.
**** DONE Ajouter des opérations correspondant aux exceptions levées
- BuggleInOuterSpaceException
**** DONE Ajouter à l'UI un composant permettant de choisir la langue du programme
- Ajouter un service AngularJS :
  - Disposant de la liste des langues supportées par l'application
  - Pouvant accéder et manipuler les cookies de l'utilisateur
- Ajouter la directive AngularJS servant d'interface entre l'utilisateur et le service précédemment décrit
**** DONE Empêcher l'utilisateur de modifier le cookie indiquant sa langue
- Lorsque l'utilisateur souhaite changer la langue de l'application, je stocke le code de la nouvelle langue choisie dans un cookie
- Mais un cookie est modifiable en JS
- L'utilisateur peut donc modifier sa valeur actuelle pour une valeur random, ce qui empêche l'application de fonctionner correctement (le client n'arrive plus à charger les fichiers HTML)
- Il faut donc mettre en place un mécanisme empêchant la modification du cookie par l'utilisateur:
  - Cryptage du cookie?
  - Destruction du cookie si valeur inconnue?
**** DONE Corriger bug setLocale
- Lorsqu'on sélectionne certains exercices (tel que celui de la Moria) puis qu'on recharge la page, le serveur plante.
- L'exception levée provient à priori d'un appel à setLocale qui débouche sur une NullPointerException
- Voir pour corriger ce bug/refactorer setLocale
**** DONE Améliorer l'interface graphique
- Redisposer les éléments de l'UI pour que l'éditeur de code soit côte à côte avec la vue du monde
** Semaine du <2015-03-16 lun.> au <2015-03-20 ven.>
*** Done
- Correction du bug des baggles invisibles:
  - Remplacer /DefaultColors.BAGGLE/ par une couleur par défaut tel que /orange/ permet de corriger le bug, le problème semble donc venir de /DefaultColors.BAGGLE/.
  - Après quelques tests, j'ai remarqué qu'il suffisait de retirer le ';' à la fin de la chaîne 'rgb(209, 105, 31);'
- Correction des solutions Scala des exercices 2 et 3 de la leçon welcome
  - Après de nouveaux tests, il s'avère que seulement l'entité /welcome.instructions.ScalaInstructionsEntity/ bug.
  - Le bug semble provenir du package incorrect de cette classe.
  - Pourquoi le test d'intégration recherchant les leçons cassées ne l'a pas détecté?
  - L'exception déclenchée lorsqu'une entité solution n'est pas trouvée est catchée dans /run()/ de *DemoRunner*.
  - Ajout d'un test lançant la solution à l'aide de *DemoRunner* et détectant si une exception est lancée:
  - A permis de corriger /welcome.instructions.ScalaInstructionsEntity/ mais aussi /welcome.loopdowhile.ScalaPoucet1Entity/
- Correction des tests unitaires de Git
  - Récupération de la valeur de la propriété autorisant le traçage des utilisateurs au lancement des tests.
  - Autorise le traçage des utilisateurs pendant la durée du test, puis remet l'ancienne valeur.
- Correction des [[https://github.com/MatthieuNICOLAS/webPLM/issues][issues ouvertes sur GitHub]]
  - Ajout d'un effet de surbrillance lorsqu'on passe la souris sur un bouton de la barre de menu en haut ([[https://github.com/MatthieuNICOLAS/webPLM/issues/10][fix #10]]).
  - Ajout d'un bouton "Not yet" à la pop-up invitant l'utilisateur à passer à l'exercice suivant lorsqu'il réussit un exercice ([[https://github.com/MatthieuNICOLAS/webPLM/issues/11][fix #11]]).
- Ne pas crasher lorsqu'on accède à un exercice non-supporté ([[https://github.com/MatthieuNICOLAS/webPLM/issues/3][fix #3]])
  - Ajout de l'exception /NonImplementedWorldException/
  - Ajout du champ /exception/ dans le JSON transmis au client spécifiant l'exception rencontrée, s'il y en a une.
  - Ajout d'un message d'avertissement indiquant à l'utilisateur que la représentation du monde n'est pas disponible.
- Améliorer le fonctionnement du canvas
  - Update du canvas à raison de 10 fois par seconde.
  - L'utilisateur peut uniquement contrôler le nombre d'opérations appliquées durant ce temps au modèle.
  - La vitesse d'application des opérations variant de toutes les 40ms à toutes les 3s.
  - J'ai remarqué que si l'utilisateur naviguer manuellement à travers les états du modèle alors que l'exécution n'est pas terminée (donc que le nombre d'états n'est pas encore fixé), les performances chutent énormement.
  - Tant que l'exécution du programme n'est pas terminée, les boutons de navigation sont donc inactifs.
- Tester ngTranslate
  - Finalement j'ai décidé d'utiliser [[https://angular-gettext.rocketeer.be/][angular-gettext]] pour son efficacité, sa simplicité d'utilisation et sa doc complète.
  - Mis en place *angular-gettext* et traduit l'application.
  - Il reste cependant quelques conflits avec les composants de *Foundation* (les tooltips et les alerts ne sont pas correctement mis à jour après un changement de langue).
- Refactorer setLocale de PLM
  - Se contente de mettre à jour *i18n* et d'avertir les *HumanLangListeners* du changement de langue
  - *Lesson* et *Lecture* sont maintenant des *HumanLangListeners*
  - Ils mettent donc à jour l'énoncé/la description de la leçon dès que la langue est changée
  - Le serveur avertit le client lorsque le changement de langue a été effectué de son côté
  - Le client redemande alors le contenu de PLM qui l'intéresse
    - La description des leçons si on est sur la page /Home/
    - L'énoncé de l'exercice si on est sur la page /Exercise/
- Traduire l'API d'un monde lors d'un changement de langue
  - Il a suffit de mettre à jour l'API du 1er monde initial dans *Exercise* quand /currentHumanLanguageHasChanged/ est appelée
  - Le client demande donc aussi l'API lorsque la langue est modifiée alors qu'il est sur la page /Exercise/
- Mettre à jour le texte de la consigne lorsqu'on change de langage de programmation
  - On se contente d'envoyer le nouveau texte de la consigne lors d'un changement de langage de programmation et de mettre à jour l'UI.
*** Questions
*** Planned
**** DONE Ne pas redimensionner l'éditeur de code en fonction du canvas dans un exercice non-supporté
- L'éditeur de code est actuellement redimensionné pour avoir les mêmes proportions que la représentation du monde
- Si l'exercice n'est pas supporté, le canvas n'est pas affiché.
- Si l'utilisateur redimensionne la fenêtre ensuite, la taille de l'éditeur de code est mise à jour et il devient à son tour invisible.
- Revoir comment l'éditeur de code est redimensionné
**** DONE Traduire l'API d'un monde lors d'un changement de langue
- Pour récupérer l'API d'un monde, il faut interroger une instance de ce monde.
- Il faudrait faire de *World* un *HumanLangListener*
- Mais afin d'éviter les fuites mémoires, il faut faire attention à gérer correctement les add/removeHumanLangListener
- Voir si on peut pas simplifier la chose en retirant l'API d'un monde de ses instances
**** DONE Mettre à jour le texte de la consigne lorsqu'on change de langage de programmation
- Lorsqu'on change de langage de programmation, il faut recharger le texte de la consigne afin que les exemples de code correspondent au nouveau langage selectionné.
**** DONE Refactorer setLocale de PLM
- setLocale de PLM devrait juste mettre à jour la langue de *i18n*
- Le contenu de PLM chargé devrait être re-traduit.
- Le client doit interroger le serveur pour mettre à jour son interface.
**** DONE Tester ngTranslate
- Voir [[http://angular-translate.github.io/][ce module]] ou [[https://github.com/StephanHoyer/ng-translate][celui-ci]].
- Permettrait de modifier dynamiquement les chaînes de caractères de l'interface sans devoir recharger la page
- Modifier la mise à jour du contenu de PLM lors d'un changement de langue
**** DONE Ne pas crasher lorsqu'on accède à un exercice non-supporté ([[https://github.com/MatthieuNICOLAS/webPLM/issues/3][fix #3]])
- Déclencher une exception lorsque le monde qu'on essaie de convertir un monde non-supporté en JSON.
- Catcher l'exception et insérer dans le JSON un champ pour prévenir le client que le monde n'est pas supporté.
- Vérifier côté client la valeur de ce champ et afficher un message d'avertissement s'il est présent.
**** DONE Corriger les tests unitaires de Git
- Certains tests unitaires de Git (ceux qui accèdent à un repo distant) échouent si la propriété autorisant le traçage des utilisateurs est à *false*.
- Modifier les tests pour ne pas tenir compte de cette propriété.
**** DONE Corriger les solutions Scala des exercices 2 et 3 de la leçon welcome
- Un problème semble survenir à l'exécution des solutions de ces exercices
- Ceci empêche l'utilisateur de consulter le monde objectif/d'observer la démo
- Il suffit alors de cliquer sur /Run/ sans rien faire pour valider l'exercice.
**** DONE Corriger bug des baggles invisibles
- Les baggles n'apparaissent pas sur certains navigateurs:
  - Chrome Canary sous Mac OS
  - Firefox sous Linux
- Mais les démonstrations que l'on peut trouver sur Internet de canvas sont compatibles avec ces navigateurs
- Revoir la méthode /drawBaggle/ pour trouver la raison de ce bug.
** Semaine du <2015-03-23 lun.> au <2015-03-27 ven.>
*** Done
- Adapter BatWorld
  - Transmet l'état initial du BatWorld au client
  - A la fin de l'exécution du programme client, envoie le nouvel état
  - On se contente de transmettre le résultat et de le stocker côté client (pas d'opérations faisant évoluer le modèle "pas-à-pas")
  - Ajout d'un modèle pour BatWorld côté client.
- Retravailler ExerciseController
  - Tous les mondes n'ont pas besoin d'un canvas pour être dessiné
  - Il fallait donc refactorer ExerciseController pour qu'il soit capable de gérer plusieurs services de dessin (un pour canvas, un pour le DOM...)
  - Tous les mondes n'ont pas non plus besoin d'un monde objectif, d'une démo, d'un historique...
  - Ajout de variables permettant de retirer dynamiquement les composants de l'interface inutiles pour un exercice
- Ajout du service *drawWithDOM*
  - Possèdera à terme plusieurs méthodes de dessin (une pour chaque monde supporté)
  - Lorsqu'un monde est choisi, il sélectionne la méthode de dessin appropriée
- Représenter *BatWorld* avec *drawWithDOM*
  - Se contente d'injecter une directive AngularJS dans le DOM
  - Celle-ci affiche les tests visibles en ajoutant du style selon les paramètres supplémentaires
- Refactoring de la gestion des méthodes de dessin
  - Les méthodes de dessin sont contenues dans des objets spécifiques, les vues
  - Lorsque le controller instancie un modèle, il fournit aussi au service de dessin la méthode de la vue qui correspond
  - Ajout de *BatWorldView* selon cette architecture
- Refactorer le service canvas
  - Ajout de *BuggleWorldView* regroupant les méthodes de dessin jusque là contenues dans *BuggleWorld*, *BuggleWorldCell*...
  - Modification de canvas pour la méthode dessin utilisée lui soit fournie par le controller.
  - Adaptation des tests unitaires pour canvas à ce nouveau fonctionnement.
- Sortir la boucle de dessin du controller
  - Tout d'abord, gérer la boucle de dessin dans le service de dessin paraît peu adapté car redondant 
  - Ensuite, sortir la boucle de dessin du controller peut être nécessaire si on considère que certains mondes n'en ont pas la nécessité (BatWorld par exemple)
  - Mais si l'on considère que tous les mondes possèdent une ou plusieurs étapes, alors son fonctionnement ne dépend pas du monde.
  - Il ne reste plus que la création d'un service dédié.
  - L'intérêt me paraît faible pour le moment.
- Voir pour améliorer la gestion de la boucle dessin
  - Il est conseillé d'utiliser $timeout et $interval au lieu de setTimeout et setInterval lorsqu'on utilise AngularJS
  - Ceci a permis de se passer de l'instruction  /$scope.$apply()/
- Mise à jour des librairies utilisées
  - Passage d'AngularJS 1.3.6 à AngularJS 1.3.15
  - Apparition d'un bug avec le routing côté client:
    - /$location.redirect/ n'était plus accepté par *angular-ui-router*
    - Refactoring de *HomeController* pour utiliser plutôt les méthodes mises à disposition par *angular-ui-router*
- Téléchargement des librairies en local
  - Ne passe plus par un CDN pour récupérer les librairies *JS* et *CSS*
  - Ca augmentera la charge serveur (le client interrogera désormais le serveur pour récupérer les librairies au lieu de se tourner vers le CDN)
  - Mais ça permet à l'utilisateur de travailler sans connexion internet si le serveur est lancé en local
- Corriger bug AngularJS avec ng-bind-html/Program Steps
  - L'erreur provient d'une mauvaise utilisation de jQuery par AngularJS [[https://github.com/jquery/sizzle/issues/309][(voir ici)]].
  - Télécharger jQuery et déclarer /element.getAttribute/ si la méthode n'existe pas suffit à résoudre le problème.
  - Voir pour une meilleure solution?
- Adapter TurtleWorld pour webPLM
  - Ajout des objets et des méthodes Scala pour convertir le monde initial en JSON
  - Ajout des modèles du monde et des opérations côté client
- Refactorer Game
  - J'ai commencé à modifier Game pour qu'il ne soit plus un singleton
*** Questions
- Refactorer les Program Steps
  - A chaque étape du programme, AngularJS est configuré pour ajouter un noeud HTML contenant une phrase décrivant l'action.
  - Lorsque le programme compte plusieurs centaines d'étapes (Moria par exemple en possède plus de 500), la manipulation du DOM ralentit l'application.
  - Comment résoudre ce problème?
    - Au lieu de créer un noeud par étape, créer un noeud qui va contenir les descriptions (du simple texte) de tous les noeuds?
      - Mais dans ce cas, on perd la possibilité d'associer une étape à une ligne.
    - Limiter le nombre d'étapes affichées?
      - Ne charger que les étapes voisines de l'étape actuelle
	- Voir les performances de cette solution
      - N'afficher que des intervalles d'étapes et permettre à l'utilisateur d'explorer les intervalles qui l'intéressent
*** Planned
**** DONE Corriger bug d'AngularJS avec ng-bind-html
- Lorsqu'on affiche de l'HTML provenant de PLM dans l'interface, nous utilisons l'attribut /ng-bind-html/ pour l'insérer dans un élément du DOM
- Cependant, lorsqu'on modifie l'HTML affiché (la consigne est traduite dans une autre langue par exemple), une erreur est levé par *AngularJS*
- Cas bizarre:
  - Sur la page de sélection d'une leçon, aucune erreur n'est généré lorsqu'on passe d'une description d'une leçon à une autre...
  - ... sauf si l'on a démarré l'application sur une autre page (l'exerciseur par exemple) et qu'on s'est ensuite redirigé vers l'accueil...
**** DONE Corriger les erreurs liées aux Program Steps
- Lorsqu'on exécute son programme, puis qu'on bascule sur la vue objectif d'un monde, une erreur d'AngularJS est générée pour chaque *Program Steps*
- Voir pour identifier l'origine de cette erreur
- Cette erreur n'apparaît pas non plus si on accède à l'appli depuis l'accueil
**** DONE Mettre à jour les librairies utilisées
- Voir si ça corrige pas le bug d'AngularJS avec ng-bind-html ou celui avec les Program Steps
**** DONE Voir pour améliorer la gestion de la boucle dessin
- Remplacer setTimeout/Interval par $timeout/interval
- /$scope.$apply()/ nécessaire?
**** CANCELLED Sortir la boucle de dessin du controller
- La boucle d'animation devrait se trouver dans le service de dessin ou dans la vue d'un monde et non pas dans le controller.
**** DONE Refactorer le service canvas
- Voir pour sortir la méthode de dessin du monde des Buggles du modèle
- La méthode de dessin devrait se trouver dans un objet prévu pour.
**** DONE Adapter BatWorld pour webPLM
- Création de BatWorld côté client
  - Besoin de créer un modèle de données côté client?
  - Ou on se contente d'envoyer le résultat (chaîne de caractère + error ou pass) ?
- Modification de l'interface client
  - Pas vraiment besoin d'un canvas pour ce monde
  - Une directive AngularJS semble suffire
** Semaine du <2015-03-30 lun.> au <2015-04-03 ven.>
*** Done
- Suppression des composants de l'ancienne UI.
  - Il reste toutefois des boîtes de dialogues (*JOptionPane*) par endroits
- Refactorer Game
  - Remplacement des /Game.getInstance()/ par le passage en paramètre du constructeur d'une instance de Game
  - Suppression de la fonction /Game.getInstance()/
  - Refactoring des classes nécessitant faisant appel à /Game.getInstance()/ pour récupérer un attribut (i18n et programmingLanguage majoritairement)
    - Le refactoring a consisté principalement à ajouter un attribut *game* à ces classes et à modifier leur(s) constructeur(s) en conséquence.
- Corriger bug BatWorld
  - On appelle stepUI() dans *BatEntity* uniquement pour indiquer aux espions que le monde a évolué
  - stepUI() avertit le spy ajouté par le serveur qu'il peut envoyer la liste d'opérations au client
  - L'erreur survient ensuite, dans le code ajoutant du délai dans l'exécution pour limiter la vitesse de l'animation dans Swing
  - Ce code n'étant plus nécessaire, on peut se contenter de le supprimer
  - Sinon, pour référence, la *NullPointerException* provenait de l'instruction /game.stepModeEnabled()/ de stepUI()
    - Depuis le refactoring de *Game* en tant que classe et non singleton, les entités ont besoin d'avoir une instance de *Game* en tant que paramètre.
    - J'ai juste oublié de passer l'instance de *Game* au constructeur de *BatEntity*
- Corriger bug boucle infinie récursive
  - Dans les *BatExercises*, on exécute la solution une première fois pour calculer la valeur de *expected* à partir de la valeur de *result* obtenue
  - Si on déclenche une boucle infinie, le thread est tué avant d'avoir modifié *result*, qui conserve alors sa dernière valeur...
  - Mettre *result* à *null* après avoir obtenu *expected* a suffit à résoudre le problème.
- Fixer les tests des entités solutions
  - L'origine de ce bug semble provenir du constructeur par défaut manquant, maintenant que j'ai ajouté *game* en paramètre
  - Ajouter un constructeur sans paramètre corrige ce bug.
  - Cependant des erreurs sont toujours présentes dans ces mondes
- Améliorer la gestion de la machine TELECOM Nancy
  - Création d'un hook *pre-receive*
  - Création d'un hook *post-receive*
  - Déclaration des variables d'environnement sur le serveur
  - Mais bugs:
    - Les variables d'environnement non pas l'air d'être prises en compte (déclarées dans .bash_profile, est-ce qu'elles sont pas chargées avant un git push?)
    - Message d'erreur "On ne peut pas mettre à jour la branche courante"
    - A tenté de checkout une autre branche le temps de l'update depuis le script *pre-receive* mais message d'erreur "n'est pas un repo Git" (à revérifier)
- Empêcher LightBot de faire crasher le serveur
  - LightBotWorld héritant de *GridWorld*, il n'était pas considéré comme non-supporté
  - Lève désormais une *NonImplementedWorldException* dans *GridWorldToJson* aussi
  - Mais bug si on démarre un exo LightBot et qu'on change avant d'avoir exécuter son programme (lastResult != null alors qu'il ne devrait pas à mon sens)
    - GitSpy essaie alors d'enregistrer les fichiers correspondant au code de l'utilisateur
    - Mais lastResult.language == JAVA alors que l'exercice n'est disponible qu'en LightBot
    - Le SourceFile à mettre à jour est alors introuvable
  - Pour le moment, je réinitialise le lastResult lorsqu'on change de langage de programmation pour éviter ce bug.
- Ajout de ProgLangListener
  - Permet de mieux gérer le changement du langage de programmation
- Ajout de HumanLangListener
  - Permet de mieux gérer le changement de langue
*** Questions
- Gestion des comptes utilisateurs
  - Comment gérer les comptes utilisateurs?
  - Proposition 1: avant la connexion à webPLM, demander à l'utilisateur de lui fournir un UUID ou lui proposer d'en générer un?
    - Constructeur de Game prend en paramètre l'UUID pour retrouver la bonne session
    - Si UUID passé est inconnu, le refuser ou le créer?
  - Proposition 2: gestion des comptes classiques
    - On demande à l'utilisateur de s'inscrire à l'aide d'un pseudo, d'une @mail et d'un mot de passe
    - On lui associe un UUID et on stocke le couple dans une BDD
  - Question annexe: Pouvoir utiliser la PLM sans session?
    - Game instancié sans identifiant de session
    - Pas de conservation des traces utilisateurs 
- Gestion des différents langages de programmation
  - Actuellement, les objets utilisés pour compiler et exécuter le code de l'élève dans chaque langage de programmation sont des singletons.
  - Faut-il mieux garder ces objets de cette manière?
  - Ou les refactorer pour que chaque utilisateur instancie son compilateur et son exécuteur pour chaque langage de programmation.
*** Planned
**** DONE Empêcher LightBot de faire crasher le serveur
- Identifier la source du plantage
**** DONE Refactorer Game
- Modifier Game pour qu'il ne soit plus un singleton
**** DONE Corriger bug boucle infinie récursive
- Si l'utilisateur déclenche une boucle infinie d'appel récursif dans les exercices Bat
  - L'exécution de son programme est correctement stoppée par le système...
  - Mais le programme indique que l'utilisateur a réussi l'exercice...
- Dans un autre type d'exercice (j'ai testé avec celui de la Moria)
  - L'exécution du programme est aussi stoppée par le système...
  - Mais le programme compare le résultat avec le monde solution et détecte l'erreur de l'utilisateur
- Trouver l'origine de ce bug
**** DONE Corriger bug BatWorld
- Dans [[https://github.com/MatthieuNICOLAS/webPLM/tree/79062db63585156e786cad9e5ae6f6414688cf71][cette version]] de webPLM, une NullPointerException est levée dans stepUI() lorsque l'utilisateur exécute son programme sur un BatExercise.
- Comme une exception a été levé, l'exercice n'est pas validé.
- Voir d'où provient cette exception.
- Bug non présent dans [[https://github.com/MatthieuNICOLAS/webPLM/tree/b13c0c3720dad5a4917cb98dee41eae68a913e59][cette version précédente]].
** Semaine du <2015-04-07 mar.> au <2015-04-10 ven.>
*** Done
- Fixer tâche Ant de tests
  - Ajout de haltonfailure="true" haltonerror="true" dans la configuration des tâches de tests de Ant.
- Fixer les tests des entités solutions
  - Suppression du constructeur des entités prenant en paramètre un Game
  - A la place, les entités récupèrent le game du monde qu'il leur est fourni.
  - Mais le bug suivant reste à résoudre:
    - Pour certaines entités, la classe compilée est incorrecte (il manque le *Entity*)
    - En effet, la classe compilée s'appelle par exemple *DutchFlagAlgo* au lieu de *DutchFlagAlgoEntity*
    - L'instanciation de cette entité échoue donc.
    - L'erreur apparaît dans tous les langages de programmation mais l'erreur n'est fatale qu'en Java.
    - *tabName* sert comme nom de la classe compilée
    - Si on a défini un constructeur, le nom de celui-ci doit correspondre au *tabName*
    - Il a donc suffit de retirer les constructeurs que j'avais ajouté lors du refactoring de Game pour corriger ces bugs.
- Améliorer la gestion du monde objectif
  - Si on bascule sur le monde objectif et que la démo n'a pas encore été jouée, on l'exécute
- Corriger BatWorld
  - La NullPointerException provient de l'instruction /ProgrammingLanguage pl = game.getProgrammingLanguage();/
  - Il s'agissait d'une erreur d'affectation de game dans le constructeur.
- Améliorer la gestion de la machine TELECOM Nancy
  - Création d'un webhook dans GitHub
  - Définition d'une signature secrète
  - Création d'un serveur
    - Code disponible [[https://github.com/MatthieuNICOLAS/webhook-handler][ici]] 
    - Le serveur met à disposition un service pour lancer le script pour redémarrer webPLM
    - Ce service est accessible par le biais d'une requête POST
    - La signature de la requête doit correspondre à celle définie dans le webhook GitHub
  - Le serveur NodeJS est maintenu en ligne grâce à [[https://github.com/foreverjs/forever][forever]].
  - Refactoring des git hooks précédemment développé pour implémenter un nouveau script pour redémarrer webPLM
    - Kill webPLM si le serveur est déjà en route
    - Supprime le fichier RUNNING_PID
    - Redémarre webPLM
  - Il suffit maintenant de pusher sur la branche *prod* de *WebPLM* pour que le serveur se mette à jour automatiquement
- Mettre en place un Logger dans PLM
  - PLM définit une interface de Logger
    - Un Logger doit avoir une méthode log pour logger les messages sur le serveur
    - Un Logger doit avoir une méthode send pour logger les messages sur l'interface cliente
  - Le constructeur de Game prend maintenant en paramètre un Logger
  - Dans webPLM, on définit une classe implémentant cette interface
  - Finalement, ce n'est pas le logger qui se charge de traduire les messages
    - On a pas forcément envie de traduire tous les messages (les logs serveurs par exemple)
    - Tout le texte traduit n'est pas loggé non plus (consignes des exercices...)
  - J'ai remplacé la majorité des /System.out.println/ par des /logger.log/
*** Questions
*** Planned
**** DONE Mettre en place un Logger dans PLM
- Actuellement dans PLM, on remplace *System.out* et *System.err* pour capturer les messages
- Mettre en place un *Logger* paraît plus propre
- Le *Logger* posséderait l'outil de traduction des messages
- Un paramètre permettrait de spécifier si le message est loggé côté serveur ou côté client.
**** DONE Améliorer la gestion de la machine TELECOM Nancy
- Utiliser des git hooks pour:
  - Stopper la JVM lorsqu'un push est reçu (s'inspirer de [[https://github.com/opensas/play2-openshift-quickstart/blob/master/.openshift/action_hooks/stop][ce script]])
  - Relancer le serveur d'appli après la mise à jour des fichiers (s'inspirer de [[https://github.com/opensas/play2-openshift-quickstart/blob/master/.openshift/action_hooks/start][celui-ci]])
**** DONE Corriger BatWorld
- La conversion des entités BatTests en JSON rencontre une NullPointerException
- Voir d'où vient cette erreur
**** DONE Améliorer la gestion du monde objectif
- Lorsqu'on passe sur la vue objectif d'un monde, celui-ci est encore dans son état initial.
- Il faut lancer la démo pour que l'objectif apparaisse.
- Voir pour :
  - Lancer la démo automatiquement lorsqu'on bascule sur la vue objectif la 1ère fois
  - Récupérer à l'initialisation l'état objectif 
**** DONE Fixer les tests des entités solutions
- Une erreur est déclenchée lorsqu'on reset certains mondes (Pancakes, Dutchflag, Hanoi)
- La copie des entités de ces mondes lors d'un reset échoue, déclenchant l'erreur
**** DONE Fixer SimpleExerciseTest
- Ces tests échouent puisque l'on passe à une leçon sans l'avoir chargé.
- Revoir le constructeur de SimpleExerciseTest
**** DONE Fixer tâche Ant de tests
- Si une erreur survient lors des tests, le build n'est pas marqué comme *failed*
- Des bugs ont donc pu passer inaperçus
- Corriger ce bug
** Semaine du <2015-04-13 lun.> au <2015-04-17 ven.>
*** Done
- Refactorer le système de traduction
  - Suppression de l'attribut *locale* de *FileUtils*
    - *locale* est maintenant un paramètre passé lors de la lecture d'un fichier
  - Ajout de l'attribut *locale* dans *Game*
    - Le constructeur possède maintenant un argument supplémentaire
    - Les getters/setters sont modifiés pour fonctionner avec l'attribut *locale* de *Game*, et non celui de *FileUtils*
  - L'attribut *i18n* n'est plus /static/
    - Les objets/méthodes en ayant besoin pour traduire des messages ont été refactorés
- Mise en place du Trello
  - Disponible à cette adresse: https://trello.com/b/zdQyQX6N/plm
- Mise en place d'une BDD
  - SQL
    - *Play Framework* propose d'utiliser  *Java Persistence API*: https://www.playframework.com/documentation/2.3.x/JavaJPA
    - [[http://slick.typesafe.com/][Slick]] peut être une alternative.
    - Reste à voir quel SGBD utiliser ?
      - H2
      - MySQL
  - NoSQL
    - [[https://github.com/ReactiveMongo/Play-ReactiveMongo][ReactiveMongo]] permet d'utiliser *MongoDB* à la place
    - Moins pratique à utiliser que JPA
    - Voir pour mettre en place [[http://hibernate.org/ogm/][Hibernate OGM]] plutôt?
  - Play + Hibernate OGM + MongoDB
    - Après avoir tenté tant bien que mal à mettre en place le tout, je rencontre tjrs une erreur au lancement de l'appli
    - Malgré plusieurs [[http://docs.jboss.org/hibernate/ogm/4.1/reference/en-US/pdf/hibernate_ogm_reference.pdf][refs]], j'ai pas réussi à débugger l'appli
    - Je n'ai pas réussi non plus à trouver d'exemples complets avec cet ensemble de technos
  - Kundera
    - Semble être une alternative à Hibernate OGM mais compatible avec Play
    - [[https://github.com/impetus-opensource/Kundera/wiki/Using-Kundera-with-Play!-Framework][Voir ce tuto]]
  - Reactive Mongo
    - Il existe un [[https://github.com/ReactiveMongo/Play-ReactiveMongo][plugin ReactiveMongo pour Play]].
    - J'ai pu réaliser rapidement un [[https://github.com/MatthieuNICOLAS/webPLM/tree/098a79d9790a2710cef711b611bca092bd6238f5][prototype fonctionnel]].
- Gestion des comptes utilisateurs
  - OAuth permet de rediriger l'utilisateur vers un site externe (Google, GitHub)
  - Une fois l'utilisateur loggé sur ce site, on lui demande le droit d'acceder à certaines fonctionnalités de ce site
  - Dans notre cas, on veut juste (pour le moment) récupérer un identifiant unique
  - [[https://developer.github.com/v3/oauth/][OAuth pour GitHub]]
    - [[http://typesafe.com/activator/template/play-oauth2-scala][Voir cet exemple]]
    - A voir pour trouver un identifiant unique dans la réponse de GitHub
  - [[https://developers.google.com/identity/protocols/OpenIDConnect?csw=1#authenticatingtheuser][OAuth pour se log via Google]]
    - En décodant l'ID token de la réponse grâce à ces [[https://developers.google.com/wallet/instant-buy/about-jwts#jwt_libraries][informations]], on peut récupérer l'attribut *sub*
    - Il s'agit d'un ID unique de l'utilisateur chez Google
  - Une fois qu'on a récupérer un ID unique via un service, on peut l'utiliser pour créer son compte/récupérer son compte
  - Mettre en place [[https://github.com/mohiva/play-silhouette][Silhouette]]
    - Module pour Play Framework supportant déjà l'authentification par le biais de différents services
    - [[https://github.com/mohiva/play-silhouette-seed][Voir cet exemple]]
    - Utilise [[https://github.com/sahat/satellizer][Satellizer]]
  - Données stockées
    - ID
    - Git ID
    - Provider? (Google, FB, GitHub...)
    - Lang
    - ProgLang
*** Questions
- Qui interagit avec la BDD pour récupérer le profil de l'utilisateur?
  - L'acteur instancie un utilisateur à partir de la BDD?
  - Le modèle utilisateur s'instancie à partir de la BDD?
*** Planned
**** DONE Mise en place d'une BDD
- Voir les technos disponibles
- Mettre en place la solution choisie
- Interfacer WebPLM avec la BDD
**** DONE Mettre en place Trello
- Pour que Olivier Kautz puisse suivre facilement l'évolution du projet et les tâches en cours
**** DONE Refactorer le système de traduction
- Actuellement, *i18n* est un attribut static de *Game*
- Devrait y avoir une instance par utilisateur pour que les actions d'un utilisateur ne perturbent pas avec les autres utilisateurs
- Obliger de changer l'objet *Locale* de la JVM?
- Ou l'on peut se contenter de conserver l'objet *Locale* désiré dans la session de l'utilisateur pour générer les traductions?
** Semaine du <2015-04-20 lun.> au <2015-04-24 ven.>
*** Done
- Mettre en place Silhouette
  - Tuto pour Play + AngularJS: https://github.com/mohiva/play-silhouette-angular-seed
  - A mergé ce tuto dans WebPLM
  - Refactoring du code:
    - Suppression des fichiers inutiles
    - Modification de l'architecture pour s'adapter à celle de WebPLM
  - Ajout de la page d'authentification
  - Ajout de "Sign in with *Google*"
  - Ajout de "Sign in with *GitHub*"
  - Fusion avec la branche /add-reactivemongo/
- Difficultés rencontrées:
  - Adapter l'exemple de *Silhouette* avec le code existant
  - Dans l'exemple, on gère l'authentification avec des controllers
  - Dans notre cas, on veut que ça soit l'acteur correspondant à la websocket du client qui gère ça
    - Permet de mettre à jour l'instance de PLM avec les informations retrouvées dans la BDD après authentification
  - Refactoring de l'acteur
    - Quelles dépendances ajouter?
      - Seulement l'environnement?
      - Qui instancie ces dépendances? Controller? Actor lui-même? Injector?
  - Refactoring de *Satellizer*
    - Ne doit plus se baser sur une API Rest mais sur un protocole de communication avec la websocket
- Couplage Controller/Acteur
  - Finalement, plutôt que de refactorer le fonctionnement de *Silhouette*, il est plus simple d'indiquer à l'acteur que son utilisateur vient de se connecter
  - Pour ça, ajout d'un UUID aux acteurs, qui sont transmis à leur utilisateur respectif
  - Lors qu'un utilisateur s'identifie auprès d'un controller, celui retrouve l'acteur à l'aide de l'UUID et lui envoie un message
- Implémentation de UserDAO pour Mongo
  - Permet à l'utilisateur de s'enregistrer dans la BDD à sa 1ère connexion
  - Son profil est récupéré lors de ses connexions suivantes
  - Correction d'un bug dupliquant son profil à chacune de ses connexions
*** Questions
*** Planned
**** DONE Implémenter la gestion des comptes utilisateurs
- Se renseigner sur OAuth
- Définir les données stockées
- Créer le modèle correspondant
- Ajouter le formulaire de création de compte
  - *EDIT:* Séparé dans une autre tâche
** Semaine du <2015-04-27 lun.> au <2015-04-30 jeu.>
*** Done
- Mettre en place la création de compte PLM
  - Ajout du controller *SignUp* et des directives correspondantes
  - L'utilisateur peut créer un compte, se déconnecter, se reconnecter...
  - Mais après un redémarrage du serveur, impossible de se reconnecter à son compte...
    - Bug dû à l'oubli de l'implémentation d'un nouveau DAO store pour les mots de passe
    - Ajout d'un nouveau *PasswordInfoDAO* utilisant MongoDB pour stocker les mots de passe
- Ajouter les identifiants Git dans les comptes utilisateurs
  - L'identifiant Git est pour le moment connu uniquement dans le coeur de PLM
  - Il faudrait que le service d'authentification soit en mesure de le récupérer pour l'associer au compte de l'utilisateur lors de sa création
    - [X] soit l'id Git est transmis au client qui le retransmet au controller d'inscription
    - [ ] soit lorsque le controller d'inscription interroge l'acteur du client pour récupérer l'id Git
  - Refactorer le système d'utilisateurs dans PLM:
    - Si les comptes utilisateurs sont gérés par webPLM, on n'a plus besoin de les gérer dans PLM
    - Suppression de la gestion des utilisateurs dans PLM
    - Refactoring des autres classes nécessitant un *User* auparavant pour qu'elles utilisent un *userUUID* à la place
  - Reste à voir pour récupérer le code du nouvel utilisateur
    - Lorsqu'on démarre une leçon, l'ensemble du code de l'utilisateur courant pour les exercices de cette leçon est récupéré
    - Lorsqu'on change d'utilisateur, il faut donc
      - [X] soit supprimer les instances de leçons existantes
      - [ ] soit mettre à jour ces dernières avec les nouveaux paramètres (langage de prog, langue, code source utilisateur...)
  - Mise en place d'un cookie *GitID*
    - Si l'utilisateur ne possède pas de compte, nous utilisons ce cookie pour retrouver sa session
    - Lorsqu'il créé un compte, la valeur de ce cookie est associé à son compte
    - Plus besoin de ce cookie lorsqu'on possède un compte, il n'est donc plus utilisé ensuite
- Corriger changement de langue et selection d'exos
  - Les exos sont maintenant enregistrés en tant que *HumanLangListener* à leur instanciation, et non pas quand l'utilisateur les sélectionne.
  - Le service JS gérant la liste des exercices interroge de nouveau le serveur lorsqu'il reçoit un message indiquant que la langue a changé.
*** Questions
- Un repo Git est créé à chaque connexion
  - Par exemple, lorsqu'un utilisateur arrive sur le site, un repo Git lui est *momentanément* attribué
  - Lorsqu'il s'identifie avec son compte (manuellement ou avec son token), on lui réattribue son repo Git habituel
  - Que faire du repo Git momentanément utilisé?
    - Le garder et envoyer la trace sur le repo *GitHub*
      - Le marquer en tant que *momentané* à l'aide d'un fichier ou d'un token dans l'id?
    - Le supprimer à la connexion de l'utilisateur?
      - Dans ce cas, on limite le nombre de branches vides
      - Mais il peut arriver qu'on supprime un repo d'un utilisateur car un autre utilisateur s'est loggé ensuite
*** Planned
**** DONE Mettre en place la création de compte PLM
- *Silhouette* propose déjà un système de création de compte
- Le mettre en place et l'adapter pour webPLM
**** DONE Fixer bug empêchant les utilisateurs de se connecter après un redémarrage serveur
- Si le serveur redémarre, les comptes précédemment créés deviennent inaccessibles
  - Ils existent toujours mais l'authentification échoue
  - L'erreur générée est [[https://github.com/MatthieuNICOLAS/webPLM/blob/add-silhouette/app/controllers/CredentialsAuthController.scala#L77][celle-ci]]
**** DONE Ajouter les identifiants Git dans les comptes utilisateurs
- Lorsqu'un utilisateur se connecte au site, un identifiant Git doit être généré
- Lorsque l'utilisateur s'identifie pour la 1ère fois  (via un compte PLM ou un site tiers), cet identifiant lui est associé
- Lorsqu'il s'authentifie les prochaines fois, l'instance de PLM doit changer d'utilisateur pour passer sur son compte
**** DONE Corriger changement de langue et selection d'exos
- Si on change de langue et qu'on accède à la liste des exos, cette dernière n'est pas traduite
- Mettre à jour la liste des exercices lors d'un changement de langue
** Semaine du <2015-05-04 lun.> au <2015-05-07 jeu.>
*** Done
- Améliorer le workflow lors de la connexion d'un utilisateur
  - Vérification de l'identité de l'utilisateur lors de la création de la Websocket
    - Incompatibilité entre le mode de fonctionnement du JWT et de la websocket
      - Le JWT est transmis en tant qu'header de la requête HTTP
      - Impossible d'ajouter un header dans une requête pour une websocket côté client
      - Mais possible de l'ajouter côté serveur:
	- Passe le token en paramètre de l'url de la websocket puis l'ajoute en tant que header avant de traiter la requête
  - Si l'utilisateur n'avait pas encore de gitID, on lui envoie un message pour qu'il set son cookie
  - Si l'utilisateur reçoit un nouveau gitID alors qu'il se croit authentifié, c'est que son token a expiré => suppression du token
  - Reste à transmettre l'identité de l'utilisateur à l'acteur
    - Ajout d'un constructeur PLMActor prenant l'objet user en paramètre
    - Envoie les données du profil au client
- Corriger la démo se lançant plusieurs fois simultanément
  - Le flag permettant de déterminer si la démo a déjà été jouée est mis à vrai dès le lancement de la démo
  - Ceci prévient le fait de re-interroger le serveur si la démo est toujours en cours
  - Refactoring au passage de la méthode appelée à chaque changement d'onglet
    - Vérifie si l'on passe sur un nouveau monde avant d'appeler /setCurrentWorld/
    - Vérifie si l'on passe sur une nouvelle méthode de dessin avant d'appeler /setDrawFnct/
- Gérer les erreurs lors de la connexion d'un utilisateur
  - Modification de /user.service/ pour retourner la promise lorsqu'on appelle les méthodes de /$auth/
  - Ajout de blocs /catch/ pour gérer l'erreur rencontrée par la requête
  - Affichage d'un message selon l'erreur rencontrée
- Extraire les préférences de l'utilisateur de Game
  - Gestion de la langue
    - Ajout de la langue préférée dans le modèle User
    - Lorsque l'utilisateur s'inscrit, on stocke sa langue actuelle
    - Lorsque l'utilisateur change de langue, s'il est authentifié, on modifie la valeur stockée
    - Lorsque l'utilisateur se connecte, s'il est authentifié, on récupère en priorité la langue de son profil
    - Suppression du cookie pour la langue si on est authentifié
    - Amélioration au passage des messages entre client/serveur lors d'un changement de langue pour éviter les doublons
  - Gestion du langage de programmation
    - Modification du constructeur de Game pour prendre en paramètre le langage de programmation initial
    - Modification du modèle User: ajout de l'attribut /lastProgLang: Option[String]/
    - Ajout du paramètre /lastProgLang: Option[String]/ au constructeur de PLMActor et de PLM
    - Lorsque PLM instancie *Game*, il lui fournit le dernier language de programmation utilisé ou "Java" par défaut
    - Lorsque l'utilisateur change de langage de programmation, s'il est authentifié, on met à jour la valeur stockée
  - Reste à faire la gestion du tracking de l'utilisateur
- Finaliser le script redémarrant webPLM
  - Correction du PID affiché dans le fichier de log du script
  - Rediriger les logs de webPLM dans un fichier
    - Les logs ne sont pas redirigés dans le fichier si on démarre le serveur avec /activator start/
    - Par contre, avec /activator run/, les logs sont bien ajoutés au fichier
    - Voir [[http://logback.qos.ch/manual/index.html][la doc]] de *logback* pour modifier la configuration des logs
*** Questions
- Emettre un feedback pour l'utilisateur lorsque celui-ci se connecte/déconnecte?
  - Afficher un écran de chargement lorsqu'on interroge le serveur pour authentifier l'utilisateur
  - Afficher un message pour informer l'utilisateur qu'il s'est correctement connecté
  - Afficher un message pour informer l'utilisateur qu'il s'est correctement déconnecté
*** Planned
**** DONE Améliorer le workflow lors de la connexion d'un utilisateur
- Lorsqu'un utilisateur se connecte
  - Vérifier s'il est déjà authentifié
    - Si oui, récupérer son gitID et le transmettre à l'acteur lors de son instanciation
    - Sinon, vérifier s'il possède un cookie gitID
      - Si oui, récupérer sa valeur et le transmettre à l'acteur lors de son instanciation
      - Sinon, générer un UUID aléatoire et le transmettre à l'acteur lors de son instanciation
- Pour cela, il faut vérifier l'identité de l'utilisateur à la création de la websocket
  - Voir pour fusionner Application et ApplicationController
**** DONE Corriger demo se lançant plusieurs fois simultanément
- Maintenant la démo se lance automatiquement lorsqu'on bascule sur la vue objectif
- Si on a noté que la démo a déjà été jouée, on se contente de rejouer les opérations reçues
- Mais si l'utilisateur bascule plusieurs fois sur la vue objectif avant que la démo n'ait finie de s'exécuter
  - On exécute la démo plusieurs fois et on stocke l'ensemble des opérations générées
  - La démo devient inconsistente
- Ne pas relancer la démo si celle-ci est déjà en cours d'exécution
**** DONE Gérer les erreurs lors de la connexion d'un utilisateur
- Crédentials incorrects
- Refus d'autoriser PLM à interroger le compte tiers si on essaie de se connecter via un provider
**** DONE Ajouter le style des boutons de connexion via un provider
- Styliser les boutons *g+* et *GitHub* pour correspondre à leur service respectif
** Semaine du <2015-05-11 lun.> au <2015-05-13 mer.>
*** Done
- Finaliser le script redémarrant webPLM
  - Rediriger les logs de webPLM dans un fichier
    - En fait, les logs sont correctement effectués
    - Ils sont juste stockés à un emplacement différent: *target/universal/stage/logs/application.log* au lieu de *logs/application.log* en mode développement
    - Au passage, j'ai modifié la configuration de logging pour ne stocker les logs qu'un certain temps (30 jours actuellement)
  - Voir pour killer /activator start/ qui reste actif et bouffe des ressources actuellement
    - Kill *activator* 30 secondes après son démarrage
- Extraire les préférences de l'utilisateur de Game
  - Gestion de la langue
    - Correction d'un bug faisant crasher l'acteur à la connexion de l'utilisateur
      - *NullPointerException* dû au service *ExercisesList* qui redemandait la liste des exercices suite au changement de langue
      - Prévient la *NullPointerException* en vérifiant la leçon courante au moment où le serveur reçoit le message
  - Gestion du langage de programmation
    - Lorsque l'utilisateur se connecte, on modifie le langage de programmation actuel pour reprendre le dernier utilisé
  - Gestion du traçage de l'utilisateur
    - Ajout de la propriété *trackingUser* dans le modèle des utilisateurs
    - Ajout d'une pop-up renseignant l'utilisateur sur le traçage de ses actions et demandant s'il souhaite qu'on publie ses traces ou non
      - Pop-up s'affiche à la connexion de l'utilisateur s'il n'y a pas de valeur définie pour *trackingUser*
      - L'utilisateur peut accepter, refuser, ou reporter le choix à plus tard.
    - Ajout du message /setTrackUser/
      - Généré lorsque le client répond à la question
      - Met à jour ses préférences utilisateur sauvegardées
      - Met à jour la propriété de *Game*
    - Modification des tests unitaires en conséquence
- Corriger bug empêchant l'authentification
  - Les utilisateurs enregistrés dans la BDD du serveur ne possède pas de langue préférée alors que le modèle stipule qu'ils en possèdent une
    - Lorsque l'utilisateur s'inscrit, la langue utilisée à ce moment est stockée en tant que langue préférée
    - Mais des utilisateurs se sont inscrits avant la mise en place de ce processus
  - D'où crash lorsqu'on essaie de récupérer la valeur stockée
  - Modification du modèle pour que la langue soit une option
    - Lorsqu'un utilisateur se connecte, on vérifie s'il a une préférence pour la langue
    - Si oui, on passe sur cette langue
    - Sinon, on conserve la langue actuelle et on met à jour ses préférences avec cette dernière
- Edition du profil
  - Ajout d'un mode *Edit* pour la page de profil
  - Envoi du message /updateUser/ lorsque l'utilisateur valide ses modifications
  - L'acteur met à jour les données stockées à partir du contenu de ce message lorsqu'il le reçoit
*** Questions
- Traçage des utilisateurs
  - Lorsqu'un utilisateur ne possède pas de compte, actuellement sa trace d'utilisation est rendue publique sur *GitHub*
    - Modifier ce comportement?
  - L'utilisateur doit pouvoir changer au fil du temps sa préférence concernant la publication de ses données
    - Que faire s'il décide de ne plus partager ses données?
      - On se contente de ne plus pusher sa branche sur *GitHub*?
      - On supprime sa branche de *GitHub*?
*** Planned
**** DONE Finaliser le script redémarrant webPLM
- Voir pour killer /activator start/ qui reste actif et bouffe des ressources actuellement
- Dans le fichier de log du script, le PID indiqué après le redémarrage du serveur n'est pas le bon.
- Voir pour rediriger les logs de webPLM dans un fichier
**** DONE Corriger bug empêchant l'authentification
- Un bug présent sur le serveur empêche un utilisateur de se connecter à son compte
- D'après les logs, une erreur est liée à la langue de l'utilisateur
**** DONE Edition du profil
- Pouvoir modifier les données de son profil d'utilisateur et ses préférences
** Semaine du <2015-05-26 mar.> au <2015-05-29 ven.>
*** Done
- Retirer les *EventListeners*
  - Lorsque le *ExerciseController* est initialisé, il ajoute 2 *EventListeners* pour redimensionner automatiquement la taille du canvas et de l'IDE en fonction de la taille de la fênetre.
  - Cependant, lorsque l'*ExerciseController* est détruit (lorsqu'on change de page), ces derniers ne sont pas retirés.
  - Si l'utilisateur modifie ensuite la taille de sa fenêtre, on se retrouve alors à essayer de modifier la taille d'éléments qui n'appartiennent plus au DOM.
  - Ces *EventListeners* sont donc maintenant retirés à la destruction de *ExerciseController*.
- Extraire les préférences de l'utilisateur de Game
  - Gestion du traçage de l'utilisateur
    - Mise à jour de la branche /add-track-user/ avec les changements apportés à la branche /master/
    - *trackUser* n'est plus nécessaire pour que l'inscription soit validée.
    - Mise à jour de la page de profil pour que l'utilisateur puisse modifier ensuite sa préférence.
    - Modification du message /updateUser/ pour prendre en compte cette donnée additionnelle.
- Ajouter un système de notification
  - Ajout de la librairie [[https://github.com/jirikavi/AngularJS-Toaster][AngularJS-Toaster]]
  - Ajout d'un utilitaire pour *Toaster*
    - Englobe la génération de la notification dans un /$timeout/
      - Il peut arriver que la notification ne soit pas affichée (bug de *AngularJS-Toaster*)
      - Un /$timeout/ force *AngularJS* à actualiser l'affichage
    - Met à disposition des méthodes pour générer des notifications de succès, d'avertissement et d'erreur
  - Ajout d'un toaster pour notifier l'utilisateur de la fermeture de la websocket
    - Warning s'il s'agit d'une déconnexion souhaitée (par défaut)
    - Error s'il s'agit d'une déconnexion forcée (close code === 1000)
  - Ajout d'un toaster pour notifier l'utilisateur du bon déroulement de son authentification/de sa déconnexion
  - Ajout d'un toaster pour notifier l'utilisateur du bon déroulement de la mise à jour de son profil
- Ajouter un évènement de commit IDLE
  - Ajout d'un timer de 5min sur la page d'exercice
  - Le timer est réinitialisé si
    - L'utilisateur tape du code
    - L'utilisateur utilise le player pour (re)jouer une animation
    - L'utilisateur change d'onglets
      - Monde courant <-> Monde objectif
      - Instructions <-> API <-> Contrôles
      - Résultats <-> Logs
  - Ajout d'un message /userIdle/ envoyé quand le timer arrive à 0 et l'utilisateur est noté *idle*
  - Ajout d'un message /userBack/ envoyé quand le timer est réinitialisé si l'utilisateur était noté *idle*
  - Ajout d'un commit IDLE à la réception du message /userBack/ spécifiant
    - La date de réception du message /userIdle/
    - La date de réception du message /userBack/
    - La durée de la période d'inactivité
- Refactorer l'indicateur de résultat d'exécution
  - L'indicateur n'est plus une pastille de couleur, mais un message.
  - Lorsque le programme utilisateur ne passe pas l'exercice, l'indicateur renvoie au message d'erreur affiché plus bas.
*** Planned
**** DONE Extraire les préférences de l'utilisateur de Game
- C'est dans *Game*, à l'aide des propriétés, que l'on récupère les préférences de l'utilisateur
- Les préférences de l'utilisateur comporte la langue, le langage de programmation...
- Elles sont stockées actuellement dans un fichier de propriétés Java
- Mettre en place une BDD à la place
- Gérer ça dans un composant séparé
**** DONE Ajouter un évènement de commit IDLE
**** DONE Ajouter un système de notification
- Un système de notifications basé sur [[http://codeseven.github.io/toastr/demo.html][toastr]] ou une alternative permettrait de rendre le site plus dynamique
  - Une notification pour indiquer que la connexion/déconnexion s'est correctement déroulée
  - Une notification pour indiquer que les préférences de l'utilisateur ont bien été mises à jour
  - Une notification pour indiquer que la websocket a été fermée et qu'un problème est survenue, invitant l'utilisateur à recharger la page
**** DONE Refactorer l'indicateur de résultat d'exécution
- Un indicateur change de couleur en fonction du résultat de l'exécution du programme utilisateur.
- Lorsque le programme échoue, le message complet de l'erreur rencontrée est affiché plus bas, dans un autre composant de l'UI.
- Mais le message de l'erreur n'est pas suffisamment mis en avant [[https://github.com/MatthieuNICOLAS/webPLM/issues/12][(voir cette issue)]].
- Refactorer l'indicateur pour renvoyer clairement vers le message d'erreur.
** Semaine du <2015-06-01 lun.> au <2015-06-05 ven.>
*** Done
- Amélioration de l'option "traçage de l'utilisateur"
  - Lorsque l'utilisateur choisi l'option "Let me decide later", on stocke la date qu'il sera 3 jours plus tard
  - Lors de ses prochaines connexions, on vérifie si la date stockée au préalable est maintenant dépassée
    - Si oui, on affiche de nouveau le formulaire l'informant de notre volonté de rendre public ses traces d'utilisation
    - Sinon, on n'affiche pas le formulaire
  - Si aucune date n'est stockée, alors il s'agit de sa 1ère connexion et on affiche le formulaire
- Fermer les threads d'exécution à la fermeture de l'onglet
  - Ajout d'un appel à /stopExerciseExecution()/ dans /Game.quit()/
- Mettre à jour la traduction
  - Ajout de l'attribut /translate/ servant à spécifier les chaînes à traduire dans les balises où il était manquant
  - Modification de l'HTML pour faciliter le travail de traduction
  - Ajout d'appels à /gettextCatalog.getString/ dans les fichiers .JS pour traduire les chaînes présentes dans ces fichiers
  - Traduction des chaînes du catalogue en français
- Mise en place d'un service d'authentification
  - Recherche de librairies permettant de mettre en place un service OAuth
    - [[https://github.com/t1msh/node-oauth20-provider][t1msh/node-oauth20-provider]] semble interéssant, à tester.
    - [[https://github.com/thomseddon/node-oauth2-server][thomseddon/node-oauth2-server]] aussi, le projet a l'air d'être plus mature et de disposer d'une plus grande communauté
    - Ces projets utilisant *Node.js*, utiliser [[http://mean.io/][MEAN]].IO pour créer la base de l'application semble une bonne idée
    - Il existe un fork de MEAN.IO, par le développeur originel du projet: [[http://meanjs.org/][MEAN.JS]], plus récent
    - Une autre librairie pour créer son service OAuth et qui semble plus indiquée: [[https://github.com/jaredhanson/oauth2orize][jaredhanson/oauth2orize]] 
  - MEAN.IO
    - Permet de générer la base d'une appli *Node.js* avec comme librairies/dépendances
      - MongoDB et [[http://mongoosejs.com/][Mongoose]], un wrapper pour interagir avec la BDD
      - [[http://expressjs.com/][Express]]: framework pour gérer les routes, les vues, les middlewares...
      - AngularJS
    - Organise l'application sous forme de packages
      - Un package est composé d'une partie serveur, d'une partie cliente et de fichiers de configs
      - L'ensemble des packages sont chargés au lancement du serveur
    - Embarque par défaut les packages *admin* et *users*
      - Voir si complet et facilement utilisable
    - Des erreurs surviennent à la génération de l'application
    - Application de démonstration complète
      - Création de compte, authentification, réinitialisation du mot de passe
      - Gestion des utilisateurs depuis l'interface admin
      - Quelques bugs comme la modification des paramètres de l'appli qui échoue
  - MEAN.JS
    - L'architecture a été remaniée par rapport à MEAN.IO
      - Sépare la partie serveur de la partie cliente
      - Utilise des modules pour cloisonner les fonctionnalités
      - Plus lisible à mon sens
    - Application de démonstration
      - Création de compte, authentification, réinitialisation du mot de passe
      - Pas d'interface d'admin mais [[https://github.com/meanjs/mean/pull/559][PR en cours]]
      - Pas de bugs remarqués
  - Application
    - J'ai choisi comme socle MEAN.JS
    - Suppression du contenu relatif aux comptes externes
      - S'authentifier par le biais d'un service comme Google, FB
      - Attacher des comptes externes à son compte
    - Suppression du contenu relatif aux articles
      - L'application de démonstration permet de publier, éditer, supprimer des articles
      - Pas pertinant dans notre cas
    - Ajout de oAuth2orize
      - Création des modèles nécessaires à son fonctionnement
	- AccessToken
	- AuthorizationCode
	- Client
      - Ajout des controllers correspondant
      - Ajout du controller oAuth2 réimplémentant [[https://github.com/jaredhanson/oauth2orize/blob/master/examples/express2/oauth2.js][cet exemple]]
*** Planned
**** DONE Amélioration de l'option "traçage de l'utilisateur"
- Répondre "Let me decide later" devrait empêcher la pop-up d'apparaître pendant une certaine durée
**** DONE Fermer les threads d'exécution à la fermeture de l'onglet
- Actuellement, si un élève démarre une boucle infinie puis ferme son onglet, le programme continue de s'exécuter
- Il faudrait donc stopper les threads d'exécution à la destruction de l'acteur
**** DONE Mettre à jour la traduction
- De nouvelles pages/fonctionnalités ont été implémentées
  - Formulaire d'inscription
  - Formulaire de connexion
  - Page de profil
  - Toasters
- Il serait temps de refaire une passe de traduction
** Semaine du <2015-06-08 lun.> au <2015-06-12 ven.>
*** Done
- Mise en place d'un service d'authentification
  - Ajout de oAuth2orize
    - L'URL de redirection passée en paramètre lorsque l'utilisateur accède à la page de login n'est pas conservée par l'application
      - On ne peut donc pas vérifier s'il s'agit de la même URL que celle renseignée lors de la configuration du client
      - Il s'agit d'une faille de sécurité
      - Ajout d'une méthode intermédiaire retrouvant l'URL de redirection et qui la place à l'endroit où la librairie s'attend à la trouver
    - Redirection vers /dialog/authorize après login
      - Lorsque l'utilisateur accède à /dialog/authorize, on le redirige vers /signin s'il n'est pas authentifié
      - Après son authentification, il faut cependant le rediriger de nouveau vers /dialog/authorize
      - Modification de la réponse à la requête de login pour spécifier l'url de redirection
    - Décision de l'utilisateur
      - Ajout du formulaire demandant à l'utilisateur de s'il accepte que le client accède à son compte
      - Génération d'un code d'accès s'il accepte
      - Redirection vers l'URL indiquée en paramètre
    - Négociation du token d'accès à l'API
      - Vérification que le code fourni est valide et prévu pour ce client
      - Suppression du code et génération d'un token d'accès
      - Transmission de ce  token au client
    - Mise en place de l'API
      - Récupération de l'utilisateur lié à ce token
      - Transmission des données de l'utilisateur au client
  - Intégration dans PLM
    - Configuration de Satellizer (côté client) et Silhouette (côté serveur) pour supporter ce nouveau provider
    - Ajout d'un provider Custom dans Silhouette
    - Ajout du bouton correspondant dans la page de login
- Améliorer le service d'authentification
  - Refactoration du code
    - Utilisation des stratégies *BasicStrategy* & *ClientPasswordStrategy* pour gérer l'ensemble des négociations jusqu'à l'obtention du token
  - Amélioration de la sécurité
    - Vérification à chaque échange que l'ensemble des données est correct:
      - ClientID
      - ClientSecret
      - RedirectURI
  - Fix bug ne tenant pas compte du refus de l'utilisateur que PLM accède à son compte
  - Limiter le nombre de token
    - Conserve maintenant qu'un token par couple (userID, clientID)
  - Gestion de la mise en prod
    - [[https://github.com/Unitech/pm2][pm2]] est un utilitaire qui risque de se révéler utile
      - Permet de lancer plusieurs instances de l'application
      - S'occupe du load-balancing
      - S'occupe de redémarrer une instance qui a crashé
      - Met à disposition des outils de monitoring
- Mettre en place un service de profil
  - Socle MEAN.JS
  - Ajout du modèle et du controlleur correspondant aux profils
  - Ajout des méthodes CRUD
    - Create
    - Read
    - Update
    - Delete
  - Suppression du contenu relatif aux articles
  - Intégration dans PLM
    - Ajout d'un objet dialoguant avec l'API REST pour gérer les profils
      - La méthode *find* déclenche une requête GET pour un profil donné
      - La méthode *save* déclenche une requête POST
      - La méthode *update* déclenche une requête PUT pour un profil donné
    - Modification du workflow de UserService
      - Distinction entre les méthodes *save* et *update*
      - Démarre en vérifiant si l'utilisateur existe déjà via la méthode *find*
      - Si pas d'utilisateur trouvé, sauvegarde ce nouvel utilisateur avec la méthode *save*
      - Lorsque les préférences de l'utilisateur sont modifiées, utilise la méthode *update* pour transmettre les mises à jour au service
    - Ajout d'une classe permettant de convertir une instance *User* en JSON et inversement
*** Planned
**** DONE Mettre en place un  service d'authentification
- Permet de séparer la gestion des comptes de webPLM
- Permet de partager un compte entre le serveur centralisé et les serveurs locaux
- Doit déployer un serveur OAuth
- Doit ajouter le service en tant que provider dans webPLM
**** DONE Améliorer le service d'authentification
- Refactorer/Nettoyer le code
- Sauvegarder la décision de l'utilisateur concernant l'accès à son compte
  - Ne pas redemander l'autorisation à chaque fois
- Amélioration de la sécurité
  - Vérifier que le token utilisé pour accéder à l'API est bien lié à ce client
- Que deviennent les  tokens stockées dans la base de données?
  - Leur attribuer une date de création
  - A partir d'un certain temps, refuser de les valider et les supprimer
** Semaine du <2015-06-15 lun.> au <2015-06-19 ven.>
*** Done
- Mettre en place un service de profil
  - Intégration dans PLM
    - Correction du modèle de profil dans le service pour correspondre à celui de webPLM
    - Suppression de la gestion des mots de passes dans PLM
    - Suppression de MongoDB dans PLM
    - Suppression de la page d'inscription et de login avec des credentials
- Permettre aux utilisateurs de changer leur mot de passe
  - Tâche annulée car déjà pris en charge par l'application par défaut de MEAN.js
- Ajouter la fonctionnalité "j'ai oublié mon mot de passe"
  - Tâche annulée car déjà pris en charge par l'application par défaut de MEAN.js
- Ajouter l'évènement IDLE à la branche master de PLM
  - Tâche annulée pour se concentrer plutôt sur la nouvelle version Web, pouvant fonctionner en local ou en centralisé
- Améliorer le service d'authentification
  - Empêcher l'utilisateur d'accèder à la page de demande d'autorisation d'accès au compte sans être connecté
    - Redirige correctement l'utilisateur s'il accède à la page de demande d'autorisation d'accès au compte sans être connecté
    - Une fois qu'il s'est authentifié avec succès, il est correctement redirigé sur la page de demande d'autorisation
  - Stocker que l'utilisateur a déjà accepté d'autoriser l'accès à son compte pour un client et ne plus lui redemander son avis
    - Lorsque l'utilisateur accède à la page de demande d'autorisation d'accès à son compte, on vérifie si un token existe partageant
      - Le même userID
      - Le même clientID
    - Si oui, on stocke un nouveau code d'accès que l'on communique à l'utilisateur
    - Si l'utilisateur reçoit un code d'accès lorsqu'il arrive sur la page de demande d'accès, alors il est automatiquement redirigé vers webPLM en fournissant le code
    - Le workflow passe alors directement à la négociation du token entre le client et le service à l'aide du code
  - Permettre à l'utilisateur de s'inscrire et d'être ensuite redirigé vers la page d'autorisation d'accès au compte
    - Si l'utilisateur accède à la fenêtre de dialogue sans être authentifié, il est redirigé sur la page de connexion
    - S'il ne possède pas de compte, il peut demander à s'inscrire
    - A la validation de son inscription, il est alors redirigé sur la fenêtre de dialogue
- Merger les PR de Théodore
  - PR correction des bugs présents dans BaseBallWorld
  - PR ajout du monde de Hanoi
  - PR ajout de la vue temporelle pour DutchFlagWorld
- Merger les PR de Baptiste
  - PR ajout de Blockly
  - Correction de bugs présents
    - Appelle les méthodes sur Blockly uniquement si Blockly est utilisé dans l'exercice courant
    - Dans /setIDE/, vérifie que l'éditeur est bien chargé avant d'appeler ses méthodes
  - Correction des tests unitaires
    - Les tests unitaires JS ne passent plus
    - Lorsqu'on les lance, une erreur est détectée par PhantomJS qui fait échouer les tests
    - Aucune information n'est disponible sur l'erreur
    - Si on force l'exécution des tests malgré cette erreur, ceux-ci réussissent.
    - Il s'agissait en fait d'une erreur syntaxique présente dans le fichier /blockymsg.service.js/
    - Les attributs *BRUSH_DOWN_TITLE* et *BRUSH_DOWN_TOOLTIP* étaient définis deux fois à la suite pour servir de titre et tooltip pour deux blocs différents (brushDown() et isBrushDown())
    - Renommage d'un couple *BRUSH_DOWN_######* vers *IS_BRUSH_DOWN_######*
    - Modification du bloc /brush_position/ pour qu'il utilise plutôt *IS_BRUSH_DOWN_######*
- Documenter le service d'authentification
  - Passage à la licence AGPL
  - Modification du nom et de la description de l'appli dans /package.json/
  - Rédaction du README
  - Changement du nom de BDD utilisée, maintenant c'est plmaccounts
- Retravailler l'UI
  - Utilisation de Flexbox
    - Permet de générer un conteneur d'une taille prédéfinie
    - Les items de ce conteneur sont redimensionnés pour s'adapter au conteneur
  - Création d'une 1ère flexbox
    - Contient
      - La vue du monde + la consigne
      - L'éditeur de code
      - L'API
    - Chaque item peut être caché/affiché pour n'afficher que ceux dont on a besoin
  - Création d'une 2nd flexbox
    - Contient
      - La console de résultats
      - Le panel permettant de lancer son programme sur les différents mondes
*** Questions
- Comment gérer la fusion des repos PLM et WebPLM
  - Mise en place d'un système de dépendance?
    - Dépendance Maven?
    - Sous-projet Git?
  - Mise en commun de l'ensemble des fichiers dans un repo?
  - Après discussion avec Gérald
    - Garder les repos distincts
      - On a besoin de conserver un JAR de PLM pour le futur service de compilation et d'exécution
    - Mettre donc en place un versionning des JARs de PLM et de WebPLM
      - Il va falloir mettre en place un repo Maven pour héberger ces JARs
    - Intégrer la dépendance vers le JAR de PLM dans WebPLM
*** Planned
**** DONE Mettre en place un service de profil
- Permet de séparer la gestion des profils de webPLM
- Permet de partager un profil entre le serveur centralisé et les serveurs locaux
- Doit déployer un serveur exposant les profils par le biais d'une API REST
**** DONE Merger les PR de Théodore
- WebPLM
  - PR correction des bugs présents dans BaseBallWorld
  - PR ajout du monde de Hanoi
  - PR ajout de la vue temporelle pour DutchFlagWorld
- PLM
  - PR ajout du monde de Hanoi
**** DONE Merger les PR de Baptiste
- WebPLM
  - PR ajout de Blockly
- PLM
  - PR ajout de Blockly
**** DONE Documenter le service d'authentification
- Rédiger README
- Revoir LICENSE
**** CANCELLED Permettre aux utilisateurs de changer leur mot de passe
**** CANCELLED Ajouter la fonctionnalité "j'ai oublié mon mot de passe"
- Voir [[https://www.owasp.org/index.php/Forgot_Password_Cheat_Sheet][cette page]]
**** CANCELLED Ajouter l'évènement IDLE à la branche master de PLM
** Semaine du <2015-06-22 lun.> au <2015-06-26 ven.>
*** Done
- Retravailler l'UI
  - Suppression de la sous-barre pour gagner de la place en hauteur
  - Ajout de [[http://foundation.zurb.com/docs/components/offcanvas.html][offcanvas]] pour ajouter des menus déroulants sur le côté
  - Finalement, ne garde que le menu sur la gauche qui permet
    - d'accéder à son profil
    - de choisir sa langue et son langage de programmation
    - de naviguer sur le site
      - page d'accueil/choix d'une leçon
      - choix d'un exercice si actuellement dans une leçon
      - page de rapport de bug
      - formulaire de contact
  - Implémentation d'une nouvelle directive permettant de choisir sa langue depuis le menu déroulant
  - Implémentation d'une nouvelle directive permettant de choisir son exercice depuis le menu déroulant
  - Implémentation d'une nouvelle directive permettant de choisir son langage de programmation depuis le menu déroulant
  - Implémentation d'un service progLangs
    - Tiens la liste des langages de programmation disponible à jour en fonction de l'exercice actuel
    - Permet de changer de langage de programmation
  - Implémentation d'un service navigation
    - Fournit les informations nécessaires à la directive gérant le menu
    - Connaît la page actuelle
    - Connaît la leçon actuelle et l'exercice actuel
  - Implémentation des nouveaux contrôles pour lancer le code
    - Chaque monde possède son propre bouton de test
    - Cliquer sur le nom du monde permet de switcher sur sa vue
    - Cliquer sur le bouton "Play" permet d'exécuter son code
    - Reste un bug lorsqu'on passe d'un monde à l'autre
      - Le player ne s'initialise pas correctement, empêchant de parcourir les opérations déjà enregistrées pour ce monde
*** Planned
**** DONE Retravailler l'UI
- Page d'exercice
  - Faire en sorte qu'elle tienne sur un écran, qu'il n'y ait pas besoin de scroller
  - Rassembler vue du monde et mission
  - Déplacer la console en-dessous
  - Distinguer l'exécution sur les différents mondes et placer ce composant sous l'éditeur de code
** Semaine du <2015-06-29 lun.> au <2015-07-03 ven.>
*** Done
- Retravailler l'UI
  - Corriger bug changement de monde
    - Modification de setCurrentWorld pour spécifier l'ID du monde et le type (*current* ou *answer*)
    - Refactoring du reste du code pour prendre en compte ce changement
  - Nettoyer le code
    - Revoir le code de /navigation.service.js/
      - Suppression de l'attribut *currentRootLectureID* qui n'était pas utilisé
      - Remplacement de l'ID de la leçon et de l'ID de l'exercice par un booléen indiquant si l'utilisateur est dans une leçon
    - Revoir le code de /exercise.controller.js/
      - Suppression du code lié au modal permettant de sélectionner un exercice (retiré dans la nouvelle UI)
    - Revoir le code de /exerciseslist.service.js/
      - Refactoring de *isInLesson* pour utiliser un booléen plutôt que de consulter l'état d'une chaîne de caractère
      - Suppression de *currentRootLectureID*
        - Utilise plutôt /isCurrentExerciseAChild/ pour détecter le père d'un exercice
    - Revoir le code de /exercise.html/
      - Utilisation de classes au lieu de l'attribut /style/ pour le code redondant
      - Ajout d'une directive /test-cases.directive/ pour générer le bloc contenant la liste des mondes et permettant de passer de l'un à l'autre
  - Ajout d'une limite sur la taille du canvas: 400px
  - Mise à jour des traductions
- Modifier l'UI en fonction des retours
  - Débugger le modal de succès
    - Mise à jour du code de la directive pour utiliser le service *exercisesList* au lieu du controller *exercise*
  - Revoir la page d'exercice
    - Panel autour des consignes supprimé
    - Texte par défaut dans le bloc /Execution results/ supprimé
    - Le bouton permettant d'afficher l'API ou de re-afficher les consignes change correctement de label
  - Limiter la taille de l'avatar
    - La taille de l'avatar est dorénavant de 50x50
    - Amélioration de la gestion du layout: utilisation d'une flexbox
  - Déplacer le choix de la langue et du langage de programmation
    - Suppression des directives utilisés dans le menu latéral
    - Création d'un mix entre top-bar et tab-bar
    - Création de nouvelles directives utilisant des dropdowns pour permettre la sélection
    - L'utilisation d'icônes pose encore quelques soucis
  - Duplication du profil
    - Ajout d'un composant permettant de se connecter, déconnecter, accéder à son profil dans la barre du haut
      - Création d'une nouvelle directive
      - Même chose que précédemment: l'utilisation d'icônes pose encore des problèmes
*** Planned
**** DONE Retravailler l'UI
- Corriger bug changement de monde
  - Lorsqu'on bascule d'un monde à l'autre, le player n'est pas correctement mis à jour
  - Ceci est dû au fait qu'on repasse automatiquement sur le monde *World* au lieu de rester sur *Objective*
- Nettoyer le code
  - Donner des meilleurs noms aux directives
  - Revoir le code de /navigation.service.js/
  - Revoir le code de /exerciseslist.service.js/
  - Revoir le code de /exercise.controller.js/
  - Utiliser des classes CSS plutôt que styliser les balises manuellement
- Limiter la taille de la représentation du monde
**** DONE Modifier l'UI en fonction des retours
- Revoir la page d'exercice
  - Retirer la classe /panel/ qui englobe les consignes
  - Retirer le texte par défaut dans le bloc /Execution results/
  - Mettre à jour le contenu du bouton qui sert à afficher/cacher l'API en fonction de l'état actuel
- Limiter la taille de l'avatar
- Débugger le modal de succès d'un exercice permettant de passer au suivant
**** DONE Déplacer le choix de la langue et du langage de programmation
- Placer ces éléments dans la barre de menu
** Semaine du <2015-07-06 lun.> au <2015-07-10 ven.>
*** Done
- Faire une image Docker du service d'authentification
  - Création d'un container pour MongoDB
    - Commande pour lancer ce container: docker run --name mongo -v /path/to/mongodb/data:/data/db -d mongo
  - Modification du Dockerfile pour correspondre à la configuration actuelle
    - Image de départ: node:latest
    - Modification de la variable d'environnement NODE_ENV pour spécifier qu'on est en production
  - Bug avec le fichier de config prévu pour le mode production
    - Le serveur ne répond pas
    - Modification du fichier /config/env/production.js
      - Reprend les éléments de /config/env/development.js
      - Se contente de modifier l'URL de la BDD Mongo
        - Forme l'URL via la variable d'environnement fournie par Docker
  - Commande pour lancer dans un container cette image tout en le liant au container mongo: docker run --name plm-accounts --link mongo:db_1 -p 3000:3000 -d plm-accounts-img
  - Mise en place d'un Docker-compose
    - Lancer l'application se fait avec *docker-compose up*
- Faire une image Docker du service de profil
  - Suppression de quelques fichiers inutiles
    - Provider OAuth
  - Même chose que pour le service d'authentification
- Faire un docker-compose de l'application
  - Pas possible de réutiliser directement les docker-compose du service d'authentification et de profil
    - Docker-compose tente de démarrer plusieurs fois les conteneurs en commun (mongo)
  - Ajout d'un docker-compose dans webPLM
    - Démarre Mongo
    - Démarre les services de comptes et de profiles et les lient au conteneur Mongo
    - Démarre le conteneur de webPLM et le lie aux conteneurs des services
    - Ajoute aussi les variables d'environnement nécessaires
  - Modification du code de webPLM
    - Génère les URLs en utilisant les variables d'environnement créées par les links entre conteneurs
- Définir les CLIENT_IDs et CLIENT_SECRETs pour le fonctionnement en mode local
  - On a décidé de rendre public ces données plutôt que de modifier l'ensemble de l'appli pour juste sécuriser le mode local
- Déployer la nouvelle application à l'aide du docker-compose
  - Plusieurs bugs détectés liés au code, voir entrée correspondante
  - Bug dû à l'espace de stockage disponible sur la machine
    - Mongo nécessite 3.4GB d'espace libre pour fonctionner
    - La machine fournie par TELECOM Nancy n'en dispose actuellement que de 3.3GB
    - Après la suppression de quelques dossiers inutiles, l'application a pu être lancé mais l'espace reste limité
*** Planned
**** DONE Faire une image Docker du service d'authentification
**** DONE Faire une image Docker du service de profil
**** DONE Faire un docker-compose de l'application
- Docker-compose permet de déployer, configurer et linker plusieurs conteneurs en une commande
- Ajouter un docker-compose pour l'ensemble de l'application
- Modifier les applications pour prendre en compte les variables d'environnement fournies par docker-compose
**** DONE Définir les CLIENT_IDs et CLIENT_SECRETs pour le fonctionnement en mode local
- Suite aux dernières modifications, on ne peut plus utiliser les providers OAuth2 pour se connecter si le serveur est en mode local
- Modifier la configuration de ces derniers pour s'adapter à ces changements
- Voir comment distribuer l'application en mode local sans révéler les CLIENT_IDs et CLIENT_SECRETs utilisés
**** DONE Déployer la nouvelle application à l'aide du docker-compose
** Semaine du <2015-07-15 mer.> au <2015-07-17 ven.>
*** Done
- Corriger les bugs détectés lors du déploiement
  - PLMAccounts & PLMProfiles
    - Installation de l'ensemble des dépendances en attendant de faire le tri plus précisement
    - Ajout du paquet *bzip2* dans les images Docker
  - PLMAccounts
    - Ajout du module *passport-http-bearer* à l'application
    - Modification de la méthode /clientByID/ pour utiliser le bon champ lors de la recherche
- Distinguer clientID et clientName
  - Ajout du champ clientName dans le modèle de Client
  - Modification de l'UI pour afficher le clientName au lieu du clientID
- Corriger bug d'authentification sur le serveur
  - Le bug n'est présent que sur le serveur, il n'apparaît pas en local
  - L'authentification échoue lorsque webPLM tente de contacter PLMProfiles
  - Il s'avère que j'avais mal compris l'image plm-profiles
  - Il s'agissait d'une image plm-accounts sous le nom plm-profiles
  - Reconstruire l'image plm-profiles a permis de corriger le souci
- Corriger bug de mise à jour de trackUser
  - trackUser est ignoré lors de la conversion d'un objet User en JSON
    - Ajout de ce champ dans les méthodes de lecture/écriture de/vers le JSON
  - Ce champ n'existe pas dans le modèle d'un profil dans PLMProfiles
    - Ajout du champ correspondant
- Corriger bug d'authentification via PLMAccounts
  - PLMAccounts n'arrivait pas à rediriger l'utilisateur vers PLM après l'authentification et l'autorisation d'accès au compte
    - Je m'étais trompé en remplissant la base de données, en donnant des champs *redirectURL* aux clients au lieu de *redirectURI*
  - Maintenant, PLMAccounts n'autorise plus le client
    - Bug lors de la phase d'autorisation: /client.redirectURI !== redirectURI/
    - Il s'avère que *redirectURI* (passé en paramètre de la requête) est *undefined*, ce qui fait échouer l'autorisation du client
    - Correction de l'appel à la méthode d'autorisation, ajout de l'argument *redirectURI*
  - Lorsque l'utilisateur accède à PLM via PLMAccounts, on lui demande d'autoriser PLM à accéder aux données de son compte
  - Un bug oblige l'utilisateur à re-valider son choix à chaque connexion
    - Dû à un bug empêchant de retrouver un token d'accès déjà existant pour cet utilisateur et ce client, le *clientID* étant manquant
    - Lorsqu'on enregistre le token dans la base de données, on n'arrive pas à accéder au *clientID* de l'objet client que l'on vient de récupérer dans la base de données
    - Dû à une faute de frappe dans le schéma Mongo de l'objet client: j'avais saisi *clientId* au lieu de *clientID*
- Corriger bug Welcome / LoopWhile
  - L'entité Blockly de cette exercice n'était pas une copie de celle Python mais de C
  - Correction de l'entité Blockly
*** Planned
**** DONE Corriger les bugs détectés lors du déploiement
- PLMAccounts & PLMProfiles
  - Certaines dépendances notées comme uniquement nécessaire au développement sont en fait nécessaire au déploiement (*Grunt*)
  - Il manque dans l'image Docker le paquet permettant de dézipper du .bz2
- PLMAccounts
  - Il manque la dépendance vers *passport-http-bearer* dans le package.json
  - La méthode /clientById/ recherche un client par son *_id* dans la base de données au lieu de son *clientID*
**** DONE Distinguer clientID et clientName
- Actuellement, les deux sont confondus
- Le nom d'application affiché lors de la demande d'autorisation d'accès au compte est donc le *clientID*
- Corriger ça pour qu'on puisse afficher "PLM" et non "I8mYYmI9NRC5guz8aoXe"
**** DONE Obtenir de l'espace de stockage supplémentaire pour la machine de TELECOM Nancy
**** DONE Corriger bug d'authentification sur le serveur
- L'authentification via un provider échoue dans la version déployée sur le serveur
**** DONE Corriger bug de mise à jour de trackUser
- Par défaut, cet attribut n'est pas renseigné et les traces utilisateurs ne sont pas poussées sur GitHub
- On peut changer cette valeur depuis la page de profil, mais la modification n'est pas prise en compte
**** DONE Corriger bug d'authentification via PLMAccounts
**** DONE Agrandir l'éditeur de code
**** DONE Mettre à jour le nom de l'utilisateur dans le menu lorsqu'il le modifie
**** DONE Corriger bug Welcome / LoopWhile
- En blockly, le programme ne peut pas s'exécuter ni la démo
** Semaine du <2015-07-20 lun.> au <2015-07-24 ven.>
*** Done
- Tester le serveur local à TELECOM Nancy
  - Génération d'un zip via /activator dist/
  - J'ai pu tester que sous Windows, les machines Linux étant indisponibles
    - Lorsqu'on démarre le serveur via le script .bat, un fichier RUNNING_PID est créé
    - Si on ferme la console du serveur, le serveur est stoppé
    - Mais il ne peut pas être relancé tant qu'on ne supprime pas le fichier RUNNING_PID
  - Les images des leçons ne sont pas chargées, vérifier qu'elles sont dans l'archive
  - Il manque les *CLIENT_SECRET* de Google & GitHub
- Se connecter à webPLM depuis le réseau de l'école
  - Une erreur survient lorsqu'on essaie de se connecter à http://plm.telecomnancy.univ-lorraine.fr
  - En effet, un proxy sur le port 80 intercepte et modifie (si j'ai bien compris) la requête de création de la websocket
  - La requête ayant été modifiée, cela fait échouer la création de la websocket
  - L'ensemble de l'application ne fonctionne donc pas, puisque le protocole de communication entre le client et le serveur repose sur cette websocket
- Mettre en place le support de HTTPS
  - L'option au lancement *-Dhttps.port=9443* permet d'activer le support de HTTPS, tout en générant automatiquement un certificat auto-signé si besoin
  - Mais comme il s'agit d'une option de lancement, je ne vois pas comment l'utiliser en mode serveur local
  - Modification de la CMD du Dockerfile pour ajouter cette option
  - Ajout de EXPOSE 9443 dans le Dockerfile
  - Modification du docker-compose pour mapper le port 443 de la machine sur le port 9443 du docker webPLM
  - Modification de /public/app/services/connexion.service.js/
    - Utilise le protocole *wss* pour se connecter si on est en HTTPS
    - Juste besoin de modifier le protocole utilisé, pas besoin de préciser le port utilisé
- Mettre en place un reverse-proxy
  - En s'inspirant largement de [[http://anandmanisankar.com/posts/docker-container-nginx-node-redis-example/][cet article]], j'ai créé [[https://github.com/BuggleInc/PLM-nginx/][un nouveau repo]].
  - On se contente d'écouter sur le port 80 et de rediriger les requêtes entrantes vers l'*HTTPS*
  - Modification du docker-compose pour lier *Nginx* au port 80 et non plus webPLM
- Corriger les problèmes &  bugs détectés lors du test en mode local
  - Réduire l'espace entre la barre du haut et le contenu de la page
    - Suppression de margin-top et bottom du menu
    - Suppression d'un <br> qui trainait
  - Ajout des *client secrets* à conf/application.conf
- Débugger le système d'authentification
  - Modification de l'URL de redirection auprès de Google, GitHub et PLMAccounts
  - Modification de l'URL de redirection renseignée dans la configuration de Silhouette
- Ajouter un bouton Accueil dans le menu du haut
- Débugger l'API
  - Le spy *ProgLangListener* n'envoye pas l'API lorsque le langage de programmation est modifié
  - Ajout de méthodes pour récupérer l'API dans *PLM*
  - Modification de *ProgLangListener* pour envoyer la nouvelle API lors d'un changement de langage de programmation
  - Modification de *exerciseController* pour aussi mettre à jour l'API lorsque le *ProgLangListener* envoie un message
- Débugger le dimensionnement du monde
  - Ajout d'une méthode permettant d'afficher/de cacher l'API
  - Redimensionne le canvas ensuite le canvas si la vue du monde est affichée
  - Refactoring du code, utilisation d'une directive
- Implémenter  un formulaire permettant de signaler un bug
  - Partie cliente
    - Ajout d'un service *BugReport*, exposant plusieurs variables *title*, *body* & *error* ainsi qu'une méthode /submit/
    - /submit/ transmet au serveur *title* & *body* pour qu'il puisse créer l'issue sur GitHub
    - Ajout d'un formulaire permettant de modifier *title* & *body* et de déclencher /submit/
    - Ce formulaire observe aussi *error* pour savoir si l'issue a correctement été créée
    - Dans le cas contraire, affiche un message d'erreur selon la valeur de *error*
    - Ajout d'un toast remerciant l'utilisateur de son feedback et lui permettant d'accéder à la page de l'issue sur GitHub
  - Partie serveur
    - Reprise de ce [[https://github.com/BuggleInc/PLM/blob/master/src/plm/core/ui/FeedbackDialog.java#L128-L157][morceau de code]].
    - Ajout d'un handler pour le message /submitBugReport/
    - Vérifie que *title* & *body* sont présents dans le message reçu
    - Vérifie que *title* n'est pas vide
    - Upload l'issue sur GitHub et transmet l'URL au client
- Indiquer dans le commit de démarrage/fin de PLM si on est sur la version web
  - Ajout d'un ensemble de propriétés au constructeur de *Game*
  - Ces propriétés sont récupérées et ajoutées depuis webPLM
    - *webplm.version* indique la version de WebPLM
    - *webplm.user-agent* indique le header User-Agent de l'utilisateur
  - Ajout de ces propriétés dans le message de commit dans *GitSpy*
*** Planned
**** DONE Tester le serveur local à TELECOM Nancy
- Générer un .jar du serveur local standalone
- Faire des essais sur les différentes machines de l'école (Windows, Linux...)
- Vérifier le fonctionnement de Mongo
  - Une dépendance à installer par ailleurs?
  - Besoin de merger rapidement le refactoring de la gestion des comptes utilisateurs
**** DONE Mettre en place le support de HTTPS
- Permettrait de passer par le port 443 au lieu de 80, ce qui permettrait d'éviter le proxy
- Activer HTTPS dans Play
**** DONE Mettre en place un reverse-proxy
- Redirigerait toutes les requêtes reçues sur le port 80 sur le port 443
- Risque pas de retrouver ce problème de proxy empêchant l'utilisation de webPLM depuis le réseau de l'école?
- A moins de mettre explicitement la connexion sur la websocket sur le port 443
- Voir [[http://serverfault.com/questions/67316/in-nginx-how-can-i-rewrite-all-http-requests-to-https-while-maintaining-sub-dom][ce post]] sur comment faire
**** DONE Débugger le système d'authentification
- Le passage en HTTPS a cassé l'authentification via des services tiers, l'URL de redirection n'étant plus la même
  - On est passé de http://plm.telecomnancy.univ-lorraine.fr à https://plm.telecomnancy.univ-lorraine.fr
**** DONE Ajouter un bouton Accueil dans le menu du haut
**** DONE Débugger l'API
- Ne fonctionne plus dès qu'on change de langue
**** DONE Débugger le dimensionnement du monde
- La vue du monde est dimensionnée au démarrage de l'exercice en fonction de la taille de la <div> parente
- Si la vue du monde est cachée au démarrage de l'exercice, la représentation du monde est ensuite minuscule
**** DONE Ajouter la fonctionnalité permettant de signaler un bug
**** DONE Indiquer dans le commit de démarrage/fin de PLM si on est sur la version web
- Voir [[https://github.com/BuggleInc/webPLM/issues/33][cette issue]]
** Semaine du <2015-08-03 lun.> au <2015-08-07 ven.>
*** Done
- Débugger PLM-data
  - Même l'ancienne version de PLM ne peut plus pusher sur PLM-data
  - Pourtant, lors de la migration, on n'avait pas eu de problèmes
  - Modification des données de PLMBugz?
- Tester les PR de Pierric
  - Un bug s'était glissé dans ses modifications: oubli d'une virgule dans *PancakeOperationToJson*
  - Pas de bug détecté lors des tests utilisateurs
- Retirer les tests sur les langages de programmation au lancement de PLM
  - Suppression des méthodes /checkScala/, /checkPython/...
  - Affectation en dur de *canScala*, *canPython* & *canBlockly*
  - Je n'ai pas l'impression que cela a influé sur les performances au démarrage
- Retirer le langage C des langages de programmation disponible
- Rediriger l'utilisateur à l'accueil à la fin d'une leçon
  - Modification du service /exerciseslist/ pour renvoyer '' si il n'y a de prochain exercice
  - Modification de la directive /success-modal/ pour que le message change si on a atteint la fin d'une leçon
    - Ajout d'un message expliquant à l'élève qu'il a fini la leçon
    - Modification du bouton de redirection pour le rediriger vers la page d'accueil
- Rédiger la documentation expliquant comment traduire l'application
  - Ajout de la page [[https://github.com/BuggleInc/webPLM/wiki/Working-on-translations][Working on translations]] au wiki
- Rédiger la documentation expliquant comment ajouter Blockly
  - Ajout de la page [[https://github.com/BuggleInc/webPLM/wiki/Add-Blockly-to-an-exercise][Add Blockly to an exercise]] au wiki
- Débugger PLM-data
  - Problème même avec les anciennes versions de PLM (2.4, 2.5).
  - Semble venir du token d'authentification de PLMBugz qui n'a plus l'air d'être valide, à confirmer.
  - Le token était bien invalide dorénavant. On l'a remplacé par un nouveau.
  - Mais les anciennes version de PLM ne peuvent *PLUS* publier leurs données du coup.
  - Autre problème sur le serveur: le répertoire .plm du serveur n'est pas mis à jour lorsqu'un utilisateur travaille sur webPLM.
    - Le volume monté contenant le répertoire .plm n'était pas monté au bon endroit pour le docker
    - Modification de docker-compose pour que le répertoire .plm se trouve bien à /root/.plm/
    - Erreur dans le docker-compose, 2 parties *volumes:*
    - La 1ère (contenant le volume pour git) était effacée par la seconde
    - Fusion des 2 parties *volumes:*
- Corriger les problèmes & bugs détectés lors du test en mode local
  - Re-ajout du message indiquant à l'utilisateur que le monde n'est pas encore supporté
  - Re-ajout du slider permettant de modifier la vitesse d'animation
- Débugger Travis
  - Correction des tests unitaires de webPLM
    - Oubli d'une dépendance pour les tests unitaires de Jasmine
    - Modification de l'appel au constructeur de Game pour prendre en compte les derniers changements
  - Passage à la nouvelle infrastructure docker-isé de Travis
    - Ajout de /sudo: false/ dans les /.travis.yml/
    - Utilisation du système de cache pour ne pas télécharger les dépendances de *webPLM* à chaque build
*** Planned
**** DONE Tester les PR de Pierric
- Pierric a détecté et résolu un bug dans le monde des Pancakes
  - L'opération /flip/ ne possédait pas assez de données pour que le reverse soit correct
- Tester ses modifications pour s'assurer du bon fonctionnement de l'opération
**** DONE Retirer les tests sur les langages de programmation au lancement de PLM
- Lors de l'instanciation de Game, on vérifie si on peut programmer en Scala, en Python, en C & en Blockly
- Cela était nécessaire lorsque PLM était un client lourd, mais maintenant que l'exécution se déroule dans un docker, c'est inutile
**** DONE Retirer le langage C des langages de programmation disponible
- Celui-ci ne fonctionnant pas actuellement, il faudrait mieux le retirer en attendant
**** DONE Rediriger l'utilisateur à l'accueil à la fin d'une leçon
- Lorsqu'on réussit un exercice, l'application nous invite à passer à l'exercice suivant
- Si on réussit le dernier exercice d'une leçon, il faudrait plutôt rediriger l'utilisateur à l'accueil
- Voir pour mettre en place un message particulier dans ce cas
**** DONE Rédiger la documentation expliquant comment traduire l'application
- L'outil utilisé pour traduire webPLM n'est pas le même que PLM
- Il est donc nécessaire de rédiger un tutoriel pour les contributeurs
**** DONE Débugger PLM-data
- Les commits ne sont pas pushés sur PLM-data
- Corriger cela
**** DONE Débugger Travis
- Travis n'a plus l'air de réussir à build le projet et à exécuter les tests
- Voir ce qui pose problème
** Semaine du <2015-08-10 lun.> au <2015-08-14 ven.>
*** Done
- Ajouter un mécanisme de feedback pour le système d'indices d'Alex
  - Ajout d'une directive AngularJS <error-feedback> dans la réponse du serveur si on a détecté une erreur commune
  - Besoin d'interpréter cette directive
    - $sce ne suffit pas (se contente de prendre en compte l'HTML, mais n'interprète pas la directive)
    - Utilisation de $compile pour gérer correctement la directive reçue
  - Problème: on doit pas attacher un indice à un *Execution Results* puisque ré-exécuter le programme le ferait disparaître
  - Finalement, reworking de la gestion des indices
    - Ajout de *commonErrorText* et *commonErrorID* au message /executionResult/
    - Création d'un service pour gérer les erreurs communes rencontrées au cours d'un exercice pour chacun des mondes
    - Modification de la directive /execution-result/ pour afficher les *commonErrorText* reçus
  - Ajout d'un formulaire permettant de faire un feedback
    - Interagit avec le nouveau service *commonErrorsFeedback*
    - Permet de spécifier la /précision/ de la détection du problème, /l'aide/ apportée et de laisser un commentaire si besoin
  - Ajout d'un nouveau type d'evénèment Git: /commonErrorFeedback/
    - Contient /accuracy/, /help/, /comment/, /commonErrorID/, /exoID/
    - Ajoute aussi 2 fichiers:
      - le code générant le monde de la commonError concernée
      - le message d'erreur customisé affiché
    - Exemple ici: https://github.com/BuggleInc/PLM-data/commit/80d583f8dd40c0b5dc327d475526e5a88f82b2ec
- Amélioration de la disposition des /Test cases/
- Bufferiser le streaming d'opérations
  - Ajout d'un accumulateur d'opérations dans *ExecutionSpy*
  - N'envoie plus qu'une fois par seconde maximum
  - Lorsque *ExecutionResultListener* détecte la fin de l'exécution du programme, il en informe *PLMActor*
  - *PLMActor* demande alors aux *ExecutionSpy* d'envoyer les opérations encore présentes dans l'accumulateur
- Corriger bug websocket avec IE/Edge
  - Mise en place d'une détection du navigateur à la connexion
  - Si IE/Edge, mise en place d'un ping toutes les 15s
*** Planned
**** DONE Bufferiser le streaming d'opérations
- Permettrait d'éviter de surcharger le navigateur lors de certains exercices produisant un grand nombre d'opérations (les turmites?)
**** DONE Ajouter un mécanisme de feedback pour le système d'indices d'Alex
- Il faudrait demander à l'utilisateur si le message d'erreur obtenu est pertinent et l'a aidé à résoudre l'exercice
- Ajouter un formulaire de feedback
- Stocker les feedbacks reçus
- Exploiter les feedbacks?
**** DONE Corriger bug websocket avec IE/Edge
- Il semblerait que si la websocket n'est pas utilisée pendant un certain temps, elle est automatiquement fermée par IE/Edge
- Voir si comment résoudre ce problème
  - Envoyer un ping périodiquement?
  - Tenter de re-ouvrir la websocket?
** Semaine du <2015-08-17 lun.> au <2015-08-21 ven.>
*** Done
- Déployer la version avec les juges
  - WebPLM:
    - Création d'une branche prod-judge
    - Branche utilisant les juges mais avec la configuration du serveur de prod
  - PLM:
    - Création d'une branche webplm-split
      - Branche destinée à générer le jar pour webPLM prod-judge
    - Création d'une branche judge
      - Branche destinée à générer le jar pour PLM-judge
  - Version déployée mais vite tombée
    - Gravement tombée puisque le service SSH ne répond plus, empêchant de redémarrer l'application
- Amélioration des juges
  - Suppression d'un listener inutile
    - Apparition d'une NullPointerException dans /Game.worldHasChanged/
    - /selectedWorld == null/ (puisqu'on a jamais appelé /Game.getSelectedWorld/)
    - Utilisation de /getSelectedWorld/ au lieu de manipuler directement /selectedWorld/
    - *ConcurrentModificationException* levée dans /World.notifyEntityUpdateListeners/
    - Dû semblerait au fait de modifier la liste parcourue par l'itérateur en parallèle de l'exécution de l'itérateur
    - Mais bug n'apparaît que sur le 1er exo de chaque leçon
    - Bug disparaît si on n'appelle pas /Game.switchExercise/ si on souhaite accéder au 1er exo de la leçon
    - Le bug proviendrait de /Game.switchExercise/ qui remet à *null* /selectedWorld/
    - Du coup, le prochain appel à /Game.getSelectedWorld/ mettra à jour la liste des *entitiesUpdateListeners*
    - Manque de chance, le prochain appel provient de /Game.worldHasChanged/ (suite à la modification faite pour éviter la *NullPointerException*)
    - Correction de /Game.switchExercise/ pour que cette fonction appelle /Game.getSelectedWorld/ ensuite
  - Suppression des warnings présents dans le code
  - Bug: les opérations n'arrivent pas dans le bon ordre au client
    - Modification du buffer des opérations pour ne pas envoyer la 1ère séparément
    - Le problème semble résolu pour le moment
  - Suppression de la boucle infinie gardant les juges en vie
    - Les juges ne se stoppaient pas pour autant, certains threads étant toujours lancés
    - Ajout de /System.exit(0)/ à la fin du Main pour régler ce souci
  - Réduction de la durée de vie des juges et de leurs messages
    - L'exécution ne dure plus que 8 secondes
    - Les messages expirent au bout de 3 secondes
- Débugger System.out.println
  - Bug car j'ai retiré /listener.send/
  - Le listener sert en effet à envoyer les messages écrits sur la sortie standard
  - Re-ajout de /listener.send/
- Limiter la consommation en ressource des juges
  - Voir [[https://docs.docker.com/reference/run/#runtime-constraints-on-resources][cette page]]
  - *cpu-period* et *cpu-quota* ne semblent pas disponibles dans docker-compose
  - *cpuset* est utilisable par contre: permet de limiter le nombre de coeurs disponibles pour les juges
- Augmenter la RAM disponible pour webPLM
  - Modification du Dockerfile pour lancer l'application avec l'option: /-mem <insert-value-here> -J-server/
- Ajouter un SecurityManager sur les juges
  - Ajout du fichier ∕conf.txt/ dans PLM-judge
  - Modification de la commande du Dockerfile pour le prendre en compte
- Factoriser les connexions aux queues de messages dans webPLM
  - Factoriser la connexion marche correctement
  - Par contre, ouvrir les channels à la connexion de l'utilisateur et les garder ouvert durant toute la session semble poser problème
  - La queue de message génère le message d'erreur /{amqp_error,precondition_failed,"unknown delivery tag 1",'basic.nack'}/ lorsque le *Tribunal* ACK le 1er message
- Déployer la version avec le contrôle des ressources
  - On a testé cette version qui était hébergée sur ma machine
  - Le serveur n'a pas planté!
  - Mais il mettait du temps à répondre par moment
  - Certaines sessions ont été interrompues
  - Le goulot d'étranglement semble être webPLM maintenant
*** Planned
**** DONE Déployer la version avec les juges
- Merger PRs de Tanguy
- Générer une branche prod-judge pour webPLM
**** DONE Débugger System.out.println
- Dans les juges, System.out n'est pas correctement redirigé vers le client
**** DONE Augmenter la RAM disponible pour webPLM
- Si plusieurs boucles infinies sont exécutés au même moment, webPLM plante suite à un dépassement de la pile
- Voir pour dépasser la limite de RAM de la JVM par défaut
**** DONE Ajouter un SecurityManager sur les juges
- Empêcher de faire des requêtes HTTP (problème avec la queue de message?)
- Empêcher d'écrire des fichiers
**** DONE Factoriser les connexions aux queues de messages dans webPLM
- Actuellement, on créé une connexion à chaque queue de message par utilisateur
- Factoriser la connexion pour n'en utiliser qu'une, globale
- Seuls les channels sont des variables d'instance
- Fermer les channels à l'arrêt de PLMActor
**** DONE Limiter la consommation en ressource des juges
- Il faudrait que lancer une boucle infinie dans un juge n'impacte pas l'ensemble de l'application
- Limiter les ressources des juges:
  - RAM
  - Vitesse de calcul
**** DONE Déployer la version avec le contrôle des ressources
- Déployer la nouvelle version limitant la capacité 
** Semaine du <2015-08-24 lun.> au <2015-08-28 ven.>
*** Done
- Profiler l'application
  - RAM
    - Semble pas si catastrophique que supposé
    - On passe de 70Mo (idle) à 200Mo (leçon welcome de lancé)
    - Mais à chaque GC, on retombe à ~100Mo (avec toujours welcome de lancé)
    - Par contre, fuite mémoire sur les BuggleWorldCells, avec à peu près 0.15Mo par leçon welcome
- Utiliser une queue de message par exécution
  - Ajout du corrélation ID en tant que donnée de la requête
  - Le juge récupère le corrélation ID et créé un channel pour la queue de message avec ce nom
  - Le tribunal lit les messages arrivant sur cette queue
  - Modification du constructeur pour que la queue se détruise après l'exécution
- Générer le commit concernant l'exécution dans webPLM
  - Modification du juge pour se contenter d'envoyer les informations pertinentes à la fin de l'exécution du code
  - Modification du Tribunal
    - Refactoring de la génération du message de commit indiquant le résultat d'une exécution
    - Déclenche ce commit aussi lorsque l'exécution timeout avec pour outcome *timeout*
    - Déclenche ce commit aussi lorsque l'exécution est stoppé par l'utilisateur avec pour outcome *stop*
    - Le Tribunal est maintenant threadé pour correctement gérer l'interruption de l'exécution par l'utilisateur
- Corriger l'évènement IDLE
  - Pour écrire le message de commit, j'utilise /GitSpy.writeCommitMessage()/
  - Cette méthode ajoute les champs par défaut aux messages, plus certains champs additionnels
  - Ces champs dépendent de *lastResult*, qui est à *null* maintenant qu'on exécute le code de l'élève dans les juges
  - On essaie d'ajouter ces champs uniquement si *lastResult* est initialisé
- Préparer le déploiement sur plusieurs machines
  - Configuration de nginx
    - Ecoute sur le port 80 et redirige sur lui-même en HTTPS toute connexion entrante
    - Ecoute sur le port 443 et fait du load-balancing
      - Définition d'un groupe de serveurs à qui rediriger les requêtes
      - Les requêtes sont transmises à ce groupe en faisant du load-balancing au passage (Round-Robin pour le moment)
      - Vu qu'on manque de nom de domaine pour le moment, les instances de webPLM devraient plutôt écouter sur le port 9443 (pour laisser le port 443 à nginx)
  - Configuration de docker-compose pour la machine principale
    - Lance PLM-nginx (ports 80 et 443)
    - Lance PLMProfiles (ports 8080)
    - Lance RabbitMQ (port 5672)
    - Lance PLMAccounts (port 9000)
    - Lance webPLM (9443 puisque 443 est déjà pris)
  - Configuration de docker-compose pour les machines secondaires
    - Lance webPLM (9443 pour correspondre à la machine principale)
    - Passe en variables d'environnement les données pour contacter RabbitMQ
      - MESSAGEQ_PORT_5672_TCP_ADDR
      - MESSAGEQ_PORT_5672_TCP_PORT
  - Configuration de docker-compose pour les machines juges
    - Lance PLM-judge (pas besoin de port particulier)
    - Passe en variables d'environnement les données pour contacter RabbitMQ
      - MESSAGEQ_PORT_5672_TCP_ADDR
      - MESSAGEQ_PORT_5672_TCP_PORT
  - Création d'une image Docker hébergée sur DockerHub buggleinc/webplm
  - Création d'une image Docker hébergée sur DockerHub buggleinc/plm-judge
  - Mise en place du load-balancing
    - Voir [[https://github.com/BuggleInc/PLM-nginx/blob/load-balancing/nginx.conf][la nouvelle configuration de nginx]]
    - Voir [[https://www.digitalocean.com/community/tutorials/how-to-create-an-ssl-certificate-on-nginx-for-ubuntu-14-04][cette page]] pour générer les certificats ssl
  - Manque plus que les ports d'ouvert sur la machine de TN
- Résoudre bug concernant la taille du canvas
  - Ajout des variables *defaultHeight* et *defaultWidth*
  - Ces variables sont mises à jour à l'initialisation du service de dessin et au redimensionnement de la fenêtre
  - Avant que l'on dessine la vue, on remet la taille du canvas aux dimensions par défaut
- Adapter les consignes à la nouvelle interface
  - Les indices
    - Intègre des morceaux d'AngularJS dans les consignes pour afficher l'indice sous forme de modal
    - Besoin de revoir les traductions car elles ne sont plus reconnues
    - Ajout de méthodes côté client pour compiler les directives AngularJS présentes dans la consigne
    - Déclenche aussi un message à destination de webPLM pour que l'évènement /readTip/ soit déclenché
  - Consignes
    - Explication de l'interface dans l'exercice *Environment*
    - Adaptation des consignes jusqu'à *Variables* (compris)
*** Planned
**** DONE Utiliser une queue de message par exécution
- Utiliser le corrélation ID pour filtrer les messages reçues pour ne garder que ceux qui nous intéresse ne semble pas efficace
- Utiliser plutôt le corrélation ID pour spécifier dans quelle queue de message répondre, permettant ainsi de séparer les résultats par exécution
**** DONE Générer le commit concernant l'exécution dans webPLM
- Actuellement, le message de commit est généré dans le juge puis transmis à webPLM
- Mais si le juge plante, aucun commit n'est effectué
- Ajouter un commit stipulant que l'exécution a échoué
- Déplacer la génération du message de commit dans webPLM tant qu'à faire
**** DONE Corriger l'évènement IDLE
- Lors de l'enregistrement dans Git de l'évènement IDLE, une NullPointerException est levée
**** DONE Résoudre bug concernant la taille du canvas
- Il est possible, en passant d'un monde à l'autre, de réduire la taille du canvas jusqu'à ce que celui-ci ne soit plus lisible.
- Ceci est dû au recalcul de la taille du canvas à chaque changement de monde pour définir la taille à avoir pour respecter les proportions du monde.
- Voir pour résoudre ce problème
**** DONE Préparer le déploiement sur plusieurs machines
- Export des juges
  - Exposer la queue de message au monde extérieur
  - Créer une image BuggleInc/plm-judge hébergée sur DockerHub
  - Créer un docker-compose lançant plusieurs BuggleInc/plm-judge:latest
- Réplication de webPLM
  - Exposer le service de profil au monde extérieur
  - Créer une image BuggleInc/webPLM hébergée sur DockerHub
  - Modifier webPLM pour prendre le nom de domaine en tant que variable d'environnement (si besoin)
  - Modifier la configuration de nginx pour faire du load-balancing
  - Voir comment se comporte le load-balancing avec les websockets
** Semaine du <2015-08-31 lun.> au <2015-09-04 ven.>
*** Done
- Vérifier que les ports sont ouverts sur le serveur de TELECOM Nancy
  - Le port 5672 n'est toujours pas ouvert
  - Cyril ne revient que mardi matin
  - Les ports sont ouverts \o/
- Configurer les machines faisant tourner les juges pour pouvoir y accéder par SSH depuis l'extérieur
  - Liste des machines:
    - coast-dev1
    - coast-dev2
    - corosif
    - penny
  - Installation de *openssh-server*
  - Ajout de la clé publique pour s'authentifier sur chacune des machines via le bastion
- Tester l'application à l'école
  - Aucun problème de connexion décelé lors des tests sur le serveur centralisé
  - Le mode local lève une exception en se bindant au localhost mais fonctionne quand même
  - Le code entre le mode local et le mode centralisé n'est pas partagé
  - Les suggestions n'apparaissent plus en mode centralisé
  - J'y ai pas touché mais les images des leçons apparaissent correctement
- Partage de code entre mode local et décentralisé ne fonctionne plus
  - Scénario:
    - Un utilisateur démarre le serveur local, s'identifie, effectue une session de travail et ferme l'onglet.
    - Ensuite, il se connecte sur le serveur centralisé et s'identifie.
    - Son code n'est pas récupéré.
  - Après tests, semblerait qu'il suffise de recharger la page une fois pour que le serveur mette à jour correctement son repo local et récupère la session de l'utilisateur.
  - Lors du login, on ne doit pas essayer de récupérer sa session
    - A vérifier
- Ajout d'icônes à l'interface pour la rendre plus claire
- Suggestions ne sont plus supportées
  - J'avais effectivement oublié les champs /commonErrorID/ et /commonErrorText/ du message de résultat généré par le juge au cours du refactoring
  - Re-ajout de ces champs au message résultat
  - Re-ajout de ces champs lors du transfert de webPLM au client
- Corriger les System.out.println
  - Les /System.out.println/ sont ajoutés en tant qu'opérations au buffer du *BasicListener* original
  - Celui-ci n'envoie son buffer qu'à la fin de l'exécution, puisqu'il espionne le monde initial qui ne bouge pas
  - Maintenant les /System.out.println/ sont ajoutés au buffer du *BasicListener* du 1er monde, ce qui devrait couvrir la majorité des cas
- Retirer Java du build de PLM
  - Vu qu'on contrôle les juges maintenant, on peut se permettre de retirer Java du build de PLM
  - Ca permet d'éviter les messages d'erreurs provenant de la version du compilateur Java
  - Suppression de la ligne dans le fichier de build ajoutant /tools.jar/ à l'archive
- Ajouter Facebook en tant que provider
  - Création d'une app Facebook pour le mode local
  - Création d'une app Facebook pour le mode centralisé
- Corriger les bugs liés aux traces utilisateurs
  - Ajout de la virgule manquante
  - Modification de la valeur de *exoID*: /lastExo/ -> /lastExo.getId()/
    - Ceci semble corriger le bug
  - Les fichiers semblent ne pas être créés au bon endroit
    - Lors qu'un utilisateur se connecte, un repo lui est attribué
    - Lorsqu'il s'authentifie, on lui re-attribue son repo d'origine
    - Mais les fichiers ont l'air d'être encore créés dans le 1er repo qui lui avait été affecté
    - Modification du code pour récupérer le bon repo au moment de créer les fichiers
- Conserver le langage de programmation sélectionné
  - Ajout de *lastProgLang* dans les données communiquées au service de profil
  - Ce champ est utilisé pour initialiser PLM lorsqu'on se reconnecte
- Partage de code entre mode local et décentralisé ne fonctionne plus
  - Ce bug correspondait au fait que les fichiers de code manquaient des traces utilisateurs
  - Il a donc été résolu en même temps que les traces ont été corrigées
- Améliorer l'éditeur de code
  - Ajout de l'addon pour CodeMirror *matchbrackets* qui permet d'ajouter du style aux parenthèses et accolades si elles sont bien fermées ou au contraire
  - L'indentation automatique est déjà disponible avec /shift+tab/ en sélectionnant le texte
  - Ajout de l'addon pour CodeMirror *active-line* pour faire ressortir la ligne actuellement selectionnée
  - Ajout de l'addon pour CodeMirror *foldgutter* pour permettre de replier les blocs de code
- Trier la liste des leçons
  - Plutôt que de récupérer uniquement les leçons dans webPLM, on récupère la Map nom -> leçon
  - Utilise /Game.lessonsName/ pour former dans l'ordre la liste des leçons envoyée aux élèves
*** Planned
**** DONE Configurer les machines faisant tourner les juges pour pouvoir y accéder par SSH depuis l'extérieur
**** DONE Tester l'application à l'école
- Vérifier que le proxy de l'école ne fasse plus des siennes
- Vérifier que le mode serveur local fonctionne correctement dans les salles linux
**** DONE Suggestions ne sont plus supportées
- Il semblerait que les suggestions ne soient plus transmises à l'utilisateur
- Voir si c'est pas en retravaillant le message de résultat du judge que j'ai cassé ça
**** DONE Corriger les System.out.println
- Les /System.out.println/ ne sont pas streamés au fur et à mesure de l'exécution
- Ils sont envoyés qu'à la fin de l'exécution
- Si le judge timeout, alors aucun /System.out.println/ n'est reçu
- Corriger ça
**** DONE Vérifier que les ports sont ouverts sur le serveur de TELECOM Nancy
- Besoin surtout que le port 5672 soit ouvert pour déployer les juges sur d'autres machines
**** DONE Corriger les bugs liés aux traces utilisateurs
- [X] Une virgule est manquante dans les messages de type *executed*, faisant échouer le parsing du JSON
- [X] Des quotes sont manquantes autour du *exoID* dans les messages de type *commonErrorFeedback*, faisant échouer le parsing du JSON
- [X] Les fichiers contenant le code, l'erreur de l'élève, la mission et la correction ne sont pas ajoutés au repo Git
**** DONE Conserver le langage de programmation sélectionné
- Quand l'utilisateur se reconnecte, il ne repasse dans son langage de programmation de prédilection
- A la place, c'est Java qui est automatiquement sélectionné
**** DONE Partage de code entre mode local et décentralisé ne fonctionne plus
- Le code est bien pushé sur GitHub
- Mais le pull & merge ne se fait pas lors de la connexion de l'utilisateur
- Vérifier ça
**** DONE Améliorer l'éditeur de code
- L'éditeur n'affiche pas si les parenthèses et accolades qui correspondent à celle que l'on a selectionné
- Une méthode d'indentation automatique serait aussi utile
**** DONE Trier la liste des leçons
- L'ordre des leçons est actuellement incorrect, ce qui peut dérouter les utilisateurs
- Voir pour trier la liste pour respecter l'ordre souhaité
** Semaine du <2015-09-07 lun.> au <2015-09-11 ven.>
*** Done
- Revoir la gestion des channels
  - Re-écriture du Tribunal pour mettre les channels en tant que variables d'instances.
  - Bug: les réponses du juge ne sont pas tous traités
  - Bug dû au fait qu'on démarre un *consumer* par exécution, qui ne sont pas fermés et qui continue de *manger* les messages les exécutions suivantes
  - Passage du *consumer* en variable d'instance.
- Ajouter les messages de ACK
  - Met l'attribut *autoAck* à true lors de l'initialisation du *consumer* pour que les messages soient ACK dès leur réception par un juge ou par le tribunal 
- Corriger le formulaire de report de bug
  - Le token d'authentification de GitHub n'avait pas été mis à jour lors de son récent changement
- Corriger bug des messages s'empilant dans la queue de réponse
  - /purgeQueue/ est proposée par *RabbitMQ* mais
    - Quid des performances?
    - Cela ne supprime que les messages déjà ACK ou n'en attendant pas, ce dont je suis pas sûr que ça soit notre cas
  - Mise en place d'un état /Purging/
    - Stopper l'exécution fait passer dans cet état
    - On continue de consommer les messages jusqu'à rencontré un *timeout*
    - On ne traite par contre pas les messages consommés
- Créer une image RabbitMQ avec les modules de monitoring
  - En fait, ça existe déjà
  - Nom de l'image: *rabbitmq:3-management*
  - Modification du /docker-compose.yml/ en conséquence
- Purger la queue de réponse
  - Modification du code pour, en cas de stop, se contenter de consommer les messages sans les traiter
    - Mais un run/stop/run rapide relance en parallèle le traitement des messages, ce qui produit des comportements chaotiques
  - Même problème rencontré si on se contente de purger la queue avant de lancer l'exécution
    - Les messages de la 1ère exécution ne sont pas encore tous arrivés lors de la purge
  - Repassage à l'architecture d'une queue par exécution
- Afficher les indications
  - Bug dû au fait qu'on utilise pas /writeMessage/ mais /setIndication/
  - Les opérations ne sont donc pas générées
  - Ajout d'une méthode permettant de générer les opérations correspondant à l'écriture d'un message dans *AbstractBuggle*
  - Appel de cette méthode dans /setIndication/
  - Mise à jour de webPLM-Local, webPLM-Prod et de PLM-judge
*** Planned
**** DONE Revoir la gestion des channels
- D'après ce [[https://dzone.com/articles/rabbitmq-amqp-channel-best][post]], il faudrait maintenir les channels plutôt que de les créer/détruire à chaque exécution.
- Retravailler le Tribunal
**** DONE Ajouter les messages de ACK
- D'après ce [[https://www.rabbitmq.com/tutorials/tutorial-two-java.html][tuto]], les messages sont passés de juge en juge jusqu'à qu'un juge déclenche un /basicAck/ ou que le message atteigne sa durée de vie
- Actuellement, aucun /basicAck/ n'est déclenché
**** DONE Corriger bug des messages s'empilant dans la queue de réponse
- Lorsqu'un utilisateur appuie sur *Stop*, on se contente d'arrêter d'écouter les messages arrivant sur la queue de réponse
- Auparavant, cela ne posait pas de problème puisqu'on générer une nouvelle queue par exécution
- Maintenant que les queues de messages ont pour durée de vie la session de l'utilisateur, un problème est apparu
- Après un *stop*, les prochaines exécutions vont consommer les messages présents dans la queue jusqu'au 1er /executionResult/ rencontré
- Pour l'utilisateur, ceci a pour effet de décaler ses exécutions et les résultats obtenus de 1 par *stop*
**** DONE Créer une image RabbitMQ avec les modules de monitoring
- Des plugins sont disponibles pour monitorer la queue de message
- /rabbitmq-plugins enable rabbitmq_management/ permet de les activer
- Générer une image Docker toute prête
**** DONE Purger la queue de réponse
- Lorsque l'utilisateur stop l'exécution, webPLM se contente d'arrêter de lui streamer les messages envoyés par le juge
- Mais lors de la prochaine exécution, webPLM récuperera ces messages restés en attente au lieu des messages correspondant à cette nouvelle exécution
- Purger la queue de réponse
**** DONE Afficher les indications dans les labyrinthes
- Dans un exercice des labyrinthes, on doit trouver le plus court chemin
- Pour cela, on note et propage une indication au sol depuis la sortie
- L'indication n'apparaît pas, ce qui rend difficile le debugging du code de l'élève
** Semaine du <2015-09-15 mar.> au <2015-09-18 ven.>
*** Done
- Débugger /setIndication/ de *ShortestPathMaze* en Python
  - /generateOperationsChangeCellContent/ n'étant pas redéfini dans /setupBindings/ de *BuggleWorld*, on doit écrire /entity.generateOperationsChangeCellContent/ pour l'appeler
  - Quelques erreurs de syntaxe s'étaient aussi glissées dans l'appel
- Corriger les tests unitaires
  - webPLM, branche master
    - Il manquait juste une dépendance de *Jasmine*
  - webPLM, branche prod-juge
    - Mise à jour des tests pour correspondre aux dernières modifications du code (suppression des spies sur les mondes)
    - Certains objets dépendent de l'application *Play Framework* courante, notamment pour accéder à des variables de configuration
      - Ajout de /new WithApplication/ aux tests pour simuler une application *Play Framework* courante
    - Instancier *PLM* instancie un *Tribunal*, qui n'arrive pas à se créer car il ne trouve pas de queue de message
      - Modification de l'architecture de webPLM pour séparer l'instanciation de *PLM* et de *Tribunal*
      - *Tribunal* est instancié par *PLMActor* et passé en tant que paramètre au constructeur de *PLM*
      - Modification des tests pour utiliser un mock d'une instance de *Tribunal*
    - Instanciation de *GitUtils* échoue car aucune variable d'environnement existe
      - Modification du code pour fournir une valeur par défaut si la variable d'environnement n'a pas été définie
  - PLM, branche library
    - La liste des leçons à tester dans *LessonTest* et *ExoTest* n'était pas synchronisée avec la liste des leçons disponibles dans *Game*
      - Utilisation de la liste des leçons de *Game* dans tous les cas
  - PLM, branche webPLM-split
    - Les tests unitaires exécutant du Java et du Scala échouent pour une raison que j'ignore
- Gérer la couleur des buggles
  - Modification du code de *BuggleWorldView* pour changer la couleur affichée de la buggle si elle de la même couleur que la cellule sur laquelle elle se trouve
  - Ajout de l'opération *changeBuggleBodyColor*, générée lors d'un appel à /setBodyColor/
  - Gestion de cette nouvelle opération dans le modèle JS
- Adapter TurtleWorld pour webPLM
  - Je préfère repartir de zéro
  - [X] Implémentation du modèle JS
  - [X] Implémentation des méthodes de conversion du modèle Java
  - [X] Implémentation de la représentation du monde
    - Manque juste l'affichage des indices pour la taille des segments
    - Reste aussi à vérifier les proportions
  - [X] Ajout des opérations représentant l'évolution du monde
  - [X] Implémentation de la gestion de ces opérations côté client
*** Planned
**** DONE Débugger setIndication de ShortestPathMaze en Python
- /setIndication/ appelle /generateOperationsChangeCellContent/, qui n'est pas connu en Python
- Résoudre ce problème
**** DONE Gérer la couleur des buggles
- Lorsqu'on affiche une buggle, on ne vérifie pas sa couleur, ce qui peut poser des problèmes [[https://github.com/BuggleInc/PLM/issues/466][par moments]]
- L'opération permettant de changer la couleur d'une buggle n'est pas non plus implémentée
**** DONE Adapter TurtleWorld pour webPLM
- Etudier le travail déjà effectué
  - Reprendre la branche?
  - Recommencer vu l'ensemble des modifications effectuées depuis?
- Implémenter la vue du monde
** Semaine du <2015-09-22 mar.> au <2015-09-25 ven.>
*** Done
- Mettre à disposition la leçon Logo
  - Ajout de la leçon dans *Game.lessonsName*
  - Renommage des packages de la leçon
- Déployer version de webPLM avec les tortues
  - [X] Merger les modifications de PLM dans la branche library
  - [X] Merger les modifications de webPLM dans master
  - [X] Faire une release du mode local
  - [X] Mettre à jour les branches de PLM pour la version centralisée de webPLM et les juges
  - [X] Mettre à jour la version centralisée de webPLM
    - [X] Mise à jour du jar de PLM dans webPLM
    - [X] Ajouter les démos de *TurtleArt* & *Recursion.logo*
  - [X] Mettre à jour les juges
    - [X] Mise à jour du jar de PLM dans les juges
    - [X] Ecrire les méthodes de conversion Java -> JSON pour *TurtleWorld* et les *TurtleOperations*
  - [X] Re-déployer l'application
    - [X] Mettre à jour l'image docker *buggleinc/webplm*
    - [X] Mettre à jour l'image docker *buggleinc/plm-judge*
    - [X] Mettre à jour les /docker-compose/ de l'application
- Corriger les tests d'intégration
  - Avec OpenJDK8 & Scala 2.10.5, les tests passent en local pour la leçon Logo
- Retravailler le workflow de déploiement des dockers
  - Création [[https://github.com/BuggleInc/plm-dockers/tree/rework-workflow][d'une nouvelle branche]] mettant à disposition les fichiers *docker-compose.yml* pour webPLM & PLM-judge
  - Y ajouter un *Makefile* ajoutant des raccourcis ? Pour:
    - Mettre à jour les images utilisées et relancer l'environnement
    - Stopper l'environnement déployé et supprimer les conteneurs utilisés
- Corriger le monde des tortues
  - Ajout de /stepUI()/ après /setHeading()/
  - Correction du format de l'API pour l'anglais et le français
  - Mise à jour de la version locale
  - Mise à jour de la version centralisée
- Créer un service fournissant le token d'authentification Github
  - Création du service *getGitHubAccessToken* exposant le token d'authenfication
  - Où placer la requête de ce service au lancement du serveur local?
    - Peut pas le faire dans *Global*: semblerait que *WSClient* ait besoin que *Global* soit instancié pour fonctionner
    - Pour le moment, création d'un objet *PLM* interrogeant le service et le fournissant aux instances de *PLM* des utilisateurs
      - C'est donc à la connexion du 1er utilisateur que l'on récupère le token, et non au lancement du serveur
  - Difficultés à interroger ce service
    - *WSClient* n'arrive pas à interroger ce web-service à cause du certificat SSL
    - Celui-ci n'étant pas signé, *WSClient* refuse d'effectuer la requête (mais pas de message d'erreur?)
    - J'ai tenté, en suivant [[https://www.playframework.com/documentation/2.3.x/WSQuickStart][cette doc]], de forcer *WSClient* à effectuer la requête en ajoutant le certificat SSL dans la liste des sites autorisés, sans résultat
  - Utilisation de *scalaj*
    - [[https://github.com/scalaj/scalaj-http][scalaj]] est une librairie permettant d'effectuer facilement des requêtes HTTP en Scala de façon synchrone
    - Une option proposée par *scalaj* permet de ne pas tenir compte de la validité du certificat SSL: /HttpOptions.allowUnsafeSSL/
    - J'ai ainsi pu récupérer l'*accessToken* facilement dans *Global*
- Obtenir un certificat valide pour HTTPS
  - Inscription à la bêta de [[https://letsencrypt.org/]] effectuée
*** Planned
**** DONE Mettre à disposition la leçon Logo
- Ajouter cette leçon à la liste des leçons disponibles
- En profiter pour la renommer correctement (lego -> logo)
**** DONE Déployer version de webPLM avec les tortues
- Merger les modifications de PLM dans la branche library
- Merger les modifications de webPLM dans master
- Faire une release du mode local
- Mettre à jour les branches de PLM pour la version centralisée de webPLM et les juges
- Mettre à jour la version centralisée de webPLM
- Mettre à jour les juges
- Re-déployer l'application
**** DONE Corriger le monde des tortues
- Déclencher /stepUI()/ après /setHeading()/
- L'API n'est pas formatée correctement
**** DONE Retravailler le workflow de déploiement des dockers
- Actuellement, pour déployer une nouvelle version des dockers (webPLM et PLM-judge), il faut
  - Pour chaque machine concernée
    - Se connecter dessus
    - Puller la dernière version du répo
    - (Pour webPLM uniquement) Regénérer le binaire de l'application
    - Lancer /docker build/ pour regénérer l'image docker
    - Lancer /docker-compose up/
- Pusher les dernières versions des images docker de webPLM & PLM-judge permettrait de ramener le workflow à
  - Pour chaque machine concernée
    - Se connecter dessus
    - Lancer /docker-compose pull/
    - Lancer /docker-compose up/
**** DONE Créer un service fournissant le token d'authentification Github
- Puisque Github ne souhaite pas qu'on mette en public notre token d'authentification
- Mettre le token d'authentification en variable d'environnement du serveur
- Ajouter et exposer une méthode fournissant ce token
** Semaine du <2015-09-28 lun.> au <2015-10-02 ven.>
*** Done
- Créer un service fournissant le token d'authentification Github
  - Passage du token à GitUtils & à GitHubIssueManager
  - La série de tests *unit-tests* de PLM a échoué sur Travis
    - Elle passe pourtant en local (3 essais sur 3)
    - La relancer a permis de corriger ce résultat
  - La série de tests serveur de webPLM a échoué sur Travis
    - Oubli de changer l'URL du webservice
    - A modifié l'URL pour https://plm.telecomnancy.univ-lorraine.fr/getGitHubAccessToken
    - A besoin de déployer la nouvelle version du serveur centralisé pour tester
  - Déployer la nouvelle version du serveur centralisé
    - [X] Générer l'image docker correspondante
    - [X] Pusher la nouvelle image
    - [X] Relancer l'application
  - Les tests unitaires passent maintenant que la nouvelle version du serveur central est déployée
  - Le serveur local arrive bien à récupérer le token et à pusher sur GitHub
- Compléter le monde de Hanoï
  - Refactoring du modèle Java
    - *HanoiWorld* possède deux listes
      - une liste de listes d'entiers permettant de représenter la taille des disques
      - une liste de listes de couleurs permettant d'indiquer leur couleur
    - Refactoring de la classe pour n'en garder qu'une
      - une liste de listes de *HanoiDisk*
    - Une instance de *HanoiDisk* comporte sa taille et sa couleur
    - Modification du code de *HanoiWorld* pour utiliser cette nouvelle structure
    - Ajout de méthodes permettant de générer facilement la configuration initiale d'un monde
    - Portage des exercices pour utiliser ce nouveau modèle de données
  - Refactoring du modèle Javascript
    - Ajout du modèle *HanoiDisk*
    - Modification du constructeur de *HanoiWorld* pour générer correctement des instances de *HanoiDisk*
    - Modification de la représentation du monde pour gérer correctement ce nouveau modèle de données
- Remettre le bouton "Revert"
  - La directive *resetExercise* était toujours présente dans l'application, juste plus utilisée
  - Ajout de *resetExercise* sur la page d'exercice
  - Correction de la traduction française
- Refactorer PLMActor
  - Division de /receive()/ en une fonction pour quasi chaque cas
  - Déléguer certaines de ces fonctions à de nouveaux acteurs peut être une amélioration
    - Revoir quand utiliser un service et quand utiliser un acteur
    - D'après [[http://doc.akka.io/docs/akka/2.4.0/AkkaScala.pdf][la doc de Akka]], les acteurs peuvent être utiliser pour implémenter des services
      - Tribunal?
      - GitHubIssueManager?
      - UserDAORestImpl?
- Ajouter un service de configuration
  - Dans la version 2.3 de *PlayFramework*, tenter d'accéder à la configuration de l'application depuis l'objet *Global* n'est pas possible par défaut
  - Tandis que dans la version 2.4, on peut facilement configurer *PlayFramework*  pour démarrer l'application en ayant chargé la configuration
    - Voir [[https://www.playframework.com/documentation/2.4.x/ScalaDependencyInjection#Advanced:-Extending-the-GuiceApplicationLoader][doc]]
  - Ceci permettrait de binder au démarrage de l'application le service de configuration au système d'injection de dépendance
- Passer en version 2.4 de PlayFramework
  - La doc concernant la migration de version se trouve [[https://www.playframework.com/documentation/2.4.x/Migration24][ici]]
  - Modification du code impacté par cette nouvelle version
    - Suppression de l'objet Global
    - Modification des objets y accédant pour récupérer le token d'authentification pour GitHub
  - Des modifications apportées par la 2.4 font que *Silhouette* n'est plus fonctionnel
  - Migration de la version de *Silhouette* : 2.0.0 -> 3.0.4
    - Modification de *SilhouetteModule*, des *Controller* et de *PLMAccountsProvider*
  - Correction des tests unitaires
    - Plus possible de générer un mock dans une fonction stubbée à la volée
    - Créer le mock de retour au préalable a suffit pour corriger ce bug
- Refactorer la partie authentification
  - *Silhouette* a été mis à jour en même temps que *PlayFramework*
*** Planned
**** DONE Créer un service fournissant le token d'authentification Github
- Modifier le comportement du serveur local pour
  - Qu'il récupère le token en interrogeant le serveur central
  - Modifie les attributs de *GitUtils* pour utiliser cette valeur
**** DONE Complèter le monde de Hanoï
- Dans certains exercices, les disques des tours de Hanoï sont de couleurs différentes
- Supporter les différentes couleurs dans la version web
**** DONE Remettre le bouton "Revert"
- Les élèves ayant tendance à supprimer le code par défaut de l'éditeur de code, il faudrait qu'ils puissent réinitialiser l'exercice pour le retrouver
- Le bouton "Revert" sert à cela mais il a disparu au cours de la refonte de l'UI
- Le remettre et retester son bon fonctionnement
**** DONE Passer en version 2.4 de PlayFramework
** Semaine du <2015-10-05 lun.> au <2015-10-09 ven.>
*** Done
- Ajouter un service de configuration
  - Depuis la version 2.4 de PlayFramework, il existe un objet *Configuration* qui correspond au service de configuration voulu
  - Cependant pour le récupérer, il faut utiliser l'injection de dépendance
  - Une fois l'objet récupéré, il suffit d'utiliser le code suivant pour récupérer une valeur: /configuration.getString("key")/
- Utiliser l'injection de dépendance
  - Un injecteur global est créé au démarrage du serveur
    - Il fournit la configuration du serveur et les objets globaux
  - Mais pour chaque utilisateur, il faut instancier de nouveaux objets
    - Guice propose la notion de [[https://github.com/google/guice/wiki/Scopes][Scopes]] pour gérer ce genre de cas
    - Mais à part *Singleton*, ils ne sont pas supportés par Play ([[http://stackoverflow.com/questions/25626264/how-to-use-play-frameworks-request-and-session-scope-in-goole-guice][voir ce thread]])
      - La notion de Session n'existe pas dans PlayFramework de base
      - PlayFramework n'utilise pas de servlets, qui semblent être nécessaire pour utiliser RequestScoped 
  - Puisqu'on peut pas utiliser les Scopes, il faut trouver une alternative
    - Les injecteurs fils sont peut-être la solution
      - Ils sont générés à partir d'un injecteur parent
        - Dans notre cas, l'injecteur global
      - On peut ensuite surcharger certains bindings ainsi qu'en ajouter de nouveaux
      - Cela permettrait d'ajouter pour chaque utilisateur les objets qui représente sa session
	- Son instance de *User*
	- Les éventuels acteurs
	- Le logger permettant d'envoyer des messages au client
      - Il faudrait donc en instancier un à chaque connexion d'un utilisateur
      - Gérer les déconnexions/connexions
  - Voir comment injecter des acteurs avec Guice
    - [[http://www.typesafe.com/activator/template/activator-akka-scala-guice][Un tutoriel]] explique comment faire
    - Voir si ce dernier est toujours valide
    - [[https://www.playframework.com/documentation/2.4.x/ScalaAkka][La documentation]] de PlayFramework semble être assez complète sur le sujet mais présenter une autre méthode
- Obtenir un certificat valide pour HTTPS
  - [[http://wiki.korben.info/auto-signer_son_certificat_ssl][Cet article]] liste quelques autorités de certifications chez qui on pourrait obtenir un certificat (payant)
  - Mail envoyé à Benjamin pour savoir si INRIA peut nous fournir un
    - Sa réponse:
      - 1/ pour les domaines inria.fr/loria.fr : tu as digitcert (cf https://wiki.inria.fr/support/Demander_un_certificat_serveur)... mais vu ton url cela ne va pas convenir.
      - 2/ certificats gratuits avec StartCom/CACert, ... mais ils sont peu reconnus par les navigateurs
      - 3/ certificats payants avec Verisign, GlobalSign... mais c'est payant
      - 4/ Let's Encrypt (https://letsencrypt.org/) ... mais c'est "arriving Q4 2015" 
  - Mail envoyé à Cyril pour savoir si TNCY peut nous fournir un
    - L'université de Lorraine nous a fourni un certificat signé, reste à le déployer
- Déployer version avec certificat SSL valide
  - Modifier la configuration de nginx
    - Ajout du certificat SSL
    - Sert de reverse-proxy pour webPLM
    - Timeout de la websocket
      - Par défaut, nginx ferme la websocket après 30s d'inactivité
      - Ajout de /proxy_read_timeout 1h;/ pour rallonger cette durée
  - Modifier la configuration de docker-compose
    - Modification de la configuration des ports pour que nginx puisse servir de reverse-proxy
- Refactorer PLMActor
  - [[http://doc.akka.io/docs/akka/snapshot/AkkaScala.pdf][Dans la documentation d'Akka]], partie 3.1.10, ils expliquent que l'on peut modifier la fonction /receive/ d'un acteur en cours d'exécution
  - Cela permet d'implémenter une machine à états
  - Modifier /receive/ en cours d'exécution permettrait de rendre l'application plus robuste 
- Merger les branches master et prod-judge
  - Fusionner les branches de PLM *library* et *webplm-split*
    - Correction des conflits
    - Les tests unitaires échouent cependant
    - Problème avec les mondes
      - Les solutions n'ont plus l'air de s'exécuter, faussant tous les exercices
      - J'avais supprimé /computeAnswer/ de /setupWorlds/ dans la version *webplm-split* de PLM
      - Re-ajout des appels à /computeAnswer/ et /computeError/
    - Ceci à corriger les tests unitaires
  - Fusionner les branches de webPLM *master* et *prod-judge*
    - Correction des conflits
    - Problème avec les OAUTH_CLIENT_ID
      - Pour chaque provider (Google, GitHub, Facebook), j'ai enregistré deux applications
        - PLM et PLM-local
	- Le serveur centralisé et le serveur local utilisaient le triplet (clientID, clientSecret, redirectURL) correspondant
	- On pourrait en utiliser plus qu'une, mais GitHub n'accepte qu'une URL de redirection par application
      - Doit implémenter un service permettant au serveur de fournir le triplet (clientID, clientSecret, redirectURL) à utiliser au client
      - Autre option plus simple: utiliser une variable fournie par le template
      - C'est cette dernière qui a été choisie
    - Re-ajout de *ExecutionSpy* & de *ExecutionResultListener*
    - Pour le moment, désactivation du *Tribunal*
    - Problème avec les opérations dans /exercise.controller.js/
      - Le format des opérations provenant du *Tribunal* et du *ExecutionSpy* sont différents
      - Celles provenant du *Tribunal* ont besoin d'être parser par le client avant d'être traitées
      - Pour le moment, utilisation du format des opérations de *ExecutionSpy*
  - Ajouter un niveau d'abstraction pour l'exécution du code de l'élève
    - Ajout du trait *ExecutionManager* proposant /startExecution/ & /stopExecution/ comme méthodes
    - Modification de *Tribunal* pour implémenter ce trait
    - Ajout de la classe *LocalExecution* implémentant ce trait et permettant d'exécuter le code de l'utilisateur en local
    - Modification de *PLMActor* et *PLM* pour faire référence à ce trait
    - Pour le moment, instancie dans tous les cas un *LocalExecution*
  - Injecter le bon *ExecutionManager*
    - Pas possible d'injecter proprement des acteurs en réponse à l'ouverture d'une websocket d'après [[https://groups.google.com/forum/#!searchin/play-framework/websocket|sort:date/play-framework/QzCHWAB1nQM/khKCJR-mj6sJ][ce thread]]
    - Il faut que ça soit *ApplicationController* qui récupère l'*ExecutionManager* injecté et le passe au constructeur de *PLMActor*
    - Pour injecter un nouveau *ExecutionManager* pour chaque acteur, il suffit de créer un *Provider*
      - Le *Provider* sera automatiquement à chaque fois qu'une instance sera nécessaire
      - Ajout de /provideExecutionManager/ qui retourne un nouveau *LocalExecution* par défaut
      - Si la variable d'environnement *PLM_EXECUTION_MODE* a pour valeur "TRIBUNAL", instancie un *Tribunal* à la place
  - Unifier le format des opérations provenant de *Tribunal* et de *LocalExecution*
    - Modification du code de /exercise.controller.js/ pour gérer les deux formats
- Déployer une version d'alecsia
  - Génération d'un Dockerfile
    - Permet d'automatiser le déploiement de l'application
    - De mieux controller l'environnement d'exécution
    - Et de ne pas installer toutes les dépendances sur ma machine
  - Erreur rencontrée lors de la configuration de l'application
    - Certains fichiers ne semble accessible que par *localhost*
    - *Docker* n'apparaît pas comme *localhost* et se voit donc refuser l'accès
    - Modification de ces fichiers pour ne pas tenir compte de l'IP utilisée pour accéder au fichier
  - Erreur rencontrée lors de création de la BDD
    - Un fichier nécessaire à l'initialisation de la BDD est manquant: /app/bootstrap.php
    - Celui-ci est référencé dans .gitignore, ce qui explique pourquoi il manque à l'appel
  - Tâche annulée du coup
- Corriger les exceptions levées au démarrage de la leçon welcome
  - L'erreur provient de *MoriaCommonErr0*
  - Dans cette erreur, on essaie de porter plusieurs biscuits à la fois
  - Modification du code pour se contenter d'avancer jusqu'au mur
*** Planned
**** DONE Ajouter un service de configuration
- A de nombreux endroits du code de webPLM, on récupère des valeurs de configuration
- Celles-ci sont contenues dans /conf/application.conf/
- Pour les récupérer, on doit passer par la fonction /Play.configuration.getString/ qui nécessite une application Play courante pour fonctionner
- Mettre en place un service de configuration regroupant ces valeurs permettrait de faciliter l'accès à ces valeurs
- Cela permettrait aussi de simplifier les tests en permettant de mocker ce service
**** DONE Obtenir un certificat valide pour HTTPS
- P-e voir [[https://www.eff.org/deeplinks/2015/09/one-small-certificate-web-one-giant-certificate-authority-web-encryption][ici]] pour l'obtenir
- Voir sinon avec Inria ou TNCY
**** DONE Déployer version avec certificat SSL valide
- [X] Modifier la configuration de nginx
  - La configuration doit inclure le certificat signé
  - Les requêtes sur le port 443 doivent être transférées à webPLM sur le port 9443
- [X] Modifier la configuration de docker-compose
  - Nginx doit écouter sur le port 443
  - webPLM doit être accessible sur le port 9443
**** CANCELLED Déployer une version d'alecsia
- [[http://www.lifl.fr/~salson/alecsia/][alecsia]] est un outil en ligne permettant aux enseignants de simplifier la correction de TPs
- Certaines fonctionnalités pourraient s'avérer intéressantes dans PLM
- Déployer une version de test de l'application pour étudier son fonctionnement et les fonctionnalités qu'elle propose
**** DONE Merger les branches master et prod-judge
- Pour assurer la maintainabilité du projet, il serait plus simple de garder qu'une seule branche
- Celle-ci devrait pouvoir fonctionner en mode serveur local ou en mode serveur centralisé en fonction des variables d'environnements
- [X] Fusionner les branches de PLM *library* et *webplm-split*
- [X] Fusionner les branches de webPLM *master* et *prod-judge*
- [X] Ajouter un niveau d'abstraction pour l'exécution du code de l'élève
  - Deux objets en découleront
    - Le *Tribunal* actuellement utilisé pour communiquer avec les juges
    - Un nouvel objet communiquant avec le *Game* local pour exécuter le code
- [X] Injecter le bon *ExecutionManager*
  - En fonction de la configuration de l'application, on utilisera un de ces deux objets
- [X] Merger les fichiers de configuration
  - La configuration doit pouvoir fonctionner de façon équivalent dans les deux cas
  - Ajouter un clé indiquant le mode de fonctionnement de l'application
- Vérifier si d'autres modifications sont à apporter?
**** DONE Corriger les exceptions levées au démarrage de la leçon welcome
- L'exécution des codes menant aux erreurs communes lèvent des exceptions au démarrage de la leçon welcome
- Corriger ces programmes
** Semaine du <2015-10-12 lun.> au <2015-10-16 ven.>
*** Done
- Refactorer ExecutionSpy & ExecutionResultListener
  - Déplacement de l'instanciation des *ExecutionSpy* de *PLMActor* à *LocalExecution*
  - Modification de *LocalExecution* pour hériter de *GameStateListener*
  - Disparition de *ExecutionResultListener* au profit de *LocalExecution*
  - Refactoring du trait *ExecutionManager*
    - Ajout des attributs /plmActor/ et /game/
    - Ajout des méthodes /setPLMActor/ et /setGame/
    - Modification de la signature de /startExecution/ pour ne plus passer en paramètre /plmActor/ et /game/ à chaque fois
- Gérer les leçons et exercices dans webPLM
  - Création d'un acteur *LessonsActor*
    - Initialise les leçons à partir de fichier JSON les décrivant
    - Expose les leçons via une API
      - getLessons
      - getExercisesList
    - Voir où stocker les exercices
      - Dans le même JSON que la leçon?
      - Dans des fichiers distincts référencés par le JSON de la leçon?
    - Voir la structure de donnée utilisée pour référencer les exercices
      - Directement dans la leçon?
	- Voir dans ce cas comment tronquer le json pour ne pas fournir tous les exercices lorsqu'un élève demande la liste des leçons
      - Dans une structure à part?
	- Utiliser une Map pour faire le lien entre leçons & exercices?
  - Modification de l'acteur *PLMActor* pour récupérer la liste des leçons à partir de cet acteur au lieu de PLM
  - Implémentation des fonctions d'export des leçons en JSON
    - Permettra de générer le /main.json/ décrivant chaque leçon
    - Reste à ajouter l'image de la leçon, la description et "à propos"
      - Comment gérer ces champs?
	- Les ajouter au JSON?
	- Les conserver dans des fichiers séparés, mais comment les fournir à la volée lorsqu'un utilisateur en a besoin?
    - Comment gérer les traductions?
  - Implémentation des fonctons d'export des exercices en JSON
    - Ajout de /toJSON()/ pour *Lesson* et *Lecture*
    - Ceci permet de générer pour chaque leçon le fichier JSON la décrivant
- Modifier le processus de l'exécution d'un exercice
  - Création d'un exercice type *BuggleExercise* et son entité correction *BuggleExerciseEntity*
  - Tentative de lui passer le code de la correction pour déterminer les mondes solutions
    - Pas réussi à initialiser correctement l'exercice tout en modifiant le code de son entité solution
  - Plus simple de lui passer directement les mondes solutions souhaités
    - A voir comment l'application détermine les mondes solutions au démarrage
      - Directement dans le json des exercices?
      - Regénérer les mondes solutions à partir de l'entité correction? On en revient au problème précédent alors
*** Planned
**** DONE Refactorer ExecutionSpy & ExecutionResultListener
- Actuellement, ils sont gérés par *PLMActor*
- Ils devraient plutôt être gérés par *LocalExecution*
- Fusionner *LocalExecution* et *ExecutionResultListener*?
** Semaine du <2015-10-26 lun.> au <2015-10-30 ven.>
*** Done
- Gérer les leçons et exercices dans webPLM
  - Séparation de la tâche en sous-tâches plus précises
- Instancier les leçons dans webPLM
  - Export de la leçon *welcome* au format JSON à titre d'exemple
    - Voir [[https://github.com/BuggleInc/webPLM/blob/refactor-lessons-exercises/lessons/welcome/main.json][ici]] le format
  - Ajout de la classe *Lesson*
    - Initialisée avec l'identifiant, le nom et une liste de *Lecture* décrivant la liste des exercices composant cette leçon
    - Possède aussi une *Map* (vide par défaut) permettant, pour chaque langue, de récupérer la description associée
  - Ajout de la classe *Lecture*
    - Initialisée avec l'identifiant et une liste de sous-lectures
- Exposer les nouveaux objets décrivant les leçons
  - Implémentation de l'acteur *LessonsActor*
  - Initialise les leçons à partir d'une liste d'identifiants
    - Parcoure le JSON de la leçon et instancie une *Lesson* correspondante
    - Extrait les descriptions et les ajoute aux instances
    - Possède une liste ordonnée des leçons ainsi qu'une *Map*
  - Expose le message *GetLessonsList* qui permet de récupérer la liste des leçons
  - Expose le message *GetExercisesList* qui permet de récupérer la liste des exercices composant une leçon
- Mettre en place un script exportant les leçons de PLM au format JSON
  - Ajout de *JSONGeneratorController*
    - Permet de générer les fichiers JSON décrivant les leçons
    - Méthode exposée à l'url http://hostname/generators/lessonsToJSON
  - Ajout des fichiers JSON résultant
  - Modification de *LessonsActor* & *Lesson* pour s'adapter au JSON résultant
    - Le champ /name/ peut être NULL
    - Certaines descriptions n'ont pas été traduites, dans ce cas afficher la description anglaise par défaut
- Instancier les exercices dans webPLM
  - On cherche à instancier les exercices de façon indépendante de *Game* et de *Lesson*
  - Au final, les exercices doivent être des structures de données ne servant qu'à décrire une situation donnée (type de monde, mondes initiaux, mondes solutions, consigne de l'exercice)
  - Comment supprimer le lien vers *Game*?
    - *Game* sert principalement à récupérer:
      - Le langage de programmation, utilisé pour compiler et exécuter les entités de la solution pour initialiser l'exercice
      - *I18n* & *LogHandler*, utilisés pour fournir différents messages (d'erreurs principalement) au cours de l'exécution
    - Déplacer /Exercise.computeAnswer()/ et /Exercise.mutateEntities()/ vers un autre objet?
      - Une factory?
  - Que faire de *Lesson*?
    - *Lesson* n'a l'air que d'être utilisé que pour récupérer un identifiant, ce qui facilement remplaçable.
    - Les leçons étant dorénavant gérées par webPLM, supprimer *Lesson* (et *Lecture* tant qu'on y est)?
      - Implique un refactoring conséquent de *Game*
  - Refactoring de *Exercise*
    - Ajout de méthodes pour initialiser la structure de données sans *Game* et *Lesson*
  - Refactoring de *ProgrammingLanguage*
    - Uniquement *LangJava* pour les tests
    - Ajout d'une méthode /compileExo/ alternative n'ayant besoin que des sources en paramètre
    - Ajout d'une méthode /mutatesEntities/ alternative n'ayant besoin que des sources et de la liste des entités précédentes en paramètres
  - Déplacement de /newSourceFromFile/ de *Exercise* à une nouvelle classe *TemplatedSourceFileFactory*
  - Ajout de *ExerciseRunner*
    - Déplacement de /run/, /runDemo/, /mutateEntities/ et /check/ de *Exercise*
  - Ajout de *ExercisesFactory*
    - Déplacement de /computeAnswer/ de *Exercise*
    - Déplacement/Refactoring de /initSourcesFiles/ de *ExerciseTemplated*
  - Refactoring/Nettoyage du code
    - Plutôt que de stocker que le nom de l'entité solution dans *Exercise*, stocke le *SourceFile* généré à partir de cette dernière
    - Plutôt que de recréer le *SourceFile* à partir de l'entité à chaque fois que nécessaire, récupère le *SourceFile* stocké dans *Exercise*
    - Délègue la génération des sources au langage de programmation
*** Planned
**** CANCELLED Gérer les leçons et exercices dans webPLM
- Pour mettre en place un éditeur d'exercice dans webPLM, il faudrait sortir la gestion des leçons de PLM
- [ ] Déplacer la composante compilation et exécution de *Exercise* à *LessonRunner*/*DemoRunner*
  - Ceci nous permettrait de ne conserver que le modèle de *Exercise*
- On passe ensuite à l'implémentation du gestionnaire des leçons dans webPLM
- [ ] Refactorer les leçons pour les représenter au format JSON
- [ ] Refactorer les exercices pour les représenter au format JSON
- [ ] Implémenter un acteur exposant une API permettant de
  - Récupérer la liste des leçons
  - Récupérer la liste des exercices d'une leçon
  - Récupérer un exercice
**** DONE Instancier les leçons dans webPLM
- Créer un nouvel objet *Lesson* décrivant les leçons se trouvant auparavant dans PLM
- Possède comme champs:
  - Le nom de la leçon
  - La description de la leçon (en plusieurs langues)
  - Des informations supplémentaires sur la leçon (en plusieurs langues)
  - La liste des identifiants des exercices composant cette leçon
- S'instancie à partir du JSON correspondant aux anciennes leçons
**** DONE Exposer les nouveaux objets décrivant les leçons
- Implémenter un acteur fournissant une API permettant de
  - Récupérer la liste des leçons
  - Récupérer la liste des exercices d'une leçon
**** DONE Mettre en place un script exportant les leçons de PLM au format JSON
- Afin de faciliter la transition vers la nouvelle architecture, un script permettant de générer le JSON correspondant au leçon serait utile
- Celui-ci devrait être facilement utilisable
  - Script directement dans PLM?
  - Méthode de webPLM disponible via une URL spécifique?
** Semaine du <2015-11-02 lun.> au <2015-11-06 ven.>
*** Done
- Instancier les exercices dans webPLM
  - Ajout d'un constructeur par copie à *Exercise*
  - Ajout de la classe *BlankExercise* permettant d'utiliser ce constructeur par copie
  - Ajout de la fonction /cloneExercise()/ à *ExercisesFactory*
  - Permet ainsi de fournir une copie de travail de l'exercice à l'utilisateur
- Exposer les nouveaux objets décrivant les exercices
  - Ajout de l'acteur *ExercisesActor*
  - Instancie une liste d'exercices à son lancement à l'aide de l'*ExercisesFactory*
    - Pour le moment, uniquement l'exercice /Environment/
  - Expose les exercices par le biais de leur ID (normalement référencé dans une leçon dans la liste des lectures)
  - Modification de *PLMActor*
    - Refactoring du traitement du message /getExercise/ pour récupérer une copie de l'exercice demandé via *ExercisesActor*
- Modifier le processus de l'exécution d'un exercice
  - Ajout d'un acteur *ExecutionActor*
  - Permet de lancer le code de l'élève sur un exercice
    - [X] Lance l'exécution de l'exercice
    - [X] Transmet les opérations générées par l'exécution au client
      - Ajout de *OperationSpy*
    - [X] Génère un *ExecutionProgress* indiquant le résultat de l'exécution
      - Encore incomplet cependant
  - Modification de *PLMActor*
    - [X] /runExercise/ envoie dorénavant le message /StartExecution/ à l'*ExecutionActor*
    - [X] Transmet le résultat de l'exécution à l'utilisateur à partir du *ExecutionProgress*
    - [ ] Déclenche un évènement de commit à partir du *ExecutionProgress*
- Déployer la version de webPLM avec les tours de Hanoï tricolores supportés
  - Reprise de la fusion des branches *master* et *prod-judge*
  - Correction de la configuration de OAuth
    - Débuggage de la configuration de Google
    - Débuggage de la configuration de Facebook
    - Re-ajout de la configuration de GitHub
    - Re-ajout de la configuration de PLMAccounts
  - Correction du docker-compose permettant de lancer l'application
  - Fix rapide des dimensions des tours sur la vue pour ne plus déborder du canvas
  - Build & push de la nouvelle image docker
  - Déploiement de cette nouvelle version sur TELECOM Nancy
  - Mise en ligne sur GitHub de la nouvelle release correspondante
** Semaine du <2015-11-12 jeu.> au <2015-11-13 ven.>
*** Done
- Refactorer la session de l'utilisateur
  - Ajout de *SessionActor*
    - Remplace *SessionDB*
    - Permet de retrouver le code précédent d'un élève
      - Soit via le cache
      - Soit via *GitActor*
      - Soit via le code par défaut de l'exercice
  - Ajout de *GitActor*
    - Remplace *GitSpy*
    - Génère les fichiers représentant le résultat d'une exécution
    - Permet de retrouver le code précédent d'un élève
** Semaine du <2015-11-16 lun.> au <2015-11-20 ven.>
*** Done
- Refactorer la session de l'utilisateur
  - Implémentation de *GitActor*
    - Déclenchement d'un commit lorsqu'un utilisateur exécute son code
    - Déclenchement d'un commit lorsqu'un utilisateur se connecte à la PLM
    - Prévient *PushActor* que les modifications du repo doivent être push
  - Implémentation de *PushActor*
    - Permet de séparer la partie gérant les commits (*GitActor*) et la partie pushant les repos ayant de nouveaux commits (*PushActor*)
    - Reçoit des notifications d'instances de *GitActor* demandant à ce que les modifications de leur repo soit push
    - Périodiquement, traite les demandes de push en attente
- Tester si JGit permet de commit et push en parallèle
  - Ajout de /testParallelCommitAndPush()/
  - Lance 2 threads
    - tCommit ouvre le repo et génère des commits en boucle
    - tPush ouvre le repo et push les commits en boucle
  - Ne suffit pas à certifier que commit et push sont faisables sur un même repo en parallèle
  - Mais JGit ne semble pas lever d'exceptions sur l'utilisation de commandes Git en parallèle
  - Et Git lui-même est utilisable en parallèle: utilisation de [[https://en.wikipedia.org/wiki/Multiversion_concurrency_control][MVCC]] voir [[http://stackoverflow.com/questions/13459219/is-it-safe-if-more-git-commands-are-run-on-the-same-repo-in-parallel][ce topic]]
- Changer l'URL de PLM-accounts
  - Configuration de nginx pour accéder à PLM-accounts uniquement par proxy
  - Intercepte toutes les requêtes sur https://plm.telecomnancy.univ-lorraine.fr/plm-accounts et les transfère à http://plm.telecomnancy.univ-lorraine:9000
    - Mais le préfixe rajouté provoque des erreurs de chemins pour récupérer les fichiers
      - Le navigateur tente de récupérer les fichiers à https://plm.telecomnancy.univ-lorraine.fr/path/to/file au lieu de https://plm.telecomnancy.univ-lorraine.fr/plm-accounts/path/to/file
    - Pas moyen de rajouter facilement dans la configuration de *MEAN.JS* un préfixe: https://github.com/meanjs/mean/issues/715
  - Intercepte toutes les requêtes sur https://plm-accounts.telecomnancy.univ-lorraine.fr et les transfère à http://plm.telecomnancy.univ-lorraine:9000
    - Modification de la configuration de nginx en conséquence
    - Mail envoyé à Cyril pour demander qu'il affecte le second nom à la machine mise à disposition
    - Le nouveau nom *plm-accounts* est disponible
    - Déploiement de la nouvelle configuration NGINX
      - Note à soi-même: Si une image utilisée par un des conteneurs est modifiée, il faut relancer /docker-compose up/ pour que ça soit pris en compte
    - PLM-accounts ne fonctionne plus pour le moment
      - webPLM essaie d'y accéder en HTTPS mais le certificat SSL à disposition n'est valide que pour https://plm.telecomnancy.univ-lorraine.fr/
      - Mail envoyé à Cyril pour demander la génération d'un certificat SSL pour ce nouveau nom
- Re-implémenter les évènements Git manquants
  - switched
    - Se contente de mettre les champs /kind/, /exo/ et /switchTo/
    - Re-ajouter les champs dépendants du dernier résultat?
*** Planned
**** DONE Tester si JGit permet de commit et push en parallèle
- Séparer *GitSpy* en deux parties peut s'avérer plus simple à gérer et à maintenir
  - Une partie gérant les commits de l'utilisateur
  - Une partie gérant les repos à push
- Mais pour que cette approche soit viable, il faut pouvoir
  - Accéder via *JGit* plusieurs fois en même temps à un même repo
  - Pouvoir commit et push en parallèle
- Ecrire un test permettant de vérifier si des erreurs sont générés dans ces cas de figures
**** DONE Refactorer la session de l'utilisateur
- Implémenter un acteur permettant de stocker et récupérer le code de l'élève pour les exercices
- Implémenter un acteur permettant de générer les événements Git composant les traces des utilisateurs
**** DONE Re-implémenter les évènements Git manquants
- switched
** Semaine du <2015-11-23 lun.> au <2015-11-27 ven.>
*** Done
- Compléter le processus de l'exécution d'un exercice
  - Pour chaque langage de programmation, il faut refactorer /mutateEntities()/ et /compileExo()/
  - Ajout de /sourceFile/ et de /whatToCompile/ à /ProgrammingLanguage.mutateEntities()/ pour gérer les langages de scripts
  - [X] Rendre Scala compatible
  - [X] Rendre Python compatible
  - [X] Rendre Blockly compatible
- Refactoring de PLMActor
  - [-] Changement de langage
    - [X] Mettre à jour les consignes
    - [X] Mettre à jour le code de l'élève
    - [ ] Mettre à jour l'API
  - [ ] Changement de langue
    - [ ] Mettre à jour les consignes
    - [ ] Mettre à jour la liste des exercices
    - [ ] Mettre à jour l'API
  - [X] Connexion/Déconnexion d'un utilisateur
    - [X] Mettre à jour le gitID et trackUser à la connexion
    - [X] Mettre à jour le gitID et trackUser à la déconnexion
    - [X] Mettre à jour trackUser lors de la soumission de la réponse à la pop-up d'information
    - [X] Mettre à jour trackUser lors de la soumission du formulaire d'édition de profil
- Re-implémenter les évènements Git manquants
  - leaved
- Changer l'URL de PLM-accounts
  - Reçu le certificat SSL nécessaire à la nouvelle configuration nginx
  - Mise à jour de /Dockerfile/ et /nginx.conf/ pour utiliser le nouveau certificat
  - Création et déploiement de la nouvelle image docker PLM-nginx
  - Nouvelle url: https://plm-accounts.telecomnancy.univ-lorraine.fr/
*** Planned
**** DONE Compléter le processus de l'exécution d'un exercice
- Le nouveau système d'exécution ne supporte que le langage Java actuellement
- Rendre compatible les autres langages
**** DONE Re-implémenter les évènements Git manquants
- leaved
**** DONE Changer l'URL de PLM-accounts
- Actuellement, se trouve à http://plm.telecomnancy.univ-lorraine:9000
- Mais sur certains réseaux, ce port est bloqué
- Devrait plutôt utiliser nginx pour y accéder par le biais d'une URL utilisant un port standard
**** DONE Refactorer PLMActor
- Connexion/Déconnexion d'un utilisateur
** Semaine du <2015-11-30 lun.> au <2015-12-04 ven.>
*** Done
- Refactoring de PLMActor
  - [X] Changement de langage
    - [X] Mettre à jour l'API
  - [X] Changement de langue
    - [X] Mettre à jour les consignes
    - [X] Mettre à jour la liste des exercices
    - [X] Mettre à jour l'API
    - [X] Mettre à jour la liste des leçons
  - [-] Ajout d'un sanity check lors du changement d'exercice pour vérifier si le couple (leçon, exercice) est valide
    - [X] Fournir les informations de l'exercice si le test passe
    - [ ] Rediriger l'utilisateur sur la page d'accueil si le test ne passe pas
  - Correction d'un bug initialisant de façon incorrecte le modèle de l'utilisateur si celui-ci recharge la page alors qu'il était authentifié
- Re-implémenter les évènements Git manquants
  - Ajout de l'évènement /idle/ dans *GitActor*
  - Refactoring de l'évènement /idle/ dans *PLMActor*
    - Remplacement des *Instant* directement manipulés par des *Option[Instant]* pour éviter les *NullPointerException*
    - Simplification du code
- Complèter le résultat de l'exécution
  - Message d'erreur de compilation
    - Auparavant, on générait un nouveau *ExecutionProgress* directement dans les méthodes /compileExo()/ et l'affectait à l'exercice courant
    - Comment refactorer ce morceau de code?
      - [X] Passer une instance de *ExecutionProgress* aux méthodes concernées et le modifier en fonction du résultat?
      - [ ] Lever une exception, la catcher dans *ExercisesRunner* et utiliser son contenu pour générer un *ExecutionProgress*?
    - Ajout de /lastResult/ à /compileExo()/ et /mutateEntities/
    - Ajout de méthodes pour générer le message d'erreur dans *ExecutionProgress*
  - Message d'erreur car monde résultat non atteint
    - Le code actuel est incorrect
      - Seul la dernière comparaison entre le monde courant et le monde objectif importe
      - Il suffit que celle-ci soit valide pour que l'exercice soit considéré réussi.
  - Encore quelques problèmes sur le contenu du message
    - Le numéro de ligne indiqué est incorrect (+1 pour Java et Scala, +13 pour Python)
    - Manque l'enrobage:
      - Nature de l'erreur (compilation, exécution...)
      - Message d'encouragement
*** Planned
**** DONE Refactorer PLMActor
- La dépendance vers Game et la classe PLM (qui servait à piloter Game) a été supprimée
- Certaines fonctionnalités sont à re-implémenter puisqu'elles interagissaient avec Game auparavant
  - Changement de langue
  - Changement de langage
**** DONE Re-implémenter les évènements Git manquants
- idle
** Semaine du <2015-12-07 lun.> au <2015-12-11 ven.>
*** Done
- Complèter le résultat de l'exécution
  - Message d'erreur car monde résultat non atteint
    - Correction du code pour qu'en cas de la présence d'une erreur, l'exercice soit marqué comme échoué
    - Refactoring du code pour ajouter les différences entre les mondes courants et initiaux au message de résultat
- Instancier les exercices dans webPLM
  - Modification de *ExercisesActor*
    - Ajout de /generateExercisesIDsList()/ pour générer la liste des exercices à partir des fichiers présents dans l'application
    - Modification de l'expression régulière utilisée pour filtrer les fichiers pour ne pas prendre en compte les erreurs communes
  - Ajout de *Instructions* et de *InstructionsDrawG*
  - Refactoring des démos
    - Actuellement, besoin de générer des fichiers JSON contenant la liste des opérations de la solution
      - Besoin de les regénérer à chaque modification de l'exercice et de les maintenir à jour
    - Fournir les opérations à partir des exercices instanciés pour les besoins de l'application serait préférable
    - Mais manque la notion de /step/ (toutes les opérations sont jouées en 1 seul coup)
      - [ ] Ajouter des listeners sur les mondes solutions lors de l'exécution de la démo pour récupérer les étapes?
      - [X] Refactorer la gestion des opérations dans *Entity* et *World* pour y ajouter la notion d'étape?
	- Ajout d'une liste de /steps/ dans *World*, chaque /step/ étant une liste d'opérations
	- Lors d'un /stepUI()/, transfère les opérations de l'entité dans /steps/
	- *OperationSpy* se contente d'envoyer les /steps/ présentes au fur et à mesure des appels
	- /runDemo/ se contenter d'envoyer les /steps/ des mondes solutions
  - Ajout des exercices jusqu'aux *BatExercise*
  - Problème avec les *BatExercise*
    - Ne possède pas d'entités
      - Ma détection des langages supportées se fait actuellement en utilisant les fichiers des entités
    - Références à *Game.JAVA*, *Game.SCALA* & *Game.PYTHON* à retirer
    - Refactorer les *BatExercise* pour unifier le système?
    - Pour le moment, je vais me contenter de refactorer *ExerciseFactory* pour gérer ce cas particulier
- Ne pas montrer automatiquement la démo
  - Ajout des mondes solutions au json envoyé au client lorsqu'il accède à un exercice
- Refactorer les *BatExercise*
  - Modification de *BatExercise* pour séparer l'ajout du template de l'entité de la création du fichier source associé
  - Modification de *BatExercise* pour ajouter /templateJava()/ pour que ce langage soit géré de la même manière que les autres
  - Modification de *ExerciseFactory* pour initialiser l'exercice différement s'il s'agit d'un *BatExercise*
  - Permis d'instancier *SleepIn* dans webPLM
    - Fonctionne en Java!
    - Mais pas en Python
*** Question
- Refactorer les *BatExercise*
  - Les *BatExercise* ont une structure différente des autres exercices (entités directement dans le monde)
  - Est-ce que cette structure est justifiée?
    - Dans le cas contraire, un refactoring s'impose
*** Planned
**** DONE Complèter le résultat de l'exécution
- Au cours du refactoring du processus d'exécution d'un exercice, on a modifié la gestion du résultat de l'exécution
- Certaines informations sont manquantes:
  - Le message de l'erreur de compilation
  - La différence entre le monde obtenu et le monde objectif
**** DONE Ne pas montrer automatiquement la démo
- Basculer sur le monde objectif lance actuellement la démo automatiquement pour arriver à l'état final
- Se contenter de montrer l'état objectif
** Semaine du <2015-12-14 lun.> au <2015-12-18 ven.>
*** Done
- Refactorer les *BatExercise*
  - Il a été facile de modifier *SleepIn* pour qu'il ressemble aux autres exercices
    - Hérite de *ExerciseTemplated*
    - Ajout de l'entité *Java*
  - Ce qui pose problème est l'affichage
    - Actuellement, lorsque l'élève obtient un mauvais résultat, on affiche par exemple /sleepIn(true,true)=false (expected: true)/
    - Pour cela, on a besoin d'utiliser le champ *expected*
    - Celui-ci était initialisé en exécutant le code de la solution avant le /setup()/ des mondes
    - Comment initialiser ce champ dorénavant?
    - Ou peut-on se passer de ce champ ?
      - Comparaison avec le résultat du test solution? Mais dans ce cas, comment y accéder?
    - Il suffit de gérer ce problème du côté de l'UI
      - [X] Récupèrer l'*expected* à partir du monde solution envoyé à l'initialisation de l'UI
      - [X] Modifier les opérations pour se contenter d'envoyer les nouveaux *result* au lieu de renvoyer tout le monde
	- Ajout de l'opération *SetResult*
  - Le Python
    - C'est la méthode /run()/ actuellement qui parcoure les *BatTests* et qui applique la méthode de l'élève dessus pour calculer son résultat
      - Ce qui génère au passage les opérations pour mettre à jour la vue
    - En Python, la méthode /run()/ n'est pas appelée
      - Il faut donc ajouter au script de l'entité un morceau de code pour reproduire le /run()/ traditionnel
      - Ajouté ici: https://github.com/BuggleInc/PLM/blob/refactor-lessons-exercises/src/plm/universe/bat/BatEntity.java#L57-L71
  - Le Java et Scala
    - Dans les entités Java et Scala, on est obligé de redéfinir /run(BatTest t)/ pour appeler la méthode qui doit être ré-écrite par l'élève
    - Possible d'écrire /run(BatTest t)/ de façon générique pour éviter cela?
      - Réflection?
- Désactivation des fichiers dans /src/lessons/
  - Cela a permis de détecter un bug
  - Certains exercices (RunFour, RunHalf...) initialisent leurs mondes via des fichiers .map
  - Les chemins de ces fichiers n'avaient pas été mis à jour lors du déplacement des exercices de PLM à webPLM
  - Correction de ces chemins dans les exercices concernés
- Refactorer la conversion des objets de PLM en JSON
  - Création de l'interface *ToJSON*
    - Demande l'implémentation de la fonction /toJSON()/
    - Propose une implémentation par défaut de /getJSONType()/
      - Retourne le nom de la classe
    - Cette méthode est utilisée dans /toJSON()/ pour préciser la classe de l'objet à utiliser pour instancier l'objet à partir du JSON
      - Utile pour recréer dans un juge un exercice à partir du JSON reçu
- Implémenter *ToJSON*
  - Un comportement étrange détecté pour les entités compilées à la volée
  - Par défaut, /getJSONType()/ renvoie pour elles une valeur du type /plm.runtime1.Environment/
  - Cette classe est du coup inconnue pour le juge
  - En surchargeant /getJSONType()/ dans *AbstractBuggle* (classe mère de *EnvironmentEntity*) pour renvoyer une valeur fixe, le résultat précédent n'est pas modifié
  - Ajout d'un fix pas très glorieux
    - Récupère le type des entités du monde initiaux, qui est bien la valeur récupérée de *AbstractBuggle*
    - Remplace le type des entités du monde solution par la valeur récupérée précédemment
- Ajouter une méthode /exerciseFromJSON()/ à *ExerciseFactory*
  - Ajout d'un constructeur prenant du JSON comme paramètre à *BlankExercise*
    - Se contente d'initialiser les mondes initiaux, courants et solutions
    - Pour cela, extrait le JSON des mondes, récupère leur type et appelle le constructeur de la classe correspondante en passant le JSON en paramètre
*** Planned
**** DONE Refactorer les BatExercise
- Les *BatExercise* ont un format différent du reste des exercices, ce qui a posé problème plusieurs fois par le passé
- Les refactorer pour unifier le format des exercices
**** DONE Déplacer les univers se trouvant dans /src/lessons/
- Pour simplifier la gestion de ces univers dans la prochaine version des juges, il est préférable de les intégrer au coeur de PLM
- Les déplacer dans /src/plm/
**** DONE Désactivation des fichiers dans /src/lessons/
- On souhaite retirer des morceaux de code obsolètes
  - *Game*
  - Anciennes méthodes pour exécuter un exercice
- Ces morceaux de codes sont néanmoins utilisés à de nombreux endroits, notamment dans les fichiers des exercices
- Pour éviter qu'on ne puisse plus compiler PLM au cours de ce refactoring, ajouter l'extension .todo aux fichiers concernés
**** DONE Refactorer la conversion des objets de PLM en JSON
- Actuellement, c'est webPLM et PLM-judge qui explorent les instances fournies par PLM pour créer le JSON correspondant
- Se contenter d'ajouter une interface fournissant une méthode /toJSON()/ aux objets concernés permettrait de simplifier le code et d'en éviter la duplication
**** DONE Implémenter *ToJSON*
- [X] Classes de base
  - *World*, *GridWorld*
  - *Entity*
- [X] Univers des buggles
**** DONE Ajouter une méthode /exerciseFromJSON()/ à *ExerciseFactory*
- Cette méthode servira à re-créer les exercices dans les juges à partir du JSON fourni par le *Tribunal*
**** DONE Implémenter un constructeur à partir d'un *JSONObject*
- [X] Classes de base
- [X] Univers des buggles
** Semaine du <2015-12-21 lun.> au <2015-12-22 mar.>
*** Done
- Implémenter *ToJSON*
  - Manque *SourceFile* actuellement
- Refactorer les juges
  - Nettoyage du code
  - Ajout d'une classe *Judge* qui
    - Initialise un *ExerciseRunner*
    - Attend une requête d'exécution
    - Génère un exercice à partir de la requête
    - Ajoute des listeners aux mondes de l'exercice
    - Lance le programme de l'élève
  - Bug lors de la re-création de l'exercice à partir du JSON
    - Le JSON ne contient plus des *int* mais des *Long*
      - Voir [[http://stackoverflow.com/questions/29770329/json-simple-integer-parsing][ce thread]]
    - Modification des constructeurs pour récupérer les *int* correctement
- Refactorer le *Tribunal*
  - Passage de *ExecutionActor* en classe abstraite
  - Création de la classe *LocalExecutionActor* reprenant les fonctionnalités de l'ancien *ExecutionActor*
  - Création de *TribunalActor*
    - Implémentation de /startExecution()/
      - Génère un message comprenant le JSON de l'exercice, le code de l'élève et le langage de programmation utilisé
*** Planned
**** DONE Implémenter *ToJSON*
- [X] *SourceFile*
**** DONE Implémenter un constructeur à partir d'un *JSONObject*
- [X] *SourceFile*
** Semaine du <2016-01-04 lun.> au <2016-01-08 ven.>
*** Done
- Rédiger la documentation concernant les opérations d'un univers
  - Page accessible [[https://github.com/BuggleInc/PLM/wiki/Adapt-the-world's-evolution][ici]]
- Préparer la présentation dans le cadre du séminaire IJD
  - Création du [[https://github.com/MatthieuNICOLAS/IJD-seminar-2016-02-02][repo]]
  - Rédaction du plan
  - Rédaction des slides concernant
    - Le résultat de la séance d'utilisation à TN
    - Les prochaines étapes
- Implémenter *ToJSON*
  - [X] ExecutionProgress
  - Correction de la gestion des couleurs dans *BuggleWorldCell*
- Implémenter un construction à partir d'un *JSONObject*
  - SourceFile
    - Correction de l'ordre des paramètres du constructeur
  - [X] ExecutionProgress
  - Correction de la gestion des couleurs dans *BuggleWorldCell*
- Refactorer les juges
  - Envoi de l'*ExecutionProgress* résultant de l'exécution du code de l'élève
  - Suppression des fichiers dans /generators/
    - Plus le rôle des juges, dans webPLM dorénavant
  - Envoi des *Operations* générées lors de l'exécution du code de l'élève à webPLM
- Refactorer le *Tribunal*
  - Réception et affichage de l'*ExecutionProgress* transmis par le juge
  - Transmission de l'*ExecutionProgress* à *PLMActor* pour qu'il le transmette au client et enregistre dans git le résultat
    - Bug détecté occassionnellement: le résultat de l'exécution n'est pas transmis au client
      - Semble se produire si aucun juge n'est lancé au moment de la requête d'exécution et qu'on tarde à en lancer un
      - L'*ExecutionProgress* est pourtant bien reçu par *TribunalActor*
      - L'erreur provient en fait d'un timeout de *PLMActor* qui attendait la réponse de *TribunalActor*
	- [X] Soit gérer le timeout dans *PLMActor*
	- [ ] Soit augmenter la durée du timeout pour que *TribunalActor* ait le temps de se rendre compte du timeout du juge et de transmettre l'information
	- Dans tous les cas, il faudrait que *PLMActor* soit capable de supporter un dysfonctionnement du *TribunalActor*, donc la 1ère solution semble plus adaptée
  - Détection et transmission des *Operations* au client
  - Gérer le timeout de /executionActor ? StartExecution/ dans *PLMActor*
    - Génère un *ExecutionProgress* particulier indiquant le timeout
*** Planned
**** DONE Implémenter *ToJSON*
- [X] ExecutionProgress
**** DONE Implémenter un constructeur à partir d'un *JSONObject*
- [X] ExecutionProgress
** Semaine du <2016-01-12 mar.> au <2016-01-15 ven.>
*** Done
- Extraire le gestionnaire de session de Game
- Extraire le contenu commun de Game
- Refactorer GitUtils & GitSpy pour mieux gérer les dépendances
- Instancier les exercices dans webPLM
- Exposer les nouveux objets décrivant les exercices
  - Réalisé depuis quelques temps lors la ré-écriture de *Game* en plusieurs composants
- Release la nouvelle version
  - Release disponible [[https://github.com/BuggleInc/webPLM/releases/tag/v1.2.2][ici]]
- Revoir les dependencies et devDependencies de PLMAccounts & PLMProfiles
  - Si on re-écrit ces deux services avec PlayFramework, cette tâche ne sera plus nécessaire
- Permettre de stopper l'exécution
  - Actuellement, /ExerciseRunner.runExercise()/ est séquentiel:
    - On lance le /run()/ des entités dans des threads
    - On attend la fin de tous ces threads
    - On compare le monde obtenu avec le monde solution pour déterminer si l'exercice est passé
  - Ceci empêche de stopper l'exécution
    - Si une demande d'arrêt de l'exécution est reçue, elle ne sera traité qu'une fois que l'exécution sera terminée
  - Modifier /runExercise()/ pour que cette fonction ne soit pas bloquante
    - Modifier le type de retour pour renvoyer une *Future<ExecutionProgress* permettrait à l'appelant d'attacher une fonction de callback pour traiter le résultat de façon non-bloquant dès que celui-ci est disponible
      - Comment générer une future attendant l'exécution du code des entités avant de générer un *ExecutionProgress*?
      - [[http://www.nurkiewicz.com/2013/05/java-8-definitive-guide-to.html][Voir ce tuto]]
    - Modification de /runExercise()/ pour qu'elle génère une *CompletableFuture<ExecutionProgress* (une *Promise* globalement)
      - Cette *Promise* est retournée à l'appelant pour qu'il gère le résultat lorsqu'il est disponible
      - Si une erreur est rencontrée à la compilation du code, on peut dès lors répondre à la *Promise* avec l'*ExecutionProgress* correspondant
      - Sinon, on lance une tâche asynchrone qui va démarrer les entités
	- Démarre les entités dans des *Threads*
	  - Peut pas utiliser des *Futures* à la place puisqu'il n'y a pas de moyen de les stopper
	  - Peut uniquement demander à la *Future* de s'interrompre
	- Pour gérer les boucles infinies au mieux, pour chaque thread
	  - On vérifie au cas où que l'utilisateur n'ait pas demandé de stopper l'exécution
	  - Sinon on attend le thread une courte durée
	    - S'il a fini au cours de ce délai, on passe au suivant
	    - Sinon, on recommence à l'attendre
	  - Si la tâche n'est toujours pas terminée au bout d'un nombre d'essais, on stoppe nous-même l'exécution
        - Finalement on complète l'*ExecutionProgress* en fonction de ce qu'il s'est passé et on répond à la *Promise*
  - Ajout d'un attribut booléen *executionStopped* à *ExerciseRunner*
    - A *false* au démarrage de l'exécution
    - Peut passer à *true* via /ExerciseRunner.stopExecution()/
- Préparer la présentation dans le cadre du séminaire IJD
  - Ajout des slides concernant le contenu de PLM
  - Début de la réalisation du schéma de l'architecture initiale de webPLM 
*** Planned
**** DONE Extraire le gestionnaire de session de Game
- Les données de la session courante font partie de *Game*
- La session courante de l'utilisateur comprend la leçon sélectionnée, l'exercice en cours, les mondes de travail...
- En faire un composant séparé
**** DONE Extraire le contenu commun de Game
- Plusieurs éléments sont communs à tous les utilisateurs
- Les leçons disponibles, mondes initiaux et objectifs des exercices, langages de programmation disponible...
- Extraire ces objets de la classe *Game*
**** DONE Refactorer GitUtils & GitSpy pour mieux gérer les dépendances
- Permettrait de sortir l'instanciation de GitUtils de PLM facilement
- Faciliterait l'écriture et le maintien des tests unitaires sur la partie Git
**** DONE Instancier les exercices dans webPLM
- Puisqu'on instancie les leçons dans webPLM, il faut aussi modifier le processus d'instanciation des exercices
- Voir pour instancier les exercices dans webPLM et non à partir de *Game*
**** DONE Exposer les nouveaux objets décrivant les exercices
- Implémenter un acteur fournissant une API permettant de récupérer un exercice
**** DONE Release la nouvelle version
- Récupère le token d'authentification de GitHub via un webservice
- Refactoring de *HanoiWorld* et support de tous ses exercices
- Ajout du bouton 'Réinitialiser'
**** DONE Permettre de stopper l'exécution
- L'utilisateur doit pouvoir stopper l'exécution de son code si besoin
- Implémenter cette fonctionnalité
**** CANCELLED Revoir les dependencies et devDependencies de PLMAccounts & PLMProfiles
- Etudier le Gruntfile de ces 2 applications et comprendre les dépendances nécessaires à la tâche par défaut
- Déplacer les dépendances nécessaires au lancement de l'application de *devDependencies* à *dependencies*
** Semaine du <2016-01-18 lun.> au <2016-01-22 ven.>
*** Done
- Préparer la présentation dans le cadre du séminaire IJD
  - Réalisation des schémas d'architecture
    - Architecture initiale
    - Execution initale
    - Execution avec juges
    - Architecture courante
  - Ajout des slides sur les juges
  - Ajout des slides sur docker
- Permettre de stopper l'exécution
  - Mise à jour des juges pour qu'il gère le résultat de /ExerciseRunner.run()/ sous forme de *CompletableFuture*
  - Refactoring de *TribunalActor* pour supporter le stop de l'exécution
- Correction de bugs mineurs
  - Les couleurs dans *BuggleWorld* ne sont plus correctement prises en compte par l'UI
  - L'UI attend les couleurs au format [r, g, b, a] alors qu'on les lui fournit au format [r, g, b]
  - Factorisation et correction des méthodes d'import/export au format JSON des couleurs pour utiliser le format [r, g, b, a]
- Utiliser l'injection de dépendance
  - Les acteurs *LocalExecutionActor* et *TribunalActor* semblent terminés
  - Reste à instancier le bon au démarrage de l'application en fonction de la configuration
*** Planned
**** DONE Refactorer les juges
- Le refactoring PLM a modifié comment on instancie un exercice et exécute le code d'un élève
- Modifier les juges en conséquences
**** DONE Refactorer le *Tribunal*
- Modifier le *Tribunal* pour envoyer l'exercice courant au format JSON au lieu de juste fournir son identifiant au juge
** Semaine du <2016-01-25 lun.> au <2016-01-29 ven.>
*** Done
- Préparer la présentation dans le cadre du séminaire IJD
  - Une répétition a eu lieu <2016-01-25 lun.>
    - Les retours sont disponibles [[https://github.com/MatthieuNICOLAS/IJD-seminar-2016-02-02/blob/master/feedback-rehearsal.org][ici]]
  - Ajout d'une description du passage en application web
    - Motivations
    - Méthode employée
      - Transformation du client lourd en librairie
      - Implémentation d'un serveur d'application permettant d'interagir par le biais de messages JSON avec cette librairie
    - Résultat
  - Ajout d'une slide de présentation des queues de messages
    - Qu'est-ce que c'est?
    - A quoi ça peut servir?
    - Pourquoi nous l'utilisons dans notre cas
  - Slides à revoir
    - [ ] 11
    - [ ] 12
    - [ ] 15
    - [ ] 19
    - [ ] 36
- Modification du fichier de build
  - Il semblerait que compiler webPLM sur un disque dur chiffré échoue à cause d'une limite de scalac sur la taille des noms de fichiers
    - Voir [[https://github.com/playframework/playframework/issues/1379][cette issue]]
  - J'ai donc ajouté l'option du compilateur scala indiquée pour pallier à ce problème
    - Reste à voir si cela corrige effectivement le problème
- Nettoyage du code
  - Souhaite supprimer les doublons de code
  - En commençant par utiliser *ToJSON* pour envoyer les objets de PLM au client
    - Permettra de retirer les anciennes méthodes de conversion au format JSON
  - Ajout de *JSONUtils* pour faciliter la manipulation des *JSONObject*
    - En Scala, il n'a pas l'air possible d'utiliser des méthodes surchargées provenant de librairies Java
    - Cette classe Java offre des wrappers pour accéder aux méthodes de JSONSimple
  - Utilisation de /Exercise.toJSON()/
    - Pas le même format qu'auparavant, notamment pour *BuggleWorld*
      - On note juste les cellules qui diffèrent de la cellule "défaut" au lieu d'avoir un tableau à 2 dimensions regroupant l'ensemble des cellules
      - Les entités sont sous la forme de tableau et non plus de hashmap
    - Modification du code client pour prendre en compte ces changements
  - Suppression des classes dorénavant inutiles
    - Anciennes méthodes de conversion des *Exercises*, *Lectures*, *Worlds* et *Operations* en JSON
    - *Tribunal*, *LocalExecution*, *Verdict*
    - *ExecutionSpy*, *ProgLangListener*, *HumanLangListener*
  - Suppression de *Game*
    - Généralement, les classes ont une dépendance vers *Game* afin d'accéder à une instance de *I18n* et de *LogHandler*
    - Il faudrait trouver une meilleure approche pour fournir ces objets à ces classes avant de supprimer *Game*
      - [ ] Injection de dépendance? Voir dans ce cas comment injecter et garder en vie des instances différentes pour chaque utilisateur
      - [ ] Ajouter ces objets en paramètres des méthodes les exigeant
      - [ ] Ajouter des singletons *Logger* et *I18n* permettant d'accéder à une instance partagée de *LogHandler* et des instances de *I18n* pour chaque *Locale*
	- Ajouter le paramètre *Locale* aux méthodes l'exigeant
*** Planned
** Semaine du <2016-02-01 lun.> au <2016-02-05 ven.>
*** Done
- Préparer la présentation de la cadre du séminaire IJD
  - Slides à revoir
    - [X] 11: Ajout de la partie SaaS
    - [X] 12: Ajout du diagramme de classe des principaux composants
    - [X] 15: Ajout de la partie concernant l'UI
    - [X] 19: Ajout d'une slide pour présenter la solution de déléguer l'exécution à des workers
    - [X] 36: Déplacement de la slide de *Next steps* à *Result*
- Nettoyage du code
  - Ajout du singleton *Logger*
    - Redirige vers une instance par défaut de *LogHandler*
    - Possible de remplacer cette instance de *LogHandler* par une autre de notre choix
    - Modification de webPLM pour qu'il remplace l'instance par défaut de *LogHandler* par la sienne de *PLMLogger*
- Mettre en place des outils de monitoring
  - Essai avec  http://kamon.io/ pour tester le fonctionnement de cet outil
  - Ajout des modules nécessaires pour utiliser /kamon/ depuis /webPLM/
    - *kamon-core*
    - *kamon-statsd*
    - *kamon-log-reporter*
    - *kamon-system-metrics*
  - Ajout du support de *AspectJ Weaver* et des modules de /kamon/ en ayant besoin
    - *kamon-scala*
    - *kamon-play-24*
  - Besoin de lancer /webPLM/ avec la commande /activator aspectj-runner:run/ dorénavant
    - Aucune stat n'est générée pour le moment à l'aide de *AspectJ*, donc semblerait qu'on puisse sans passer
    - Vérifier ce qu'il se passe si on essaie d'utiliser *AspectJ* sans l'avoir injecté
      - [ ] Plantage?
      - [ ] Warning mais rien de plus?
  - Ajout de l'injection d'un service pour démarrer /kamon/ dans /webPLM/
  - Ajout de /kamon/ dans /PLM-judge/
    - Pour ajouter /kamon/, utiliser un gestionnaire de build semble particulièrement utile
    - Mise en place de *sbt*
  - Création d'un [[http://kamon.io/core/metrics/instruments/#minmaxcounters][MinMaxCounters]] pour observer le nombre de messages d'opérations présents dans les queues de réponses
    - Lorsqu'un juge envoie un message d'opérations, il incrémente le compteur de 1
    - Lorsque /webPLM/ dépile un message d'opérations, il décremente le compteur de 1
    - Il semblerait que le compteur n'est pas correctement incrémenté
      - Dans le test que j'effectuais, le juge se terminait très rapidement après que l'instruction pour incrémenter le compteur soit lancée
      - L'instruction n'est alors pas prise en compte (le serveur de collecte ne reçoit pas l'info?)
      - Si je fais durer le juge ~10s de plus, l'opération apparaît correctement
      - Semblerait que l'instruction /Kamon.shutdown()/ n'attend pas non plus que les demandes d'incrémentations en cours soient effectuées avant de couper le service
*** Planned
**** DONE Préparer la présentation dans le cadre du séminaire IJD
- Je dois faire une nouvelle présentation de mon travail sur PLM le 02 février 2016
- Rédiger les slides
** Semaine du <2016-02-08 lun.> au <2016-02-12 ven.>
*** Done
- Résoudre le problème d'incrémentation du compteur avec Kamon
  - J'ai demandé plus d'informations à ce sujet sur la mailing list de *Kamon* [[https://groups.google.com/forum/#!topic/kamon-user/ru7WHMPYQ8k][ici]]
  - En attente d'une réponse
- Trouver pourquoi l'exécution du code de l'élève perdure ~60s après la génération du résultat
  - Silly me, j'avais oublié de shutdown l'*ExecutorService*
  - Il fallait donc attendre qu'il se coupe de lui-même, ce qui se produisait après 1min d'inactivité
  - Ajout de l'instruction /mainExecutor.shutdown();/
- Résoudre le problème d'accès concurrents à la liste des étapes
  - Plusieurs entités ajoutent des étapes dans l'*ArrayList* /steps/ du monde
  - En parallèle, ces mêmes entités essaient de lire cette liste
  - *ArrayList* ne supporte pas les lectures et écritures en concurrence
  - Il arrive donc que, de temps en temps, une /step/ lue soit *null*
  - Séparation des producteurs d'opérations et des consommateurs
    - On veut avoir un seul lecteur d'opérations par monde
    - Le lecteur ne doit plus être appelé par les entités mais doit tourner dans un thread séparé
    - Modification de *BasicListener* pour utiliser /Executors.newSingleThreadScheduledExecutor()/ qui retourne un *ScheduledExecutorService*
    - Permet de scheduler une tâche *Runnable* à intervalles réguliers
    - Déplacement du code lisant les opérations et les transmettant à la queue de message dans cette nouvelle tâche
    - Modification du judge pour stopper les *ScheduledExecutorService* à la fin de l'exécution
    - Ajout de la méthode /BasicListener.flush()/ pour traiter les opérations restantes
      - Pour éviter les étapes instables obtenues en cas de timeout (car thread de l'entité interrompu à coups de hache), n'est pas appelée en cas de timeout de l'exécution
  - Utilisation d'une structure de données supportant les accès concurrents pour stocker les étapes d'évolution d'un *World*
    - Passage d'une *ArrayList* à une *ConcurrentLinkedDeque*
      - A voir si il vaudrait mieux utiliser une *ConcurrentLinkedQueue* d'un point de vue fonctionnalités et performances
    - Les entités peuvent donc ajouter en concurrence leurs étapes de façon transparente
    - *BasicListener* peut retirer en concurrence les étapes
    - Permet ainsi de vider la liste des étapes au fur et à mesure qu'on la traite dans le cas où il s'agit d'une exécution de code d'élève
    - Modification de *PLMActor* pour se contenter de parcourir (sans retirer) les opérations correspondant à la démo
  - Juste un problème repéré avec *sbt* lors du run
    - Interrompre les threads brutalement n'a pas l'air de lui plaire, ce qui empêche le programme de se terminer correctement pendant ~15s
    - Générer un jar du judge permet de contourner ce problème apparament
- Améliorer la gestion du timeout de l'exécution du code élève
  - Modification de *ExerciseRunner*
    - Création d'une tâche /monitorThreads/ *Runnable* reprenant le code du thread surveillant les entités
    - Lancement de cette tâche de façon périodique à l'aide de *ScheduledExecutorService*
    - Ajout de /ScheduledExecutorService.shutdown()/ dans la tâche /monitorThreads/ pour s'arrêter lorsqu'un résultat est généré
  - Ajout de la valeur /TIMEOUT/ dans *OutcomeKind*
    - Permet de différencier dans les traces utilisateurs si une exécution a timeout ou juste échoué
    - Permet aux tâches transmettant les opérations au client de savoir s'il est nécessaire d'envoyer les opérations pas encore traitées
      - Permet d'éviter de traiter des /steps/ malformées
        - Car thread stoppé lors de leur génération
      - Permet de réduire le nombre de messages entre webPLM et les juges, et entre webPLM et les clients
        - Economie de bande passante
        - Economie de CPU
      - Permet d'améliorer l'efficacité globale des juges
        - Auparavant, on attendait qu'ils aient traités l'ensemble des opérations
        - En cas de timeout, passé un certain point dans l'exécution, ces dernières ont peu de valeur car l'utilisateur boucle indéfiniment
        - Les skipper permet donc au juge de passer plus rapidement au traitement de la requête suivante
- Mettre à jour *OperationSpy* de webPLM
  - Essai avec *Scheduler* ([[http://doc.akka.io/docs/akka/current/scala/scheduler.html][voir ici]]) de /Akka/ qui semble préférable d'utiliser en Scala
  - Ajout d'une tâche planifiée vidant la liste des /steps/ et les transmettant au client
  - Mais problème de concurrence entre la tâche planifiée et la méthode /OperationSpy.flush()/ appelée lorsque l'exécution est terminée
    - On peut annuler la tâche planifiée
    - Mais celle-ci finit son exécution si elle est en cours
    - Pas de méthode pour attendre son arrêt complet
  - Utilisation de *ScheduledExecutorService*
    - Permet de reproduire le même fonctionnement que *BasicListener*
  - Problème de performances ressenti après plusieurs timeout
    - Si l'utilisateur enchaîne les exécutions à base de boucles infinies, j'ai l'impression que le serveur rencontre de plus en plus de mal à traiter les exécutions suivantes
    - Vérifier si ces problèmes sont avérés à l'aide d'un outil de monitoring
- Préparer les slides pour la présentation de PLM au sein de l'équipe
  - [X] Supprimer de la partie technique sur Docker
    - Se contenter d'expliquer à quoi Docker nous sert
    - Indiquer que j'ai des slides plus complètes sur le sujet si besoin
  - [X] Ajouter des slides pour expliquer le contenu de PLM-data
    - BDD sous forme de repo git
    - Permet de conserver les versions du code des élèves
    - Permet de conserver les actions des utilisateurs sous forme de message de commit
    - Le contenu est public
  - [X] Ajouter des slides concernant les publics visés
    - Elèves
    - Enseignants
    - Chercheurs
  - [X] Ajouter des slides pour expliquer le problème du singleton *Game*
    - A la base, *Game* était un singleton
    - Comme *Game* permet de conserver la session de l'utilisateur, il a fallu modifier cela pour supporter le multi-utilisateurs
    - S'est contenté de fournir l'instance de *Game* à toutes les classes en ayant besoin
    - Création d'un *Game* par utilisateur
  - [X] Développer la partie /Next steps/
    - [X] Développer la slide sur le refactoring
      - Voulait retirer les leçons et exercices de *Game*
      - S'est transformée en "Supprimer *Game*"
      - A dû réécrire les composants reposant sur *Game*
      - A dû remanier le workflow avec les juges pour transmettre les exercices
*** Question
- Ajouter la valeur /STOP/ dans *OutcomeKind*?
  - Permettrait de différencier dans les traces utilisateurs si une exécution a été stoppée par l'utilisateur ou si elle a juste échoué
  - Permettrait d'éviter de traiter et de transmettre les opérations restantes au client alors qu'elles représentent peu d'intérêt
*** Planned
**** DONE Trouver pourquoi l'exécution du code de l'élève perdure ~60s après la génération du résultat
- En essayant de régler les problèmes d'incrémentation du compteur d'opérations en cours, j'ai retiré le /System.exit()/ se trouvant à la fin de l'exécution de /PLM-judge/
- Le programme ne termine plus correctement:
  - Le résultat est correctement généré et envoyé à /webPLM/
  - Mais le programme ne termine pas pour autant
  - Le juge ne se termine et ne rend la main que 60s plus tard
- Déterminer la cause de ce comportement
**** DONE Résoudre le problème d'accès concurrents à la liste des étapes
- Lorsqu'on exécute le code de l'élève, les entités ajoutent leur progression sous la forme de /step/ dans la liste des /steps/ global d'un monde
- Lorsque plusieurs entités sont présentes dans un monde, nous avons des problèmes d'accès concurrents
- Les régler
**** DONE Améliorer la gestion du timeout de l'exécution du code élève
- Actuellement, un thread supervise les threads des entités
  - Ce thread attend une période de temps donnée avec /thread.join(duration)/
  - Il vérifie ensuite si ce thread est terminé, il passe au suivant
  - Lorsque toutes les entités ont fini de s'exécuter, il génère un *ExecutionProgress* résultat
  - Si les threads sont toujours en vie après un certain nombre de /join()/, il les stoppe et génère un *ExecutionProgress* pour spécifier le timeout
- Cette méthode n'est pas très efficiente et performante
  - La durée de timeout n'est parfois pas respecté, avec des threads tournant pendant ~60s au lieu de ~10s
- Voir si *ScheduledExecutorService* permettrait pas d'implémenter une solution plus efficace
**** DONE Mettre à jour *OperationSpy* de webPLM
- Refactorer *OperationSpy* comme nous l'avons fait pour *BasicListener* pour
  - Utiliser *ScheduledExecutorService* ou équivalent pour traiter les opérations générées périodiquement
  - Adapter le parcours des /steps/ à la nouvelle de structure utilisée *ConcurrentLinkedDeque*
  - Ne plus traiter les opérations restantes en cas de timeout car inutile et inefficient
**** DONE Préparer les slides pour la présentation de PLM au sein de l'équipe
- Dans l'équipe COAST, nous effectuons des réunions hebdomadaires pour partager sur les différentes tâches/problématiques sur lesquelles nous avons travaillé
- Comme PLM est un projet en marge de l'équipe, et que tous les membres ne sont pas familiers avec, il a été proposé que je le présente
- Revoir les slides utilisées dans le cadre des séminaires IJD et en adapter le contenu
** Semaine du <2016-02-15 lun.> au <2016-02-19 ven.>
*** Done
- Supprimer *IWorldView*
  - Suite au refactoring pour résoudre le problème de lectures concurrentes de la liste des étapes, *IWorldView* n'est plus nécessaire
  - Suppression de l'interface *IWorldView* et des méthodes y faisant référence
  - Mise à jour de webPLM et de PLM-judge
- Implémenter *I18nManager*
  - Map /static/ des différentes instances de *I18n*
  - Méthode pour récupérer l'instance souhaitée en fonction d'une *Locale*
  - Si l'instance de *I18n* n'est pas encore repertoriée, elle est générée et ajoutée
- Retirer *Game*
  - Suppression des classes et méthodes dorénavant non-utilisées
  - Ajout de *Locale* en paramètre constructeur de *GitUtils*
  - Ajout de *UserSettings*
    - Permet d'obtenir une référence vers la *Locale* et le *ProgrammingLanguage* courants
  - Ajout de *UserSettings* en paramètre de *Exercise*
    - Permet aux méthodes ayant besoin de soit *Locale* soit de *ProgrammingLanguage* d'y accéder
    - Pas besoin de mettre à jour la référence vers *UserSettings* lorsque l'utilisateur change un de ses paramètres
    - Suffit juste d'actualiser les références dans *UserSettings*
  - Suppression de la dépendance à *Game* dans *World*
  - Suppression de la dépendance à *Game* dans *Exercise*
  - Suppression de *Game*, *Lecture* et *Lesson*
- Re-implémenter les tests unitaires
  - Les tests de git passent toujours et me paraissent à jour
  - Définition des cas de tests pour *ExerciseFactory*
  - Définition des cas de tests pour *ExerciseRunner*
  - Implémentation des tests unitaires pour *ExerciseFactory*
*** Planned
**** DONE Implémenter *I18nManager*
- Actuellement, on génère une instance de l'outil de traduction *I18n* pour chaque utilisateur
- En générer une instance pour chaque langue supportée à l'initialisation et les partager entre les utilisateurs serait plus propre et efficace
- Implémenter le singleton *I18nManager* qui permettrait de générer et d'accéder à ces instances
**** DONE Retirer *Game*
**** TODO Re-implémenter la gestion des indices
- Auparavant, ils étaient gérés dans *Lecture*
- Les regénérer depuis *ExerciseFactory* à l'initialisation
**** TODO Re-implémenter les tests unitaires
- Les tests permettant de vérifier le bon fonctionnement des méthodes de compilation et d'exécution ne sont plus à jour
- Les ré-implémenter
  - [X] Implémenter des tests unitaires pour *ExerciseFactory*
    - [X] /initializeExercise()/ doit initialiser les /defaultSourceFiles/
    - [X] /initializeExercise()/ doit initialiser les /missions/
    - [X] /initializeExercise()/ doit initialiser les mondes solutions
  - [ ] Implémenter des tests unitaires pour *ExerciseRunner*
    - [ ] /run()/ doit returner un *ExecutionProgress* avec /outcome=OutcomeKind.COMPILATION/ si le code contient une erreur de syntaxe
    - [ ] /run()/ doit returner un *ExecutionProgress* avec /outcome=OutcomeKind.FAILED/ si le code génère une erreur d'exécution
    - [ ] /run()/ doit returner un *ExecutionProgress* avec /outcome=OutcomeKind.FAILED/ si le code ne permet pas d'atteindre l'état objectif
    - [ ] /run()/ doit returner un *ExecutionProgress* avec /outcome=OutcomeKind.TIMEOUT/ si le code ne finit pas de s'exécuter avant la durée fixée
    - [ ] /run()/ doit returner un *ExecutionProgress* avec /outcome=OutcomeKind.PASS/ si le code permet d'atteindre l'état objectif
- Revoir si les tests de git ont aussi besoin d'être mis à jour
**** TODO Re-implémenter les tests d'intégrations
- Les leçons et les exercises ayant été retirés du repo /PLM/, les tests d'intégrations concernant ces objets ne fonctionnent plus
- Les re-implémenter dans /webPLM/
**** TODO Résoudre le problème d'erreur de compilation de webPLM sur les disques durs chiffrés
- Potentiellement lié à [[https://github.com/playframework/playframework/issues/1379][cette issue]]
- J'avais modifié le fichier de build pour ajouter [[https://github.com/BuggleInc/webPLM/blob/master/build.sbt#L38][cette option]] censée résoudre le problème
- Malheureusement le problème semble toujours présent
**** TODO Résoudre le problème d'incrémentation du compteur avec Kamon
**** TODO Cloner les mondes, entités et opérations lors d'un clonage d'un exercice
- Actuellement, on se contente de fournir au clone les mêmes références pour les mondes
- Lorsque plusieurs utilisateurs exécutent en concurrence un programme sur un même exercice en mode local, leur programmes modifient le monde simultanément
**** TODO Implémenter *ToJSON*
- [ ] Univers des tests unitaires
- [ ] Univers des tortues
- [ ] Univers du drapeau hollandais
- [ ] Univers des pancakes
- [ ] Univers des tris
- [ ] Univers du baseball
- [ ] Univers des listes récursives
- [ ] Univers de light bot
- [ ] Univers du lander
**** TODO Implémenter un constructeur à partir d'un *JSONObject*
- [ ] Univers des tests unitaires
- [ ] Univers des tortues
- [ ] Univers du drapeau hollandais
- [ ] Univers des pancakes
- [ ] Univers des tris
- [ ] Univers du baseball
- [ ] Univers des listes récursives
- [ ] Univers de light bot
- [ ] Univers du lander
**** TODO Re-implémenter les exercices manquants
- Le refactoring des exercices a conduit à extraire les exercices de PLM et à les déplacer dans webPLM
- Tous les exos n'ont pas encore été extraits
- Il faut aussi modifier le constructeur appelé
- [ ] Welcome
- [ ] Maze
- [ ] Turmites
- [ ] TurtleArt
- [ ] Sort.basic
- [ ] Sort.dutchflag
- [ ] Sort.baseball
- [ ] Sort.pancake
- [ ] Recursion.cons
- [ ] Recursion.logo
- [ ] Recursion.hanoi
- [ ] Bat.string1
**** TODO Re-implémenter les évènements Git manquants
- reverted
- callForHelp
- cancelCallForHelp
- readTip
- commonErrorFeedback
**** TODO Release l'application sous forme de .jar
- Voir [[https://www.playframework.com/documentation/2.4.x/Production][cette page]] pour configurer le build pour générer un .jar
**** TODO Ré-implémenter la gestion erreurs communes
- Au cours du refactoring du processus d'exécution d'un exercice, la gestion des erreurs communes a été mise de côté pour simplifier le refactoring
- Maintenant que les fonctionnalités principales sont ré-implémentées, y ajouter la gestion des erreurs communes
**** TODO Corriger le décalage entre le numéro de ligne affiché et le numéro de ligne réel
- Lorsque l'utilisateur rencontre une erreur de compilation ou à l'exécution, le message d'erreur spécifie la ligne à laquelle l'erreur s'est produite
- Vu qu'on place son code dans des templates prédéfinis, on doit modifier le numéro de ligne de l'erreur pour correspondre à l'éditeur de l'élève
- L'offset est incorrect actuellement:
  - +1 pour Java et Scala
  - +13 pour Python
**** TODO Utiliser l'injection de dépendance
- Voir si ça permettrait de nettoyer et clarifier le code avec
  - Un injecteur global permettant de récupérer la configuration du serveur, les objets de Silhouette
  - Un injecteur par utilisateur permettant de récupérer son profil et ses instances
- Certains articles de blog ([[http://www.michaelpollmeier.com/2014/06/29/simple-dependency-injection-scala/][ici]] et [[http://loicdescotte.github.io/posts/scala-di/][là]]) expliquent cependant qu'on peut se passer de l'injection de dépendances en Scala
  - Voir aussi [[http://aloiscochard.blogspot.fr/2014/12/the-cake-is-lie.html][cet article]] et [[http://di-in-scala.github.io/][cette page]] pour plus d'informations
**** TODO Refactorer la partie authentification
- Mettre à jour la version de Silhouette
- Voir pour mieux gérer les *Future* dans *UserDAORestImpl*
- Trouver une alternative au mapping gitID -> acteur
**** TODO Revoir le formulaire concernant la publication des traces
- Actuellement, si on clique sur "Oui" ou sur "Non", ce choix est valide que pour cette session.
- Si l'utilisateur recharge la page, il doit de nouveau répondre à la question.
- C'est seulement s'il sélectionne "Décider plus tard" que la pop-up disparaît pendant plusieurs jours.
- Voir pour n'afficher la pop-up qu'après un certain nombre d'exécution
**** TODO Corriger les tests d'intégration
- Les tests d'intégration de PLM échouent depuis l'ajout de la leçon Logo
- Ils échouent aussi dans la branche webPLM-split
- Voir d'où proviennent les erreurs
**** TODO Découper les tests d'intégration des leçons
- Actuellement, il existe une série de tests visant à vérifier la validité des solutions pour chaque exercice de chaque leçon
- Cette série de tests échoue de temps en temps car elle met trop de temps à s'exécuter
- Découper leçon par leçon cette série de test permettrait d'éviter ce faux-positif et de localiser plus finement où les erreurs se produisent
**** TODO Retravailler le workflow de déploiement des dockers
- Que faire des *docker-compose.yml*?
  - Les machines de productions n'ont besoin seulement que des *docker-compose.yml* des applications à déployer
  - Les mettre dans un repo différent? ([[https://github.com/BuggleInc/plm-dockers][PLM-dockers?]])
  - Garder cependant les *docker-compose.yml* dans repo du projet pour faciliter le test de l'application en mode développement?
**** TODO Mettre en place des outils de monitoring
- Voir http://kamon.io/, http://graphite.wikidot.com/, http://munin-monitoring.org/ pour voir lequel est le plus adapté à notre besoin
- Stats intéressantes à posséder:
  - Nombre de messages envoyés par webPLM et nombre de messages reçus par les juges
  - Nombre de messages envoyés par les juges et nombre de messages reçus par webPLM
  - Nombre de juges en vie
  - Nombre d'exécutions ayant pour résultat un timeout
  - Stats de la JVM?
  - Utilisation du CPU de la machine
  - Utilisation de la RAM de la machine
**** TODO Vérifier les performances de webPLM après plusieurs exécutions ayant timeout en mode local
- J'ai eu le sentiment que les performances de webPLM se dégradaient au fur et à mesure que l'utilisateur lui faisait exécuter des boucles infinies en mode local
- Voir si ce ressenti est vérifié à l'aide d'un outil de monitoring 
**** TODO Reprendre les tests de charges
- L'application ne tenant pas la charge en utilisation réelle, il faut déterminer d'où provient le (les?) problème
- Il faudrait pour ça reprendre et continuer [[https://github.com/BuggleInc/PLM-Protractor][le travail de Pierric]]
  - Corriger les bugs qu'il a détecté dans ses tests
    - Menu latéral faisant bugger les tests
    - Websocket posant problème pour détecter quand l'interaction avec le serveur est finie
  - Distribuer les tests pour simuler le comportement de plusieurs utilisateurs
- Voir si besoin [[http://zombie.js.org/][Zombie.js]]
**** TODO Uniformiser TurtleArt
- La leçon TurtleArt et ses exercices semblent être gérée de façon différente des autres leçons
- Voir pour uniformiser tout ça
- Ecrire des consignes pour ses exercices au passage?
**** TODO Désactiver la démo pour TurtleArt
- [[https://github.com/BuggleInc/webPLM/issues/2][Cette issue]] est d'autant plus vraie pour la leçon *TurtleArt*
- Voir pour désactiver la démo pour cette leçon
**** TODO Générer une erreur si l'application est mal configurée
- Actuellement, des valeurs par défaut sont passées si l'application est mal configurée (variables d'environnements manquantes par exemple)
- Il faudrait mieux interrompre le démarrage de l'application & générer une erreur indiquant à l'admin/au développeur qu'il faut revoir la configuration
**** TODO Déployer un DockerHub local
- DockerHub offre des performances pas terribles:
  - La vitesse de téléchargement et d'upload des images diminue très fortement au cours de l'opération
- Déployer notre propre registre d'image dockers pourrait être résoude ces problèmes de performances
  - Voir [[https://docs.docker.com/registry/deploying/][cette page]] pour voir comment faire et récupérer la configuration du *docker-compose.yml*
**** TODO Ajouter un écran de chargement
- L'application met parfois du temps à répondre lors de
  - L'initialisation
  - L'authentification
  - L'exécution du code élève
- Mettre un écran de chargement indiquerait à l'utilisateur qu'il faut patienter
**** TODO Adapter les consignes à la nouvelle interface
- Certaines consignes font référence à l'UI
- D'autres permettent de consulter des indices
- Voir pour adapter ça
**** TODO Ajouter d'autres providers
- Twitter?
**** TODO Profiler l'application
- Voir les performances en RAM de l'application
- Voir les performances en CPU de l'application
**** TODO Revoir Blockly
- Les toolboxs pour chaque exercice ne semble pas avoir été récupérées lors du merge
- Voir pour les ajouter
- Voir pour ajouter les entités .blockly des BDR
**** TODO Lancer docker-compose au démarrage de la machine
- Lorsque la machine de TELECOM Nancy est redémarré, les différents conteneurs sont stoppés
- Il faudrait qu'ils se relancent automatiquement au démarrage de la machine
**** TODO Transférer les applications GitHub et Google
- Pour pouvoir utiliser les services OAuth2 de GitHub et Google, il est nécessaire de créer une application chez eux.
- Pour chacun de ces providers, deux applications sont nécessaires: une pour le mode local, une pour le mode centralisé
- Transférer ces applications:
  - GitHub -> A BuggleInc
  - Google -> Créer un compte Google BuggleInc
**** TODO Séparer l'exécution par monde
- Avec la nouvelle interface, exécuter le programme de l'utilisateur monde par monde permettrait de mieux indiquer sur quel monde s'est produit l'erreur
- On a donc besoin d'un résultat par monde et non plus global
**** TODO Utiliser webGL pour représenter les mondes
- Actuellement, canvas est majoritairement utilisé pour représenter les mondes
- Mais des signes de faiblesses apparaissent dans certains exercices possédant de nombreuses étapes, notamment en utilisant Firefox
- Passer à webGL pourrait permettre de résoudre ces problèmes de performances
- Voir pour utiliser [[http://www.pixijs.com/][pixi.js]] qui se vante d'être le moteur de rendering le plus rapide
**** TODO Améliorer le service d'authentification
- [ ] Changer la page d'accueil
- [X] Empêcher l'utilisateur d'accèder à la page de demande d'autorisation d'accès au compte sans être connecté
- [X] Permettre à l'utilisateur de s'inscrire et d'être ensuite redirigé vers la page d'autorisation d'accès au compte
- [X] Stocker que l'utilisateur a déjà accepté d'autoriser l'accès à son compte pour un client et ne plus lui redemander son avis
  - L'entrée du token dans la base de données permet de lier un client à un utilisateur
  - Lorsque l'utilisateur accède à la page d'autorisation, vérifier si on peut trouver un token déjà existant pour cet utilisateur
  - Si une entrée existe, fournir un code d'accès directement
- [ ] Permettre à l'utilisateur de supprimer l'autorisation d'accès d'un client à son compte à partir son profil
- [ ] Permettre à un utilisateur d'enregistrer un nouveau client
**** TODO Ajouter un formulaire de récupération d'un UUID
- L'utilisateur peut demander à se faire envoyer par mail son UUID Git
- A sa prochaine connexion, si le cookie a expiré, il peut le regénérer par le biais d'un formulaire
**** TODO Merger les PR de Benjamin
- WebPLM
  - PR ajout de l'éditeur d'exercices
- PLM
  - PR ajout de l'exercice par défaut et sauvegarde d'un nouvel exercice
**** TODO Documenter le service de profil
- Rédiger README
- Revoir LICENSE
**** TODO Réalisation d'une interface admin
- Retrouver l'id Git des utilisateurs enregistrés
**** TODO Rédiger un README pour PLM-data
- Lorsqu'on demande à l'utilisateur s'il souhaite rendre ses données d'utilisation publique, un lien lui permet d'accéder [[https://github.com/mquinson/PLM-data][au repo]]
- Un README expliquant les données stockées et leur format aurait plusieurs utilités:
  - Un utilisateur lambda pourrait visualiser et comprendre quelles sont ses données concernées
  - Ce README servirait aussi de documentation pour les chercheurs souhaitant travailler sur ce jeu de données
**** TODO Empêcher une attaque de type "Brute force" pour récupérer les mots de passe de la BDD
- [[https://www.owasp.org/index.php/Authentication_Cheat_Sheet#Prevent_Brute-Force_Attacks][Cette page]] rassemble diverses bonnes pratiques nécessaires à un mécanisme d'authentification
- Une des recommandations est de mettre en place un mécanisme empêchant une attaque de type "Brute force"
- Pour cela, il "suffit" de désactiver temporairement un compte lorsque plusieurs tentatives de connexion avec un mot de passe erroné ont été détectées
- Implémenter ce mécanisme
**** TODO Finaliser le système de traduction
- Au cours du refactoring, j'ai dû remplacer /Direction.toString/ par /Direction.direction2translated/
  - Voir où était appelé /Direction.toString/ pour mettre à jour le code
**** TODO Finaliser le système de log
- Les diagnostics d'erreurs lors de la compilation/de l'exécution ne sont pas loggés correctement
  - Par exemple /javax.tools.DiagnosticCollector@5e2be792/
  - Corriger ça
- Il reste des /System.out.println/ dans les classes des langages de programmation
  - Comment les remplacer?
- Voir quels sont les messages loggés actuellement qu'il faudrait plutôt faire parvenir au client
**** TODO Refactorer les Program Steps
- Lorsqu'on bascule d'un monde à l'autre, *AngularJS* met à jour le DOM en retirant les étapes du programmes présentes et en ajoutant celle du nouveau monde
- Lorsque le monde en possède plusieurs centaines, un ralentissement se fait sentir.
**** TODO Améliorer l'interaction directives/controllers
- Certaines actions du controller interagissant avec des directives sont exécutés avant que ces dernières ne soient chargées...
- Cela peut aller jusqu'à faire rendre inutilisable l'application tant que l'utilisateur n'a pas rechargé la page
- Voir pour prévenir ce genre de bugs
**** TODO Mettre en place un repo Maven PLM
- Plutôt que de compiler PLM à chaque modification et de mettre le jar dans le répertoire /lib/ de webPLM, il faudrait que PLM soit une dépendance Maven pour webPLM
- Voir comment migrer le projet vers Maven ou un autre système de build (SBT? Gradle?) permettant de déboucher sur la mise en place d'un repo Maven
**** TODO Rédiger la documentation de WebPLM
- Voir quels outils de documentation utiliser
- Documenter les composants et leurs méthodes
- Documenter le protocole de communication de la websocket entre le client et le serveur
- Documenter le système de traduction
**** TODO Créer une VM de l'environnement de développement de *PLM*
- Installer les dépendances
  - Java 8
  - Play
  - Git
- Cloner les différents repos
  - PLM
  - webPLM
  - PLM-judge?
**** TODO Créer un script d'installation de l'environnement de développement de *PLM*
- Dans la même veine que la VM, mettre à disposition un script d'installation de l'environnement de dev pourrait aider certains
